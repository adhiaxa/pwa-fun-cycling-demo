{"version":3,"sources":["webpack:///src/app/main/apps/scrumboard/board/dialogs/card/card.component.ts","webpack:///src/app/main/apps/scrumboard/board/dialogs/card/card.component.html","webpack:///src/app/main/apps/scrumboard/board/board.component.ts","webpack:///src/app/main/apps/scrumboard/board/board.component.html","webpack:///src/app/main/apps/scrumboard/board/add-list/add-list.component.ts","webpack:///src/app/main/apps/scrumboard/board/add-list/add-list.component.html","webpack:///src/app/main/apps/scrumboard/board/list/card/card.component.ts","webpack:///src/app/main/apps/scrumboard/board/list/card/card.component.html","webpack:///src/app/main/apps/scrumboard/scrumboard.service.ts","webpack:///src/app/main/apps/scrumboard/board/sidenavs/settings/board-color-selector/board-color-selector.component.ts","webpack:///src/app/main/apps/scrumboard/board/sidenavs/settings/board-color-selector/board-color-selector.component.html","webpack:///src/app/main/apps/scrumboard/scrumboard.component.ts","webpack:///src/app/main/apps/scrumboard/scrumboard.component.html","webpack:///src/app/main/apps/scrumboard/board/edit-board-name/edit-board-name.component.ts","webpack:///src/app/main/apps/scrumboard/board/edit-board-name/edit-board-name.component.html","webpack:///src/app/main/apps/scrumboard/board/sidenavs/settings/settings.component.ts","webpack:///src/app/main/apps/scrumboard/board/sidenavs/settings/settings.component.html","webpack:///src/app/main/apps/scrumboard/scrumboard.module.ts","webpack:///src/app/main/apps/scrumboard/board/list/list.component.ts","webpack:///src/app/main/apps/scrumboard/board/list/list.component.html","webpack:///src/app/main/apps/scrumboard/list.model.ts","webpack:///src/app/main/apps/scrumboard/board.model.ts","webpack:///src/app/main/apps/scrumboard/board/list/add-card/add-card.component.ts","webpack:///src/app/main/apps/scrumboard/board/list/add-card/add-card.component.html","webpack:///src/app/main/apps/scrumboard/card.model.ts","webpack:///src/app/main/apps/scrumboard/board/list/edit-list-name/edit-list-name.component.ts","webpack:///src/app/main/apps/scrumboard/board/list/edit-list-name/edit-list-name.component.html","webpack:///src/app/main/apps/scrumboard/board/dialogs/card/label-selector/label-selector.component.ts","webpack:///src/app/main/apps/scrumboard/board/dialogs/card/label-selector/label-selector.component.html"],"names":["$event","stopPropagation","matDialogRef","ScrumboardCardDialogComponent","_data","_matDialog","_scrumboardService","toggleInArray","_unsubscribeAll","onBoardChanged","pipe","subscribe","board","card","cards","find","_card","cardId","id","list","lists","_list","listId","next","complete","due","updateCard","subscribed","attachmentId","idAttachmentCover","attachment","attachments","splice","indexOf","checklist","checklists","checkItems","checkedItems","allCheckedItems","allCheckItems","checkItem","checked","checkItemsChecked","item","length","updateCheckedCount","form","checkList","checkItemVal","value","newCheckItem","name","push","setValue","generateGUID","checklistTitle","resetForm","checklistMenu","closeMenu","setTimeout","newCheckListTitleField","nativeElement","focus","newCommentText","newComment","idMember","message","time","comments","unshift","confirmDialogRef","open","disableClose","componentInstance","confirmMessage","afterClosed","result","close","removeCard","ScrumboardBoardComponent","_activatedRoute","_location","newListName","addList","newName","updateBoard","go","uri","ev","onBoardNameChanged","onDrop","onListAdd","ScrumboardBoardAddListComponent","_formBuilder","formActive","listAdded","group","focusNameField","nameInputField","valid","getRawValue","ScrumboardBoardCardComponent","snapshot","data","filter","cardDate","Date","ScrumboardService","_httpClient","onBoardsChanged","route","state","routeParams","params","Promise","resolve","reject","all","getBoards","then","get","response","boards","boardId","newCard","map","idCards","newList","index","post","BoardResolve","getBoard","paramMap","ScrumboardBoardColorSelectorComponent","colors","color","settings","ScrumboardComponent","_router","newBoard","createNewBoard","navigate","ScrumboardEditBoardNameComponent","formBuilder","boardNameChanged","encodeURIComponent","replace","toLowerCase","ScrumboardBoardSettingsSidenavComponent","scrumboardService","view","cardCoverImages","routes","path","component","scrumboard","redirectTo","ScrumboardModule","forChild","ScrumboardBoardListComponent","newCardName","addCard","listScroll","scrollToBottom","removeList","dialogRef","panelClass","onListNameChanged","onCardAdd","List","sampleLabels","sampleMembers","avatar","Board","members","labels","ScrumboardBoardAddCardComponent","cardAdded","cardName","Card","description","idMembers","idLabels","activities","ScrumboardBoardEditListNameComponent","listNameChanged","ScrumboardLabelSelectorComponent","cardLabelsChanged","labelsMenuView","newLabel","Object","assign"],"mappings":"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","file":"scrumboard-scrumboard-module-es5.js","sourcesContent":["import { Component, Inject, OnDestroy, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { Subject } from 'rxjs';\n\nimport { FuseConfirmDialogComponent } from '@fuse/components/confirm-dialog/confirm-dialog.component';\nimport { FuseUtils } from '@fuse/utils';\n\nimport { ScrumboardService } from 'app/main/apps/scrumboard/scrumboard.service';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector     : 'scrumboard-board-card-dialog',\n    templateUrl  : './card.component.html',\n    styleUrls    : ['./card.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ScrumboardCardDialogComponent implements OnInit, OnDestroy\n{\n    card: any;\n    board: any;\n    list: any;\n\n    toggleInArray = FuseUtils.toggleInArray;\n    confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\n\n    @ViewChild('checklistMenuTrigger')\n    checklistMenu: MatMenuTrigger;\n\n    @ViewChild('newCheckListTitleField')\n    newCheckListTitleField;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {MatDialogRef<ScrumboardCardDialogComponent>} matDialogRef\n     * @param _data\n     * @param {MatDialog} _matDialog\n     * @param {ScrumboardService} _scrumboardService\n     */\n    constructor(\n        public matDialogRef: MatDialogRef<ScrumboardCardDialogComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: any,\n        private _matDialog: MatDialog,\n        private _scrumboardService: ScrumboardService\n    )\n    {\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this._scrumboardService.onBoardChanged\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(board => {\n                this.board = board;\n\n                this.card = this.board.cards.find((_card) => {\n                    return this._data.cardId === _card.id;\n                });\n\n                this.list = this.board.lists.find((_list) => {\n                    return this._data.listId === _list.id;\n                });\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Remove due date\n     */\n    removeDueDate(): void\n    {\n        this.card.due = '';\n        this.updateCard();\n    }\n\n    /**\n     * Toggle subscribe\n     */\n    toggleSubscribe(): void\n    {\n        this.card.subscribed = !this.card.subscribed;\n\n        this.updateCard();\n    }\n\n    /**\n     * Toggle cover image\n     *\n     * @param attachmentId\n     */\n    toggleCoverImage(attachmentId): void\n    {\n        if ( this.card.idAttachmentCover === attachmentId )\n        {\n            this.card.idAttachmentCover = '';\n        }\n        else\n        {\n            this.card.idAttachmentCover = attachmentId;\n        }\n\n        this.updateCard();\n    }\n\n    /**\n     * Remove attachment\n     *\n     * @param attachment\n     */\n    removeAttachment(attachment): void\n    {\n        if ( attachment.id === this.card.idAttachmentCover )\n        {\n            this.card.idAttachmentCover = '';\n        }\n\n        this.card.attachments.splice(this.card.attachments.indexOf(attachment), 1);\n\n        this.updateCard();\n    }\n\n    /**\n     * Remove checklist\n     *\n     * @param checklist\n     */\n    removeChecklist(checklist): void\n    {\n        this.card.checklists.splice(this.card.checklists.indexOf(checklist), 1);\n\n        this.updateCard();\n    }\n\n    /**\n     * Update checked count\n     *\n     * @param list\n     */\n    updateCheckedCount(list): void\n    {\n        const checkItems = list.checkItems;\n        let checkedItems = 0;\n        let allCheckedItems = 0;\n        let allCheckItems = 0;\n\n        for ( const checkItem of checkItems )\n        {\n            if ( checkItem.checked )\n            {\n                checkedItems++;\n            }\n        }\n\n        list.checkItemsChecked = checkedItems;\n\n        for ( const item of this.card.checklists )\n        {\n            allCheckItems += item.checkItems.length;\n            allCheckedItems += item.checkItemsChecked;\n        }\n\n        this.card.checkItems = allCheckItems;\n        this.card.checkItemsChecked = allCheckedItems;\n\n        this.updateCard();\n    }\n\n    /**\n     * Remove checklist item\n     *\n     * @param checkItem\n     * @param checklist\n     */\n    removeChecklistItem(checkItem, checklist): void\n    {\n        checklist.checkItems.splice(checklist.checkItems.indexOf(checkItem), 1);\n\n        this.updateCheckedCount(checklist);\n\n        this.updateCard();\n    }\n\n    /**\n     * Add check item\n     *\n     * @param {NgForm} form\n     * @param checkList\n     */\n    addCheckItem(form: NgForm, checkList): void\n    {\n        const checkItemVal = form.value.checkItem;\n\n        if ( !checkItemVal || checkItemVal === '' )\n        {\n            return;\n        }\n\n        const newCheckItem = {\n            name   : checkItemVal,\n            checked: false\n        };\n\n        checkList.checkItems.push(newCheckItem);\n\n        this.updateCheckedCount(checkList);\n\n        form.setValue({checkItem: ''});\n\n        this.updateCard();\n    }\n\n    /**\n     * Add checklist\n     *\n     * @param {NgForm} form\n     */\n    addChecklist(form: NgForm): void\n    {\n        this.card.checklists.push({\n            id               : FuseUtils.generateGUID(),\n            name             : form.value.checklistTitle,\n            checkItemsChecked: 0,\n            checkItems       : []\n        });\n\n        form.setValue({checklistTitle: ''});\n        form.resetForm();\n        this.checklistMenu.closeMenu();\n        this.updateCard();\n    }\n\n    /**\n     * On checklist menu open\n     */\n    onChecklistMenuOpen(): void\n    {\n        setTimeout(() => {\n            this.newCheckListTitleField.nativeElement.focus();\n        });\n    }\n\n    /**\n     * Add new comment\n     *\n     * @param {NgForm} form\n     */\n    addNewComment(form: NgForm): void\n    {\n        const newCommentText = form.value.newComment;\n\n        const newComment = {\n            idMember: '36027j1930450d8bf7b10158',\n            message : newCommentText,\n            time    : 'now'\n        };\n\n        this.card.comments.unshift(newComment);\n\n        form.setValue({newComment: ''});\n\n        this.updateCard();\n    }\n\n    /**\n     * Remove card\n     */\n    removeCard(): void\n    {\n        this.confirmDialogRef = this._matDialog.open(FuseConfirmDialogComponent, {\n            disableClose: false\n        });\n\n        this.confirmDialogRef.componentInstance.confirmMessage = 'Are you sure you want to delete the card?';\n\n        this.confirmDialogRef.afterClosed().subscribe(result => {\n            if ( result )\n            {\n                this.matDialogRef.close();\n                this._scrumboardService.removeCard(this.card.id, this.list.id);\n            }\n        });\n    }\n\n    /**\n     * Update card\n     */\n    updateCard(): void\n    {\n        this._scrumboardService.updateCard(this.card);\n    }\n}\n","<div class=\"dialog-content-wrapper\">\n\n    <mat-toolbar *ngIf=\"card\" matDialogTitle class=\"accent m-0\" fxFlex=\"1 0 auto\" fxLayout=\"row\">\n\n        <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n\n            <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n                <!-- DUE DATE -->\n                <div class=\"due-date\" fxFlex=\"0 1 auto\">\n\n                    <button *ngIf=\"card.due\" mat-icon-button [matMenuTriggerFor]=\"dueDateMenu\">\n                        <mat-icon>today</mat-icon>\n                    </button>\n\n                    <mat-menu #dueDateMenu=\"matMenu\" [overlapTrigger]=\"false\">\n                        <button mat-menu-item (click)=\"removeDueDate()\">Remove Due Date</button>\n                    </mat-menu>\n\n                    <mat-form-field *ngIf=\"!card.due\">\n                        <input matInput [matDatepicker]=\"menuPicker\" [(ngModel)]=\"card.due\">\n                        <mat-datepicker-toggle matSuffix [for]=\"menuPicker\"></mat-datepicker-toggle>\n                        <mat-datepicker #menuPicker></mat-datepicker>\n                    </mat-form-field>\n\n                </div>\n                <!-- / DUE DATE -->\n\n                <!-- LABELS -->\n                <div class=\"labels\" fxFlex=\"0 1 auto\">\n\n                    <button mat-icon-button [matMenuTriggerFor]=\"labelsMenu\">\n                        <mat-icon>label</mat-icon>\n                    </button>\n\n                    <mat-menu #labelsMenu=\"matMenu\" [overlapTrigger]=\"false\" class=\"scrumboard-labels-menu\">\n\n                        <scrumboard-label-selector [card]=\"card\"\n                                                   (cardLabelsChanged)=\"updateCard()\"></scrumboard-label-selector>\n\n                    </mat-menu>\n\n                </div>\n                <!-- / LABELS -->\n\n                <!-- MEMBERS -->\n                <div class=\"members\" fxFlex=\"0 1 auto\">\n\n                    <button mat-icon-button class=\"\" [matMenuTriggerFor]=\"membersMenu\">\n                        <mat-icon>account_circle</mat-icon>\n                    </button>\n\n                    <mat-menu #membersMenu=\"matMenu\" [overlapTrigger]=\"false\">\n                        <div fxFlex fxLayout=\"column\" class=\"scrumboard-members-menu\"\n                             (click)=\"$event.stopPropagation()\">\n                            <mat-checkbox class=\"member px-16\" [checked]=\"card.idMembers.indexOf(member.id) > -1\"\n                                          *ngFor=\"let member of board.members\"\n                                          (change)=\"toggleInArray(member.id, card.idMembers);updateCard()\">\n                                <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                                    <img [alt]=\"member.name\" [src]=\" member.avatar\" class=\"avatar\"/>\n                                    <p class=\"member-name\">{{ member.name }}</p>\n                                </div>\n                            </mat-checkbox>\n                        </div>\n                    </mat-menu>\n\n                </div>\n                <!-- / MEMBERS -->\n\n                <!-- ATTACHMENT -->\n                <button mat-icon-button aria-label=\"Attachment\">\n                    <mat-icon>attachment</mat-icon>\n                </button>\n                <!-- / ATTACHMENT -->\n\n                <!-- CHECKLIST -->\n                <div class=\"due-date \" fxFlex=\"0 1 auto\">\n\n                    <button mat-icon-button class=\"\" [matMenuTriggerFor]=\"checklistMenu\"\n                            #checklistMenuTrigger=\"matMenuTrigger\" (menuOpened)=\"onChecklistMenuOpen()\">\n                        <mat-icon>check_box</mat-icon>\n                    </button>\n\n                    <mat-menu #checklistMenu=\"matMenu\" [overlapTrigger]=\"false\">\n\n                        <form class=\"px-16 py-8\" #newChecklistForm=\"ngForm\" (submit)=\"addChecklist(newChecklistForm)\"\n                              (click)=\"$event.stopPropagation()\"\n                              fxLayout=\"column\" fxLayoutAlign=\"start end\">\n\n                            <mat-form-field appearance=\"outline\" (click)=\"$event.stopPropagation()\" fxFlex>\n                                <mat-label>Checklist title</mat-label>\n                                <input #newCheckListTitleField matInput ngModel #checklistTitle=\"ngModel\"\n                                       name=\"checklistTitle\" required>\n                            </mat-form-field>\n\n                            <button mat-raised-button class=\"mat-accent\" aria-label=\"Add Checklist\"\n                                    [disabled]=\"!newChecklistForm.valid\">Add Checklist\n                            </button>\n\n                        </form>\n\n                    </mat-menu>\n\n                </div>\n                <!-- / CHECKLIST -->\n\n                <!-- SUBSCRIBE -->\n                <div class=\"subscribe \" fxFlex=\"0 1 auto\">\n\n                    <button mat-icon-button [matMenuTriggerFor]=\"subscribeMenu\">\n                        <mat-icon *ngIf=\"card.subscribed\">visibility</mat-icon>\n                        <mat-icon *ngIf=\"!card.subscribed\">visibility_off</mat-icon>\n                    </button>\n\n                    <mat-menu #subscribeMenu=\"matMenu\" [overlapTrigger]=\"false\">\n                        <button *ngIf=\"card.subscribed\" mat-menu-item (click)=\"toggleSubscribe()\">\n                            Unsubscribe\n                        </button>\n                        <button *ngIf=\"!card.subscribed\" mat-menu-item (click)=\"toggleSubscribe()\">\n                            Subscribe\n                        </button>\n                    </mat-menu>\n\n                </div>\n                <!-- / SUBSCRIBE -->\n\n                <!-- OPTIONS -->\n                <div class=\"options \" fxFlex=\"0 1 auto\">\n\n                    <button mat-icon-button class=\"\" [matMenuTriggerFor]=\"optionsMenu\">\n                        <mat-icon>more_horiz</mat-icon>\n                    </button>\n\n                    <mat-menu #optionsMenu=\"matMenu\" [overlapTrigger]=\"false\">\n                        <button mat-menu-item (click)=\"removeCard()\">\n                            Remove Card\n                        </button>\n                    </mat-menu>\n\n                </div>\n                <!-- / OPTIONS -->\n\n            </div>\n\n            <!-- CLOSE DIALOG BUTTON -->\n            <button mat-icon-button (click)=\"matDialogRef.close()\" aria-label=\"Close Dialog\">\n                <mat-icon>close</mat-icon>\n            </button>\n            <!-- / CLOSE DIALOG BUTTON -->\n\n        </div>\n\n    </mat-toolbar>\n\n    <div *ngIf=\"card\" mat-dialog-content class=\"py-24 px-0 m-0\" fusePerfectScrollbar>\n\n        <!-- BREADCRUMB -->\n        <div class=\"card-breadcrumb mt-8 mb-32 px-24\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <span>{{board.name}}</span>\n            <mat-icon class=\"s-20\">chevron_right</mat-icon>\n            <span>{{list.name}}</span>\n        </div>\n        <!-- / BREADCRUMB -->\n\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n            <!-- NAME -->\n            <div class=\"card-name px-24\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                <mat-form-field appearance=\"outline\" class=\"w-100-p\">\n                    <mat-label>Title</mat-label>\n                    <input matInput [(ngModel)]=\"card.name\" required (change)=\"updateCard()\">\n                </mat-form-field>\n            </div>\n            <!-- / NAME -->\n\n            <!-- DUE DATE -->\n            <div *ngIf=\"card.due\" class=\"due-date px-24 pl-0\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                <mat-form-field appearance=\"outline\" class=\"w-100-p\">\n                    <mat-label>Due Date</mat-label>\n                    <input matInput [matDatepicker]=\"picker\" [(ngModel)]=\"card.due\">\n                    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                    <mat-datepicker #picker></mat-datepicker>\n                </mat-form-field>\n            </div>\n            <!-- / DUE DATE -->\n\n        </div>\n\n        <!-- DESCRIPTION -->\n        <div class=\"description px-24 mb-16\">\n            <mat-form-field appearance=\"outline\" class=\"w-100-p\">\n                <mat-label>Description</mat-label>\n                <textarea matInput [(ngModel)]=\"card.description\" columns=\"1\"\n                          mat-maxlength=\"150\" max-rows=\"4\" (change)=\"updateCard()\"></textarea>\n            </mat-form-field>\n        </div>\n        <!-- / DESCRIPTION -->\n\n        <!-- SECTIONS -->\n        <div class=\"sections\">\n\n            <!-- LABELS & MEMBERS SECTION -->\n            <div *ngIf=\"card.idLabels[0] || card.idMembers[0]\" class=\"section\"\n                 fxLayout=\"column\" fxLayout.gt-xs=\"row\">\n\n                <div *ngIf=\"card.idLabels[0]\" fxFlex class=\"labels\">\n\n                    <div class=\"section-header\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                        <mat-icon class=\"mr-8\">label</mat-icon>\n                        <span class=\"section-title\">Labels</span>\n                    </div>\n\n                    <div class=\"section-content\">\n                        <mat-chip-list class=\"label-chips\">\n                            <mat-chip class=\"label-chip mb-4\"\n                                      *ngFor=\"let labelId of card.idLabels\"\n                                      [ngClass]=\"board.labels | getById:labelId:'color'\"\n                                      fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                                <span>{{board.labels|getById:labelId:'name'}}</span>\n                            </mat-chip>\n                        </mat-chip-list>\n                    </div>\n\n                </div>\n\n                <div *ngIf=\"card.idMembers[0]\" fxFlex class=\"members\">\n\n                    <div class=\"section-header\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                        <mat-icon class=\"mr-8\">supervisor_account</mat-icon>\n                        <span class=\"section-title\">Members</span>\n                    </div>\n\n                    <div class=\"section-content\">\n                        <div class=\"member-chips\" fxLayout=\"row\" fxLayoutWrap>\n                            <div class=\"member-chip mb-4\" *ngFor=\"let memberId of card.idMembers\"\n                                 fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                                <img class=\"member-chip-avatar\" [src]=\"board.members | getById:memberId:'avatar'\"\n                                     [matTooltip]=\"board.members | getById:memberId:'name'\">\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n            </div>\n            <!-- / LABELS & MEMBERS SECTION -->\n\n            <!-- ATTACHMENTS SECTION -->\n            <div *ngIf=\"card.attachments[0]\" class=\"section\">\n\n                <div class=\"attachments\">\n\n                    <div class=\"section-header\" fxLayout=\"row\" fxLayoutAlign=\"start\">\n                        <mat-icon class=\"mr-8\">attachment</mat-icon>\n                        <span class=\"section-title\">Attachments</span>\n                    </div>\n\n                    <div class=\"section-content\">\n\n                        <div fxLayout=\"column\" fxLayoutAlign=\"start\" fxLayoutWrap fxLayout.gt-sm=\"row\">\n\n                            <div class=\"attachment\" fxFlex=\"33\" *ngFor=\"let item of card.attachments\"\n                                 [ngSwitch]=\"item.type\">\n\n                                <div fxLayout=\"column\" fxLayoutAlign=\"start\" *ngSwitchCase=\"'image'\">\n\n                                    <div class=\"attachment-preview mat-elevation-z1\">\n                                        <img [src]=\"item.src\">\n                                    </div>\n\n                                    <div class=\"attachment-content mt-8\" fxLayout=\"row\"\n                                         fxLayoutAlign=\"start center\">\n\n                                        <div fxFlex>\n\n                                            <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                                                <span class=\"attachment-name\">{{item.name}}</span>\n                                                <mat-icon *ngIf=\"card.idAttachmentCover === item.id\"\n                                                          class=\"yellow-700-fg attachment-is-cover\">\n                                                    star\n                                                </mat-icon>\n                                            </div>\n\n                                            <span class=\"attachment-time\">{{item.time}}</span>\n\n                                        </div>\n\n                                        <button mat-icon-button class=\"attachment-actions-button\"\n                                                [matMenuTriggerFor]=\"attachmentActionsMenu\">\n                                            <mat-icon>more_vert</mat-icon>\n                                        </button>\n\n                                        <mat-menu #attachmentActionsMenu=\"matMenu\">\n                                            <button mat-menu-item (click)=\"toggleCoverImage(item.id)\">\n                                                <span *ngIf=\"card.idAttachmentCover !== item.id\">Make Cover</span>\n                                                <span *ngIf=\"card.idAttachmentCover === item.id\">Remove Cover</span>\n                                            </button>\n                                            <button mat-menu-item (click)=\"removeAttachment(item)\">\n                                                Remove Attachment\n                                            </button>\n                                        </mat-menu>\n\n                                    </div>\n\n                                </div>\n\n                                <div *ngSwitchCase=\"'link'\" fxLayout=\"row\">\n                                    <div class=\"attachment-preview mat-elevation-z2\" fxLayout=\"column\"\n                                         fxLayoutAlign=\"center center\">\n                                        <span>LINK</span>\n                                    </div>\n                                    <div class=\"attachment-content\" fxLayout=\"column\">\n                                        <span class=\"attachment-url\">{{item.url}}</span>\n                                        <span class=\"attachment-time\">{{item.time}}</span>\n                                    </div>\n                                </div>\n\n                            </div>\n\n                        </div>\n\n                        <button mat-stroked-button class=\"add-attachment-button\" aria-label=\"add attachment\">\n                            Add an attachment\n                        </button>\n\n                    </div>\n\n                </div>\n\n            </div>\n            <!-- / ATTACHMENTS SECTION -->\n\n            <!-- CHECKLISTS SECTION -->\n            <div class=\"section\" *ngFor=\"let checklist of card.checklists\">\n\n                <div class=\"checklist\">\n\n                    <div class=\"section-header\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n                        <mat-icon class=\"mr-8\">check_box</mat-icon>\n                        <span fxFlex class=\"section-title\">{{checklist.name}}</span>\n\n                        <div>\n\n                            <button mat-icon-button class=\"checklist-actions-button\"\n                                    [matMenuTriggerFor]=\"checklistActionsMenu\">\n                                <mat-icon class=\"s-20\">more_vert</mat-icon>\n                            </button>\n\n                            <mat-menu #checklistActionsMenu=\"matMenu\">\n                                <button mat-menu-item (click)=\"removeChecklist(checklist)\">\n                                    <mat-icon>delete</mat-icon>\n                                    <span>Remove Checklist</span>\n                                </button>\n                            </mat-menu>\n\n                        </div>\n\n                    </div>\n\n                    <div class=\"section-content\">\n\n                        <div class=\"checklist-progress\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n                            <span class=\"checklist-progress-value\">\n                                {{checklist.checkItemsChecked}} / {{checklist.checkItems.length}}\n                            </span>\n\n                            <mat-progress-bar color=\"accent\" class=\"checklist-progressbar\" mode=\"determinate\"\n                                              value=\"{{100 * checklist.checkItemsChecked / checklist.checkItems.length}}\">\n                            </mat-progress-bar>\n\n                        </div>\n\n                        <div class=\"check-items\">\n\n                            <div class=\"check-item\" *ngFor=\"let checkItem of checklist.checkItems\" fxLayout=\"row\"\n                                 fxLayoutAlign=\"space-between center\">\n\n                                <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n                                    <mat-form-field appearance=\"outline\" fxFlex>\n                                        <input matInput [(ngModel)]=\"checkItem.name\">\n                                        <mat-checkbox matPrefix [(ngModel)]=\"checkItem.checked\"\n                                                      (change)=\"updateCheckedCount(checklist)\"\n                                                      aria-label=\"{{checkItem.name}}\">\n                                        </mat-checkbox>\n                                        <button mat-icon-button matSuffix class=\"checklist-actions-button\"\n                                                (click)=\"removeChecklistItem(checkItem, checklist)\">\n                                            <mat-icon class=\"secondary-text\">delete</mat-icon>\n                                        </button>\n                                    </mat-form-field>\n\n                                </div>\n\n                            </div>\n\n                        </div>\n\n                        <form #newCheckItemForm=\"ngForm\" (submit)=\"addCheckItem(newCheckItemForm,checklist)\"\n                              name=\"newCheckItemForm\" class=\"new-check-item-form\"\n                              fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n                            <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex>\n\n                                <mat-form-field appearance=\"outline\" class=\"no-errors-spacer mr-16\" fxFlex>\n                                    <input matInput ngModel #checkItem=\"ngModel\" name=\"checkItem\" autocomplete=\"off\"\n                                           placeholder=\"New checklist item\">\n                                </mat-form-field>\n\n                            </div>\n\n                            <button mat-mini-fab color=\"accent\"\n                                    [disabled]=\"!newCheckItemForm.valid || newCheckItemForm.pristine\"\n                                    aria-label=\"Add\">\n                                <mat-icon>add</mat-icon>\n                            </button>\n                        </form>\n\n                    </div>\n                </div>\n            </div>\n            <!-- / CHECKLISTS SECTION -->\n\n            <!-- COMMENTS SECTION -->\n            <div class=\"section\">\n\n                <div class=\"comments\">\n\n                    <div class=\"section-header\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                        <mat-icon class=\"mr-8\">comment</mat-icon>\n                        <span class=\"section-title\">Comments</span>\n                    </div>\n\n                    <div class=\"section-content\">\n\n                        <form name=\"cardCommentForm\"\n                              #newCommentForm=\"ngForm\" (submit)=\"addNewComment(newCommentForm)\"\n                              class=\"comment new-comment\" fxLayout=\"column\" fxLayoutAlign=\"start\" no-validate>\n\n                            <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\n\n                                <img class=\"comment-member-avatar\" src=\"assets/images/avatars/profile.jpg\">\n\n                                <mat-form-field class=\"mr-12\" appearance=\"outline\" fxFlex>\n                                    <mat-label>Comment</mat-label>\n                                    <input matInput name=\"newComment\" ngModel #newComment=\"ngModel\" required>\n                                </mat-form-field>\n\n                                <button mat-mini-fab class=\"mat-accent\"\n                                        [disabled]=\"!newCommentForm.valid || newCommentForm.pristine\"\n                                        aria-label=\"Add\">\n                                    <mat-icon>add</mat-icon>\n                                </button>\n\n                            </div>\n\n                        </form>\n\n                        <div class=\"comment\" fxLayout=\"row\" fxLayoutAlign=\"start center\"\n                             *ngFor=\"let comment of card.comments\">\n\n                            <img class=\"comment-member-avatar\"\n                                 [src]=\"board.members | getById: comment.idMember:'avatar'\">\n\n                            <div fxLayout=\"column\">\n                                <div class=\"comment-member-name\">\n                                    {{board.members | getById: comment.idMember:'name'}}\n                                </div>\n                                <div class=\"comment-bubble\">{{comment.message}}</div>\n                                <div class=\"comment-time secondary-text\">{{comment.time}}</div>\n                            </div>\n                        </div>\n\n                    </div>\n\n                </div>\n\n            </div>\n            <!-- / COMMENTS SECTION -->\n\n            <!-- ACTIVITIES SECTION -->\n            <div *ngIf=\"card.activities[0]\" class=\"section\">\n\n                <div class=\"activities\">\n\n                    <div class=\"section-header\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                        <mat-icon class=\"mr-8\">list</mat-icon>\n                        <span class=\"section-title\">Activity</span>\n                    </div>\n\n                    <div class=\"section-content\">\n\n                        <div class=\"activity\" *ngFor=\"let activity of card.activities\" fxLayout=\"row\"\n                             fxLayoutAlign=\"start center\">\n\n                            <img class=\"activity-member-avatar\"\n                                 [src]=\"board.members | getById:activity.idMember:'avatar'\">\n\n                            <div>\n\n                                <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n                                    <div class=\"activity-member-name\">\n                                        {{board.members | getById:activity.idMember:'name'}}\n                                    </div>\n                                    <div class=\"activity-message\">{{activity.message}}</div>\n\n                                </div>\n\n                                <div class=\"activity-time mt-4 secondary-text\">{{activity.time}}</div>\n\n                            </div>\n\n                        </div>\n\n                    </div>\n\n                </div>\n\n            </div>\n            <!-- / ACTIVITIES SECTION -->\n\n        </div>\n        <!-- / SECTIONS -->\n\n    </div>\n\n</div>\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { fuseAnimations } from '@fuse/animations';\n\nimport { ScrumboardService } from 'app/main/apps/scrumboard/scrumboard.service';\nimport { List } from 'app/main/apps/scrumboard/list.model';\n\n@Component({\n    selector     : 'scrumboard-board',\n    templateUrl  : './board.component.html',\n    styleUrls    : ['./board.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    animations   : fuseAnimations\n})\nexport class ScrumboardBoardComponent implements OnInit, OnDestroy\n{\n    board: any;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    constructor(\n        private _activatedRoute: ActivatedRoute,\n        private _location: Location,\n        private _scrumboardService: ScrumboardService\n    )\n    {\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this._scrumboardService.onBoardChanged\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(board => {\n                this.board = board;\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On list add\n     *\n     * @param newListName\n     */\n    onListAdd(newListName): void\n    {\n        if ( newListName === '' )\n        {\n            return;\n        }\n\n        this._scrumboardService.addList(new List({name: newListName}));\n    }\n\n    /**\n     * On board name changed\n     *\n     * @param newName\n     */\n    onBoardNameChanged(newName): void\n    {\n        this._scrumboardService.updateBoard();\n        this._location.go('/apps/scrumboard/boards/' + this.board.id + '/' + this.board.uri);\n    }\n\n    /**\n     * On drop\n     *\n     * @param ev\n     */\n    onDrop(ev): void\n    {\n        this._scrumboardService.updateBoard();\n    }\n}\n","<mat-sidenav-container>\n\n    <div id=\"board\">\n\n        <!-- HEADER -->\n        <div class=\"header p-16 p-md-24\" [ngClass]=\"board.settings.color\" fxLayout=\"column\">\n\n            <div class=\"header-content\" fxLayout=\"row wrap\" fxLayoutAlign=\"space-between\" fxFlex=\"1 0 auto\">\n\n                <!-- BOARD SELECTION BUTTON -->\n                <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxFlexOrder=\"2\" fxFlexOrder.gt-xs=\"1\">\n                    <button mat-raised-button class=\"header-boards-button\"\n                            [ngClass]=\"board.settings.color+'-800'\"\n                            routerLink=\"/apps/scrumboard/boards\"\n                            aria-label=\"boards button\">\n                        <mat-icon class=\"mr-8\">assessment</mat-icon>\n                        <span>BOARDS</span>\n                    </button>\n                </div>\n                <!-- / BOARD SELECTION BUTTON -->\n\n                <!-- BOARD NAME -->\n                <div class=\"header-board-name mb-8 mb-md-0\"\n                     fxLayout=\"row\" fxLayoutAlign=\"center center\"\n                     fxLayout.gt-xs=\"row\" fxLayoutAlign.gt-xs=\"center center\"\n                     fxFlex=\"1 0 100%\" fxFlex.gt-xs=\"1 0 auto\"\n                     fxFlexOrder=\"1\" fxFlexOrder.gt-xs=\"2\">\n                    <mat-icon *ngIf=\"board.settings.subscribed\" class=\"board-subscribe s-16\">remove_red_eye</mat-icon>\n                    <scrumboard-edit-board-name\n                        [board]=\"board\"\n                        (boardNameChanged)=\"onBoardNameChanged($event)\">\n                    </scrumboard-edit-board-name>\n                </div>\n                <!-- / BOARD NAME -->\n\n                <!-- TOOLBAR -->\n                <div class=\"toolbar\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxFlexOrder=\"3\">\n\n                    <!-- BOARD SETTINGS BUTTON -->\n                    <button mat-icon-button (click)=\"settingsSidenav.toggle()\"\n                            aria-label=\"Settings\" matTooltip=\"Settings\">\n                        <mat-icon>settings</mat-icon>\n                    </button>\n                    <!-- / BOARD SETTINGS BUTTON -->\n                </div>\n                <!-- / TOOLBAR -->\n\n            </div>\n\n        </div>\n        <!-- / HEADER -->\n\n        <div fxFlex class=\"board-content-wrapper p-16 p-md-24\">\n\n            <!-- BOARD -->\n            <div class=\"board-content ngx-dnd-container p-16 p-md-24\" fxLayout=\"row\"\n                 ngxDroppable=\"list\" [model]=\"board.lists\" (out)=\"onDrop($event)\"\n                 [@animateStagger]=\"{value:'50'}\">\n\n                <!-- LIST -->\n                <scrumboard-board-list\n                    class=\"scrumboard-board-list list-wrapper ngx-dnd-item\"\n                    ngxDraggable\n                    *ngFor=\"let list of board.lists\"\n                    [model]=\"list\"\n                    [list]=\"list\"\n                    [@animate]=\"{value:'*',params:{duration:'350ms',x:'100%'}}\">\n                </scrumboard-board-list>\n                <!-- / LIST -->\n\n                <!-- NEW LIST BUTTON-->\n                <scrumboard-board-add-list class=\"new-list-wrapper\" (listAdded)=\"onListAdd($event)\"\n                                           ngxDraggable [moves]=\"false\"\n                                           [@animate]=\"{value:'*',params:{duration:'350ms',x:'100%'}}\">\n                </scrumboard-board-add-list>\n                <!-- / NEW LIST BUTTON-->\n\n            </div>\n            <!-- / BOARD -->\n        </div>\n        <!-- primary content -->\n    </div>\n\n    <mat-sidenav #settingsSidenav position=\"end\">\n        <scrumboard-board-settings></scrumboard-board-settings>\n    </mat-sidenav>\n\n</mat-sidenav-container>\n","import { Component, EventEmitter, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n    selector     : 'scrumboard-board-add-list',\n    templateUrl  : './add-list.component.html',\n    styleUrls    : ['./add-list.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ScrumboardBoardAddListComponent\n{\n    formActive: boolean;\n    form: FormGroup;\n\n    @Output()\n    listAdded: EventEmitter<any>;\n\n    @ViewChild('nameInput')\n    nameInputField;\n\n    /**\n     * Constructor\n     *\n     * @param {FormBuilder} _formBuilder\n     */\n    constructor(\n        private _formBuilder: FormBuilder\n    )\n    {\n        // Set the defaults\n        this.formActive = false;\n        this.listAdded = new EventEmitter();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Open form\n     */\n    openForm(): void\n    {\n        this.form = this._formBuilder.group({\n            name: ['']\n        });\n        this.formActive = true;\n        this.focusNameField();\n    }\n\n    /**\n     * Close form\n     */\n    closeForm(): void\n    {\n        this.formActive = false;\n    }\n\n    /**\n     * Focus to the name field\n     */\n    focusNameField(): void\n    {\n        setTimeout(() => {\n            this.nameInputField.nativeElement.focus();\n        });\n    }\n\n    /**\n     * On form submit\n     */\n    onFormSubmit(): void\n    {\n        if ( this.form.valid )\n        {\n            this.listAdded.next(this.form.getRawValue().name);\n            this.formActive = false;\n        }\n    }\n\n}\n","<div class=\"list new-list mat-elevation-z1\">\n\n    <button *ngIf=\"!formActive\" mat-button class=\"new-list-form-button\" (click)=\"openForm()\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <mat-icon class=\"red\">add</mat-icon>\n            <span>Add a list</span>\n        </div>\n    </button>\n\n    <form *ngIf=\"formActive\" class=\"new-list-form\" [formGroup]=\"form\" (submit)=\"onFormSubmit()\"\n          fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex=\"1 0 auto\">\n\n        <input formControlName=\"name\" #nameInput fxFlex placeholder=\"Write a list Name\">\n\n        <button mat-icon-button fxFlex=\"0 1 auto\">\n            <mat-icon>check</mat-icon>\n        </button>\n        <button mat-icon-button fxFlex=\"0 1 auto\" (click)=\"closeForm()\">\n            <mat-icon>close</mat-icon>\n        </button>\n    </form>\n</div>\n\n","import { Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport * as moment from 'moment';\n\n@Component({\n    selector     : 'scrumboard-board-card',\n    templateUrl  : './card.component.html',\n    styleUrls    : ['./card.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ScrumboardBoardCardComponent implements OnInit\n{\n    @Input()\n    cardId;\n\n    card: any;\n    board: any;\n\n    /**\n     * Constructor\n     *\n     * @param {ActivatedRoute} _activatedRoute\n     */\n    constructor(\n        private _activatedRoute: ActivatedRoute\n    )\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this.board = this._activatedRoute.snapshot.data.board;\n        this.card = this.board.cards.filter((card) => {\n            return this.cardId === card.id;\n        })[0];\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Is the card overdue?\n     *\n     * @param cardDate\n     * @returns {boolean}\n     */\n    isOverdue(cardDate): boolean\n    {\n        return moment() > moment(new Date(cardDate));\n    }\n}\n","<!-- CARD COVER -->\n<div *ngIf=\"board.settings.cardCoverImages && card.idAttachmentCover\"\n     class=\"list-card-cover\">\n    <img [src]=\"card.attachments | getById:card.idAttachmentCover:'src'\">\n</div>\n<!-- / CARD COVER -->\n\n<!-- CARD DETAILS -->\n<div class=\"list-card-details\">\n\n    <!-- CARD SORT HANDLE -->\n    <div class=\"list-card-sort-handle\">\n        <mat-icon mat-font-icon=\"icon-cursor-move\" class=\"icon s16\"></mat-icon>\n    </div>\n    <!-- /CARD SORT HANDLE -->\n\n    <!-- CARD LABELS -->\n    <div *ngIf=\"card.idLabels.length > 0\" class=\"list-card-labels\" fxLayout=\"row wrap\">\n\n        <span class=\"list-card-label\"\n              [ngClass]=\"board.labels | getById:labelId:'color'\"\n              *ngFor=\"let labelId of card.idLabels\"\n              [matTooltip]=\"board.labels | getById:labelId:'name'\">\n        </span>\n\n    </div>\n    <!-- / CARD LABELS -->\n\n    <!-- CARD NAME -->\n    <div class=\"list-card-name\">{{card.name}}</div>\n    <!-- / CARD NAME -->\n\n    <div *ngIf=\"card.due || card.checkItems\"\n         class=\"list-card-badges\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n        <!-- CARD DUE -->\n        <span class=\"badge due-date\"\n              [ngClass]=\"{'overdue': isOverdue(card.due)}\"\n              *ngIf=\"card.due\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <mat-icon class=\"s-16\">access_time</mat-icon>\n            <span>{{card.due | date:'mediumDate'}}</span>\n\n        </span>\n        <!-- / CARD DUE -->\n\n        <!-- CARD CHECK ITEMS STATUS -->\n        <span *ngIf=\"card.checkItems\"\n              class=\"badge check-items\"\n              [ngClass]=\"{'completed': card.checkItemsChecked === card.checkItems}\"\n              fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <mat-icon class=\"s-16\">check_circle</mat-icon>\n            <span>{{card.checkItemsChecked}}</span>\n            <span>/</span>\n            <span>{{card.checkItems}}</span>\n        </span>\n        <!-- / CARD CHECK ITEMS STATUS -->\n\n    </div>\n\n    <!-- CARD MEMBERS -->\n    <div *ngIf=\"card.idMembers.length > 0\"\n         class=\"list-card-members\"\n         fxLayout=\"row\">\n\n        <div class=\"list-card-member\"\n             *ngFor=\"let memberId of card.idMembers\">\n\n            <img class=\"list-card-member-avatar\"\n                 [src]=\"board.members | getById:memberId:'avatar'\"\n                 [matTooltip]=\"board.members | getById:memberId:'name'\">\n        </div>\n\n    </div>\n    <!-- / CARD MEMBERS -->\n\n</div>\n<!-- / CARD DETAILS -->\n\n<!-- CARD FOOTER -->\n<div class=\"list-card-footer\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n        <!-- CARD SUBSCRIBE -->\n        <span *ngIf=\"card.subscribed\" class=\"list-card-footer-item\"\n              fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <mat-icon class=\"s-18\">remove_red_eye</mat-icon>\n        </span>\n        <!-- / CARD SUBSCRIBE -->\n\n        <!-- CARD DETAILS -->\n        <span *ngIf=\"card.description !== ''\"\n              class=\"list-card-footer-item\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <mat-icon class=\"s-18\">description</mat-icon>\n        </span>\n        <!-- / CARD DETAILS -->\n\n    </div>\n\n    <div fxLayout=\"row\" fxLayoutAlign=\"end center\">\n\n        <!-- CARD ATTACHMENT -->\n        <span *ngIf=\"card.attachments\"\n              class=\"list-card-footer-item\"\n              fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <mat-icon class=\"s-18\">attachment</mat-icon>\n            <span class=\"value\">{{card.attachments.length}}</span>\n        </span>\n        <!-- / CARD ATTACHMENT -->\n\n        <!-- CARD COMMENTS -->\n        <span *ngIf=\"card.comments\"\n              class=\"list-card-footer-item\"\n              fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <mat-icon class=\"s-18\">comment</mat-icon>\n            <span class=\"value\">{{card.comments.length}}</span>\n        </span>\n        <!-- / CARD COMMENTS -->\n\n    </div>\n</div>\n<!-- CARD FOOTER -->\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { Observable, BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class ScrumboardService implements Resolve<any>\n{\n    boards: any[];\n    routeParams: any;\n    board: any;\n\n    onBoardsChanged: BehaviorSubject<any>;\n    onBoardChanged: BehaviorSubject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {HttpClient} _httpClient\n     */\n    constructor(\n        private _httpClient: HttpClient\n    )\n    {\n        // Set the defaults\n        this.onBoardsChanged = new BehaviorSubject([]);\n        this.onBoardChanged = new BehaviorSubject([]);\n    }\n\n    /**\n     * Resolver\n     *\n     * @param {ActivatedRouteSnapshot} route\n     * @param {RouterStateSnapshot} state\n     * @returns {Observable<any> | Promise<any> | any}\n     */\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any> | Promise<any> | any\n    {\n        this.routeParams = route.params;\n\n        return new Promise((resolve, reject) => {\n            Promise.all([\n                this.getBoards()\n            ]).then(\n                () => {\n                    resolve();\n                },\n                reject\n            );\n        });\n    }\n\n    /**\n     * Get boards\n     *\n     * @returns {Promise<any>}\n     */\n    getBoards(): Promise<any>\n    {\n        return new Promise((resolve, reject) => {\n            this._httpClient.get('api/scrumboard-boards')\n                .subscribe((response: any) => {\n                    this.boards = response;\n                    this.onBoardsChanged.next(this.boards);\n                    resolve(this.boards);\n                }, reject);\n        });\n    }\n\n    /**\n     * Get board\n     *\n     * @param boardId\n     * @returns {Promise<any>}\n     */\n    getBoard(boardId): Promise<any>\n    {\n        return new Promise((resolve, reject) => {\n            this._httpClient.get('api/scrumboard-boards/' + boardId)\n                .subscribe((response: any) => {\n                    this.board = response;\n                    this.onBoardChanged.next(this.board);\n                    resolve(this.board);\n                }, reject);\n        });\n    }\n\n    /**\n     * Add card\n     *\n     * @param listId\n     * @param newCard\n     * @returns {Promise<any>}\n     */\n    addCard(listId, newCard): Promise<any>\n    {\n        this.board.lists.map((list) => {\n            if ( list.id === listId )\n            {\n                return list.idCards.push(newCard.id);\n            }\n        });\n\n        this.board.cards.push(newCard);\n\n        return this.updateBoard();\n    }\n\n    /**\n     * Add list\n     *\n     * @param newList\n     * @returns {Promise<any>}\n     */\n    addList(newList): Promise<any>\n    {\n        this.board.lists.push(newList);\n\n        return this.updateBoard();\n    }\n\n    /**\n     * Remove list\n     *\n     * @param listId\n     * @returns {Promise<any>}\n     */\n    removeList(listId): Promise<any>\n    {\n        const list = this.board.lists.find((_list) => {\n            return _list.id === listId;\n        });\n\n        for ( const cardId of list.idCards )\n        {\n            this.removeCard(cardId);\n        }\n\n        const index = this.board.lists.indexOf(list);\n\n        this.board.lists.splice(index, 1);\n\n        return this.updateBoard();\n    }\n\n    /**\n     * Remove card\n     *\n     * @param cardId\n     * @param listId\n     */\n    removeCard(cardId, listId?): void\n    {\n        const card = this.board.cards.find((_card) => {\n            return _card.id === cardId;\n        });\n\n        if ( listId )\n        {\n            const list = this.board.lists.find((_list) => {\n                return listId === _list.id;\n            });\n            list.idCards.splice(list.idCards.indexOf(cardId), 1);\n        }\n\n        this.board.cards.splice(this.board.cards.indexOf(card), 1);\n\n        this.updateBoard();\n    }\n\n    /**\n     * Update board\n     *\n     * @returns {Promise<any>}\n     */\n    updateBoard(): Promise<any>\n    {\n        return new Promise((resolve, reject) => {\n            this._httpClient.post('api/scrumboard-boards/' + this.board.id, this.board)\n                .subscribe(response => {\n                    this.onBoardChanged.next(this.board);\n                    resolve(this.board);\n                }, reject);\n        });\n    }\n\n    /**\n     * Update card\n     *\n     * @param newCard\n     */\n    updateCard(newCard): void\n    {\n        this.board.cards.map((_card) => {\n            if ( _card.id === newCard.id )\n            {\n                return newCard;\n            }\n        });\n\n        this.updateBoard();\n    }\n\n    /**\n     * Create new board\n     *\n     * @param board\n     * @returns {Promise<any>}\n     */\n    createNewBoard(board): Promise<any>\n    {\n        return new Promise((resolve, reject) => {\n            this._httpClient.post('api/scrumboard-boards/' + board.id, board)\n                .subscribe(response => {\n                    resolve(board);\n                }, reject);\n        });\n    }\n}\n\n@Injectable()\nexport class BoardResolve implements Resolve<any>\n{\n    /**\n     * Constructor\n     *\n     * @param {ScrumboardService} _scrumboardService\n     */\n    constructor(\n        private _scrumboardService: ScrumboardService\n    )\n    {\n    }\n\n    /**\n     * Resolver\n     *\n     * @param {ActivatedRouteSnapshot} route\n     * @returns {Promise<any>}\n     */\n    resolve(route: ActivatedRouteSnapshot): Promise<any>\n    {\n        return this._scrumboardService.getBoard(route.paramMap.get('boardId'));\n    }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { MatColors } from '@fuse/mat-colors';\n\nimport { ScrumboardService } from 'app/main/apps/scrumboard/scrumboard.service';\n\n@Component({\n    selector     : 'scrumboard-board-color-selector',\n    templateUrl  : './board-color-selector.component.html',\n    styleUrls    : ['./board-color-selector.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ScrumboardBoardColorSelectorComponent implements OnInit, OnDestroy\n{\n    colors: any;\n    board: any;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {ScrumboardService} _scrumboardService\n     */\n    constructor(\n        private _scrumboardService: ScrumboardService\n    )\n    {\n        // Set the defaults\n        this.colors = MatColors.all;\n\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this._scrumboardService.onBoardChanged\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(board => {\n                this.board = board;\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Set the color\n     *\n     * @param color\n     */\n    setColor(color): void\n    {\n        this.board.settings.color = color;\n        this._scrumboardService.updateBoard();\n    }\n}\n","<mat-list class=\"colors\">\n    <!-- COLORS -->\n    <mat-list-item class=\"color m-8 mat-elevation-z1\"\n                   [ngClass]=\"color.key\"\n                   *ngFor=\"let color of (colors | keys)\"\n                   (click)=\"setColor(color.key)\"\n                   matRipple>\n        <p fxFlex>{{color.key}}</p>\n        <mat-icon class=\"s-16\" *ngIf=\"color.key === board.settings.color\">check</mat-icon>\n        <button mat-icon-button *ngIf=\"color.key === board.settings.color\" (click)=\"$event.stopPropagation();setColor('')\">\n            <mat-icon class=\"s-16\">delete</mat-icon>\n        </button>\n    </mat-list-item>\n    <!-- / COLORS -->\n</mat-list>\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { fuseAnimations } from '@fuse/animations';\n\nimport { ScrumboardService } from 'app/main/apps/scrumboard/scrumboard.service';\nimport { Board } from 'app/main/apps/scrumboard/board.model';\n\n@Component({\n    selector     : 'scrumboard',\n    templateUrl  : './scrumboard.component.html',\n    styleUrls    : ['./scrumboard.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    animations   : fuseAnimations\n})\nexport class ScrumboardComponent implements OnInit, OnDestroy\n{\n    boards: any[];\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {Router} _router\n     * @param {ScrumboardService} _scrumboardService\n     */\n    constructor(\n        private  _router: Router,\n        private _scrumboardService: ScrumboardService\n    )\n    {\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this._scrumboardService.onBoardsChanged\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(boards => {\n                this.boards = boards;\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * New board\n     */\n    newBoard(): void\n    {\n        const newBoard = new Board({});\n        this._scrumboardService.createNewBoard(newBoard).then(() => {\n            this._router.navigate(['/apps/scrumboard/boards/' + newBoard.id + '/' + newBoard.uri]);\n        });\n    }\n}\n","<!-- BOARDS -->\n<div id=\"boards\" class=\"fuse-navy\" fxLayout=\"column\" fxLayoutAlign=\"start center\" fxFlex fusePerfectScrollbar>\n\n    <div class=\"header pt-44 pt-md-88\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxFlex=\"0 0 auto\"\n         [@animate]=\"{value:'*',params:{delay:'100ms'}}\">\n        <h1>Scrumboard App</h1>\n    </div>\n\n    <!-- BOARD LIST -->\n    <div class=\"board-list\" fxFlex=\"0 0 auto\" fxLayout=\"row wrap\" fxLayoutAlign=\"center center\"\n         [@animateStagger]=\"{value:'50'}\">\n\n        <!-- BOARD -->\n        <div class=\"board-list-item\" *ngFor=\"let board of boards\"\n             [routerLink]=\"'/apps/scrumboard/boards/'+board.id+'/'+board.uri\"\n             fxLayout=\"column\" fxLayoutAlign=\"center center\"\n             [@animate]=\"{value:'*',params:{y:'100%'}}\">\n            <mat-icon class=\"s-56\">assessment</mat-icon>\n            <div class=\"board-name\">{{board.name}}</div>\n        </div>\n        <!-- / BOARD -->\n\n        <!-- NEW BOARD BUTTON -->\n        <div class=\"board-list-item add-new-board\" fxLayout=\"column\" fxLayoutAlign=\"center center\"\n             (click)=\"newBoard()\"\n             [@animate]=\"{value:'*',params:{y:'100%'}}\">\n            <mat-icon class=\"s-56\">add_circle</mat-icon>\n            <div class=\"board-name\">Add new board</div>\n        </div>\n        <!-- / NEW BOARD BUTTON -->\n\n    </div>\n    <!-- / BOARD LIST -->\n</div>\n<!-- / BOARDS -->\n","import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n    selector     : 'scrumboard-edit-board-name',\n    templateUrl  : './edit-board-name.component.html',\n    styleUrls    : ['./edit-board-name.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ScrumboardEditBoardNameComponent\n{\n    formActive: boolean;\n    form: FormGroup;\n\n    @Input()\n    board;\n\n    @Output()\n    boardNameChanged: EventEmitter<any>;\n\n    @ViewChild('nameInput')\n    nameInputField;\n\n    constructor(\n        private formBuilder: FormBuilder\n    )\n    {\n        // Set the defaults\n        this.formActive = false;\n        this.boardNameChanged = new EventEmitter();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Open form\n     */\n    openForm(): void\n    {\n        this.form = this.formBuilder.group({\n            name: [this.board.name]\n        });\n        this.formActive = true;\n        this.focusNameField();\n    }\n\n    /**\n     * Close form\n     */\n    closeForm(): void\n    {\n        this.formActive = false;\n    }\n\n    /**\n     * Focus to the name field\n     */\n    focusNameField(): void\n    {\n        setTimeout(() => {\n            this.nameInputField.nativeElement.focus();\n        });\n    }\n\n    /**\n     * On form submit\n     */\n    onFormSubmit(): void\n    {\n        if ( this.form.valid )\n        {\n            this.board.name = this.form.getRawValue().name;\n            this.board.uri = encodeURIComponent(this.board.name).replace(/%20/g, '-').toLowerCase();\n\n            this.boardNameChanged.next(this.board.name);\n            this.formActive = false;\n        }\n    }\n}\n","<div *ngIf=\"!formActive\" class=\"board-name\" fxFlex=\"1 0 auto\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n    <span>{{board.name}}</span>\n    <button mat-icon-button (click)=\"openForm()\">\n        <mat-icon class=\"s-16\">edit_mode</mat-icon>\n    </button>\n</div>\n\n\n<form [formGroup]=\"form\" (ngSubmit)=\"onFormSubmit()\"\n      class=\"board-name-form\" fxLayout=\"row\" fxFlex=\"1 0 auto\" *ngIf=\"formActive\">\n\n    <input formControlName=\"name\" #nameInput fxFlex=\"1 0 auto\" placeholder=\"Write a board name\">\n\n    <button mat-icon-button fxFlex=\"0 1 auto\">\n        <mat-icon>check</mat-icon>\n    </button>\n    <button mat-icon-button fxFlex=\"0 1 auto\" (click)=\"closeForm()\" type=\"button\">\n        <mat-icon>close</mat-icon>\n    </button>\n</form>\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\n\nimport { fuseAnimations } from '@fuse/animations';\nimport { ScrumboardService } from 'app/main/apps/scrumboard/scrumboard.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector     : 'scrumboard-board-settings',\n    templateUrl  : './settings.component.html',\n    styleUrls    : ['./settings.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    animations   : fuseAnimations\n})\nexport class ScrumboardBoardSettingsSidenavComponent implements OnInit, OnDestroy\n{\n    board: any;\n    view: string;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    constructor(\n        private scrumboardService: ScrumboardService\n    )\n    {\n        // Set the defaults\n        this.view = 'main';\n\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this.scrumboardService.onBoardChanged\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(board => {\n                this.board = board;\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Toggle card cover\n     */\n    toggleCardCover(): void\n    {\n        this.board.settings.cardCoverImages = !this.board.settings.cardCoverImages;\n        this.scrumboardService.updateBoard();\n    }\n\n    /**\n     * Toggle subscription\n     */\n    toggleSubscription(): void\n    {\n        this.board.settings.subscribed = !this.board.settings.subscribed;\n        this.scrumboardService.updateBoard();\n    }\n}\n","<div [ngSwitch]=\"view\" class=\"views\" (click)=\"$event.stopPropagation()\">\n\n    <div class=\"view\" *ngSwitchCase=\"'main'\" [@slideInLeft]>\n\n        <!-- SIDENAV HEADER -->\n        <div class=\"header px-24\" [ngClass]=\"board.settings.color\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n            <div>Settings</div>\n        </div>\n        <!-- / SIDENAV HEADER -->\n\n        <!-- SIDENAV CONTENT -->\n        <div class=\"content py-16\" fusePerfectScrollbar>\n\n            <div class=\"nav material2\">\n                <div class=\"nav-item\">\n                    <div class=\"nav-link\" matRipple (click)=\"view = 'board-color'\">\n                        <mat-icon class=\"nav-link-icon\">format_color_fill</mat-icon>\n                        <p class=\"title\">Board Color</p>\n                    </div>\n                </div>\n\n                <div class=\"nav-item\">\n                    <div class=\"nav-link\" matRipple (click)=\"toggleCardCover()\">\n                        <mat-icon class=\"nav-link-icon\">photo</mat-icon>\n                        <p fxFlex class=\"title\">Card Cover Images</p>\n                        <mat-icon *ngIf=\"board.settings.cardCoverImages\" class=\"s-18\">check</mat-icon>\n                    </div>\n                </div>\n\n                <div class=\"nav-item\">\n                    <div class=\"nav-link\" matRipple (click)=\"toggleSubscription()\">\n                        <mat-icon class=\"nav-link-icon\">remove_red_eye</mat-icon>\n                        <p fxFlex class=\"title\">Subscribe</p>\n                        <mat-icon *ngIf=\"board.settings.subscribed\" class=\"s-18\">check</mat-icon>\n                    </div>\n                </div>\n\n                <div class=\"nav-item\">\n                    <div class=\"nav-link\" matRipple>\n                        <mat-icon class=\"nav-link-icon\">content_copy</mat-icon>\n                        <p class=\"title\">Copy Board</p>\n                    </div>\n                </div>\n\n                <div class=\"nav-item\">\n                    <div class=\"nav-link\" matRipple>\n                        <mat-icon class=\"nav-link-icon\">delete</mat-icon>\n                        <p class=\"title\">Delete Board</p>\n                    </div>\n                </div>\n\n                <mat-divider></mat-divider>\n            </div>\n        </div>\n        <!-- / SIDENAV CONTENT -->\n    </div>\n\n    <div class=\"view\" *ngSwitchCase=\"'board-color'\" [@slideInRight]>\n\n        <!-- SIDENAV HEADER -->\n        <div class=\"header px-24\" [ngClass]=\"board.settings.color\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n            <div>Background Color</div>\n            <button mat-icon-button (click)=\"view ='main'\">\n                <mat-icon class=\"s-16\">arrow_back</mat-icon>\n            </button>\n        </div>\n        <!-- / SIDENAV HEADER -->\n\n        <!-- SIDENAV CONTENT -->\n        <div class=\"content p-8\" fusePerfectScrollbar>\n            <scrumboard-board-color-selector></scrumboard-board-color-selector>\n        </div>\n        <!-- / SIDENAV CONTENT -->\n\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { NgxDnDModule } from '@swimlane/ngx-dnd';\n\nimport { FuseSharedModule } from '@fuse/shared.module';\nimport { FuseConfirmDialogModule, FuseMaterialColorPickerModule } from '@fuse/components';\n\nimport { BoardResolve, ScrumboardService } from 'app/main/apps/scrumboard/scrumboard.service';\nimport { ScrumboardComponent } from 'app/main/apps/scrumboard/scrumboard.component';\nimport { ScrumboardBoardComponent } from 'app/main/apps/scrumboard/board/board.component';\nimport { ScrumboardBoardListComponent } from 'app/main/apps/scrumboard/board/list/list.component';\nimport { ScrumboardBoardCardComponent } from 'app/main/apps/scrumboard/board/list/card/card.component';\nimport { ScrumboardBoardEditListNameComponent } from 'app/main/apps/scrumboard/board/list/edit-list-name/edit-list-name.component';\nimport { ScrumboardBoardAddCardComponent } from 'app/main/apps/scrumboard/board/list/add-card/add-card.component';\nimport { ScrumboardBoardAddListComponent } from 'app/main/apps/scrumboard/board/add-list/add-list.component';\nimport { ScrumboardCardDialogComponent } from 'app/main/apps/scrumboard/board/dialogs/card/card.component';\nimport { ScrumboardLabelSelectorComponent } from 'app/main/apps/scrumboard/board/dialogs/card/label-selector/label-selector.component';\nimport { ScrumboardEditBoardNameComponent } from 'app/main/apps/scrumboard/board/edit-board-name/edit-board-name.component';\nimport { ScrumboardBoardSettingsSidenavComponent } from 'app/main/apps/scrumboard/board/sidenavs/settings/settings.component';\nimport { ScrumboardBoardColorSelectorComponent } from 'app/main/apps/scrumboard/board/sidenavs/settings/board-color-selector/board-color-selector.component';\n\nconst routes: Routes = [\n    {\n        path     : 'boards',\n        component: ScrumboardComponent,\n        resolve  : {\n            scrumboard: ScrumboardService\n        }\n    },\n    {\n        path     : 'boards/:boardId/:boardUri',\n        component: ScrumboardBoardComponent,\n        resolve  : {\n            board: BoardResolve\n        }\n    },\n    {\n        path      : '**',\n        redirectTo: 'boards'\n    }\n];\n\n@NgModule({\n    declarations   : [\n        ScrumboardComponent,\n        ScrumboardBoardComponent,\n        ScrumboardBoardListComponent,\n        ScrumboardBoardCardComponent,\n        ScrumboardBoardEditListNameComponent,\n        ScrumboardBoardAddCardComponent,\n        ScrumboardBoardAddListComponent,\n        ScrumboardCardDialogComponent,\n        ScrumboardLabelSelectorComponent,\n        ScrumboardEditBoardNameComponent,\n        ScrumboardBoardSettingsSidenavComponent,\n        ScrumboardBoardColorSelectorComponent\n    ],\n    imports        : [\n        RouterModule.forChild(routes),\n\n        MatButtonModule,\n        MatCheckboxModule,\n        MatChipsModule,\n        MatDatepickerModule,\n        MatDialogModule,\n        MatFormFieldModule,\n        MatIconModule,\n        MatInputModule,\n        MatListModule,\n        MatMenuModule,\n        MatProgressBarModule,\n        MatRippleModule,\n        MatSidenavModule,\n        MatToolbarModule,\n        MatTooltipModule,\n\n        NgxDnDModule,\n\n        FuseSharedModule,\n        FuseConfirmDialogModule,\n        FuseMaterialColorPickerModule\n    ],\n    providers      : [\n        ScrumboardService,\n        BoardResolve\n    ],\n    entryComponents: [ScrumboardCardDialogComponent]\n})\nexport class ScrumboardModule\n{\n}\n","import { Component, Input, OnDestroy, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { FuseConfirmDialogComponent } from '@fuse/components/confirm-dialog/confirm-dialog.component';\nimport { FusePerfectScrollbarDirective } from '@fuse/directives/fuse-perfect-scrollbar/fuse-perfect-scrollbar.directive';\n\nimport { ScrumboardService } from 'app/main/apps/scrumboard/scrumboard.service';\nimport { Card } from 'app/main/apps/scrumboard/card.model';\nimport { ScrumboardCardDialogComponent } from 'app/main/apps/scrumboard/board/dialogs/card/card.component';\n\n@Component({\n    selector     : 'scrumboard-board-list',\n    templateUrl  : './list.component.html',\n    styleUrls    : ['./list.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ScrumboardBoardListComponent implements OnInit, OnDestroy\n{\n    board: any;\n    dialogRef: any;\n\n    @Input()\n    list;\n\n    @ViewChild(FusePerfectScrollbarDirective)\n    listScroll: FusePerfectScrollbarDirective;\n\n    confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {ActivatedRoute} _activatedRoute\n     * @param {ScrumboardService} _scrumboardService\n     * @param {MatDialog} _matDialog\n     */\n    constructor(\n        private _activatedRoute: ActivatedRoute,\n        private _scrumboardService: ScrumboardService,\n        private _matDialog: MatDialog\n    )\n    {\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this._scrumboardService.onBoardChanged\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(board => {\n                this.board = board;\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On list name changed\n     *\n     * @param newListName\n     */\n    onListNameChanged(newListName): void\n    {\n        this.list.name = newListName;\n    }\n\n    /**\n     * On card added\n     *\n     * @param newCardName\n     */\n    onCardAdd(newCardName): void\n    {\n        if ( newCardName === '' )\n        {\n            return;\n        }\n\n        this._scrumboardService.addCard(this.list.id, new Card({name: newCardName}));\n\n        setTimeout(() => {\n            this.listScroll.scrollToBottom(0, 400);\n        });\n    }\n\n    /**\n     * Remove list\n     *\n     * @param listId\n     */\n    removeList(listId): void\n    {\n        this.confirmDialogRef = this._matDialog.open(FuseConfirmDialogComponent, {\n            disableClose: false\n        });\n\n        this.confirmDialogRef.componentInstance.confirmMessage = 'Are you sure you want to delete the list and it\\'s all cards?';\n\n        this.confirmDialogRef.afterClosed().subscribe(result => {\n            if ( result )\n            {\n                this._scrumboardService.removeList(listId);\n            }\n        });\n    }\n\n    /**\n     * Open card dialog\n     *\n     * @param cardId\n     */\n    openCardDialog(cardId): void\n    {\n        this.dialogRef = this._matDialog.open(ScrumboardCardDialogComponent, {\n            panelClass: 'scrumboard-card-dialog',\n            data      : {\n                cardId: cardId,\n                listId: this.list.id\n            }\n        });\n        this.dialogRef.afterClosed()\n            .subscribe(response => {\n\n            });\n    }\n\n    /**\n     * On drop\n     *\n     * @param ev\n     */\n    onDrop(ev): void\n    {\n        this._scrumboardService.updateBoard();\n    }\n}\n","<div class=\"list mat-elevation-z1\" fxLayout=\"column\">\n\n    <!-- LIST HEADER -->\n    <div class=\"list-header\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n\n        <scrumboard-board-edit-list-name\n            fxFlex=\"1 0 auto\"\n            [list]=\"list\"\n            (listNameChanged)=\"onListNameChanged($event)\">\n        </scrumboard-board-edit-list-name>\n\n        <div fxFlex=\"0 1 auto\">\n            <button mat-icon-button class=\"list-header-option-button\" [matMenuTriggerFor]=\"listMenu\">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #listMenu=\"matMenu\">\n                <button mat-menu-item (click)=\"removeList(list.id)\">Remove List</button>\n            </mat-menu>\n        </div>\n\n    </div>\n    <!-- / LIST HEADER -->\n\n    <!-- LIST CONTENT -->\n    <div class=\"list-content\" fxLayout=\"column\">\n\n        <div class=\"list-cards ngx-dnd-container\"\n             [model]=\"list.idCards\" ngxDroppable=\"card\" (out)=\"onDrop($event)\"\n             fusePerfectScrollbar #listScroll>\n            <scrumboard-board-card ngxDraggable\n                                   (click)=\"openCardDialog(cardId)\"\n                                   class=\"scrumboard-board-card ngx-dnd-item\"\n                                   *ngFor=\"let cardId of list.idCards\"\n                                   [model]=\"cardId\"\n                                   [cardId]=\"cardId\">\n            </scrumboard-board-card>\n        </div>\n    </div>\n    <!-- / LIST CONTENT -->\n\n    <!-- NEW CARD BUTTON-->\n    <div class=\"list-footer\">\n        <scrumboard-board-add-card (cardAdded)=\"onCardAdd($event)\"></scrumboard-board-add-card>\n    </div>\n    <!-- / NEW CARD BUTTON-->\n\n</div>\n","import { FuseUtils } from '@fuse/utils';\n\nexport class List\n{\n    id: string;\n    name: string;\n    idCards: string[];\n\n    /**\n     * Constructor\n     *\n     * @param list\n     */\n    constructor(list)\n    {\n        this.id = list.id || FuseUtils.generateGUID();\n        this.name = list.name || '';\n        this.idCards = [];\n    }\n}\n","import { FuseUtils } from '@fuse/utils';\n\nimport { List } from './list.model';\nimport { Card } from './card.model';\n\nconst sampleLabels = [\n    {\n        id   : '56027e4119ad3a5dc28b36cd',\n        name : 'Design',\n        color: 'red-500'\n    },\n    {\n        id   : '5640635e19ad3a5dc21416b2',\n        name : 'App',\n        color: 'blue-500'\n    },\n    {\n        id   : '6540635g19ad3s5dc31412b2',\n        name : 'Feature',\n        color: 'green-400'\n    }\n];\n\nconst sampleMembers = [\n    {\n        id    : '56027c1930450d8bf7b10758',\n        name  : 'Alice Freeman',\n        avatar: 'assets/images/avatars/alice.jpg'\n    },\n    {\n        id    : '26027s1930450d8bf7b10828',\n        name  : 'Danielle Obrien',\n        avatar: 'assets/images/avatars/danielle.jpg'\n    },\n    {\n        id    : '76027g1930450d8bf7b10958',\n        name  : 'James Lewis',\n        avatar: 'assets/images/avatars/james.jpg'\n    },\n    {\n        id    : '36027j1930450d8bf7b10158',\n        name  : 'Vincent Munoz',\n        avatar: 'assets/images/avatars/vincent.jpg'\n    }\n];\n\nexport class Board\n{\n    name: string;\n    uri: string;\n    id: string;\n    settings: {\n        color: string,\n        subscribed: boolean,\n        cardCoverImages: boolean\n    };\n    lists: List[];\n    cards: Card[];\n    members: {\n        id: string,\n        name: string,\n        avatar: string\n    }[];\n    labels: {\n        id: string,\n        name: string,\n        color: string\n    }[];\n\n    /**\n     * Constructor\n     *\n     * @param board\n     */\n    constructor(board)\n    {\n        this.name = board.name || 'Untitled Board';\n        this.uri = board.uri || 'untitled-board';\n        this.id = board.id || FuseUtils.generateGUID();\n        this.settings = board.settings || {\n            color          : '',\n            subscribed     : true,\n            cardCoverImages: true\n        };\n        this.lists = [];\n        this.cards = [];\n        this.members = board.members || sampleMembers;\n        this.labels = board.labels || sampleLabels;\n    }\n}\n","import { Component, EventEmitter, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n    selector     : 'scrumboard-board-add-card',\n    templateUrl  : './add-card.component.html',\n    styleUrls    : ['./add-card.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ScrumboardBoardAddCardComponent\n{\n    formActive: boolean;\n    form: FormGroup;\n\n    @Output()\n    cardAdded: EventEmitter<any>;\n\n    @ViewChild('nameInput')\n    nameInputField;\n\n    /**\n     * Constructor\n     *\n     * @param {FormBuilder} _formBuilder\n     */\n    constructor(\n        private _formBuilder: FormBuilder\n    )\n    {\n        // Set the defaults\n        this.formActive = false;\n        this.cardAdded = new EventEmitter();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Open the form\n     */\n    openForm(): void\n    {\n        this.form = this._formBuilder.group({\n            name: ''\n        });\n        this.formActive = true;\n        this.focusNameField();\n    }\n\n    /**\n     * Close the form\n     */\n    closeForm(): void\n    {\n        this.formActive = false;\n    }\n\n    /**\n     * Focus to the name field\n     */\n    focusNameField(): void\n    {\n        setTimeout(() => {\n            this.nameInputField.nativeElement.focus();\n        });\n    }\n\n    /**\n     * On form submit\n     */\n    onFormSubmit(): void\n    {\n        if ( this.form.valid )\n        {\n            const cardName = this.form.getRawValue().name;\n            this.cardAdded.next(cardName);\n            this.formActive = false;\n        }\n    }\n}\n\n","<div *ngIf=\"!formActive\" class=\"add-card-button\"\n     (click)=\"openForm()\"\n     fxLayout=\"row\" fxLayoutAlign=\"start center\">\n    <mat-icon class=\"s-20\">add</mat-icon>\n    <div>Add a card</div>\n</div>\n\n<div *ngIf=\"formActive\" class=\"add-card-form-wrapper\">\n\n    <form [formGroup]=\"form\" (submit)=\"onFormSubmit()\" class=\"add-card-form\" fxLayout=\"column\">\n\n        <mat-form-field fxFlex floatLabel=\"never\">\n            <input #nameInput matInput formControlName=\"name\" placeholder=\"Card title\" autocomplete=\"off\" required>\n        </mat-form-field>\n\n        <div class=\"pl-8\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n\n            <button mat-raised-button class=\"add-button mat-accent\" aria-label=\"add\"\n                    [disabled]=\"form.invalid\">\n                <span>Add</span>\n            </button>\n\n            <button mat-icon-button (click)=\"closeForm()\" class=\"cancel-button\" aria-label=\"cancel\">\n                <mat-icon>close</mat-icon>\n            </button>\n        </div>\n    </form>\n</div>\n","import { FuseUtils } from '@fuse/utils';\n\nexport class Card\n{\n    id: string;\n    name: string;\n    description: string;\n    idAttachmentCover: string;\n    idMembers: string[];\n    idLabels: string[];\n    attachments: any[];\n    subscribed: boolean;\n    checklists: any[];\n    checkItems: number;\n    checkItemsChecked: number;\n    comments: any[];\n    activities: any[];\n    due: string;\n\n    /**\n     * Constructor\n     *\n     * @param card\n     */\n    constructor(card)\n    {\n        this.id = card.id || FuseUtils.generateGUID();\n        this.name = card.name || '';\n        this.description = card.description || '';\n        this.idAttachmentCover = card.idAttachmentCover || '';\n        this.idMembers = card.idMembers || [];\n        this.idLabels = card.idLabels || [];\n        this.attachments = card.attachments || [];\n        this.subscribed = card.subscribed || true;\n        this.checklists = card.checklists || [];\n        this.checkItems = card.checkItems || 0;\n        this.checkItemsChecked = card.checkItemsChecked || 0;\n        this.comments = card.comments || [];\n        this.activities = card.activities || [];\n        this.due = card.due || '';\n    }\n}\n","import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n    selector     : 'scrumboard-board-edit-list-name',\n    templateUrl  : './edit-list-name.component.html',\n    styleUrls    : ['./edit-list-name.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ScrumboardBoardEditListNameComponent\n{\n    formActive: boolean;\n    form: FormGroup;\n\n    @Input()\n    list;\n\n    @Output()\n    listNameChanged: EventEmitter<any>;\n\n    @ViewChild('nameInput')\n    nameInputField;\n\n    /**\n     * Constructor\n     *\n     * @param {FormBuilder} _formBuilder\n     */\n    constructor(\n        private _formBuilder: FormBuilder\n    )\n    {\n        // Set the defaults\n        this.formActive = false;\n        this.listNameChanged = new EventEmitter();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Open the form\n     */\n    openForm(): void\n    {\n        this.form = this._formBuilder.group({\n            name: [this.list.name]\n        });\n        this.formActive = true;\n        this.focusNameField();\n    }\n\n    /**\n     * Close the form\n     */\n    closeForm(): void\n    {\n        this.formActive = false;\n    }\n\n    /**\n     * Focus to the name field\n     */\n    focusNameField(): void\n    {\n        setTimeout(() => {\n            this.nameInputField.nativeElement.focus();\n        });\n    }\n\n    /**\n     * On form submit\n     */\n    onFormSubmit(): void\n    {\n        if ( this.form.valid )\n        {\n            this.list.name = this.form.getRawValue().name;\n            this.listNameChanged.next(this.list.name);\n            this.formActive = false;\n        }\n    }\n}\n","<div fxFlex=\"1 0 auto\" *ngIf=\"!formActive\" class=\"list-header-name\" (click)=\"openForm()\">\n    {{list.name}}\n</div>\n\n<form [formGroup]=\"form\" (ngSubmit)=\"onFormSubmit()\"\n      class=\"list-header-name-form\" fxLayout=\"row\" fxFlex=\"1 0 auto\"\n      *ngIf=\"formActive\">\n\n    <input formControlName=\"name\" #nameInput fxFlex placeholder=\"Write a list Name\">\n\n    <button mat-icon-button fxFlex=\"0 1 auto\">\n        <mat-icon>check</mat-icon>\n    </button>\n    <button mat-icon-button fxFlex=\"0 1 auto\" (click)=\"closeForm()\" type=\"button\">\n        <mat-icon>close</mat-icon>\n    </button>\n</form>\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { fuseAnimations } from '@fuse/animations';\nimport { FuseUtils } from '@fuse/utils';\n\nimport { ScrumboardService } from 'app/main/apps/scrumboard/scrumboard.service';\n\n@Component({\n    selector     : 'scrumboard-label-selector',\n    templateUrl  : './label-selector.component.html',\n    styleUrls    : ['./label-selector.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    animations   : fuseAnimations\n})\n\nexport class ScrumboardLabelSelectorComponent implements OnInit, OnDestroy\n{\n    @Input('card')\n    card: any;\n\n    @Output()\n    cardLabelsChanged: EventEmitter<any>;\n\n    board: any;\n    labelsMenuView: string;\n    selectedLabel: any;\n    newLabel: any;\n    toggleInArray: any;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {ScrumboardService} _scrumboardService\n     */\n    constructor(\n        private _scrumboardService: ScrumboardService\n    )\n    {\n        // Set the defaults\n        this.cardLabelsChanged = new EventEmitter();\n        this.labelsMenuView = 'labels';\n        this.newLabel = {\n            id   : '',\n            name : '',\n            color: 'blue-400'\n        };\n        this.toggleInArray = FuseUtils.toggleInArray;\n\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this._scrumboardService.onBoardChanged\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(board => {\n                this.board = board;\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Card labels changed\n     */\n    onCardLabelsChanged(): void\n    {\n        this.cardLabelsChanged.next();\n    }\n\n    /**\n     * On label change\n     */\n    onLabelChange(): void\n    {\n        this._scrumboardService.updateBoard();\n    }\n\n    /**\n     * Add new label\n     */\n    addNewLabel(): void\n    {\n        this.newLabel.id = FuseUtils.generateGUID();\n        this.board.labels.push(Object.assign({}, this.newLabel));\n        this.newLabel.name = '';\n        this.labelsMenuView = 'labels';\n    }\n}\n","<div [ngSwitch]=\"labelsMenuView\" class=\"views\" (click)=\"$event.stopPropagation()\">\n\n    <div class=\"view\" *ngSwitchCase=\"'labels'\" fxFlex fxLayout=\"column\">\n\n        <div class=\"header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n            <div>Labels</div>\n            <button mat-button (click)=\"labelsMenuView ='add'\">\n                <mat-icon class=\"s-16\">add</mat-icon>\n                <span>Add</span>\n            </button>\n        </div>\n\n        <div fxFlex fxLayout=\"column\" fusePerfectScrollbar>\n\n            <div class=\"label\" *ngFor=\"let label of board.labels\" fxFlex=\"0 0 auto\" fxLayout=\"row\"\n                 fxLayoutAlign=\"space-between center\">\n\n                <div class=\"label-color\" [ngClass]=\"label.color\"></div>\n\n                <mat-checkbox fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\"\n                              [checked]=\"card.idLabels.indexOf(label.id) > -1\"\n                              (change)=\"toggleInArray(label.id, card.idLabels);onCardLabelsChanged()\">\n                    {{label.name}}\n                </mat-checkbox>\n\n                <button mat-icon-button>\n                    <mat-icon class=\"s-16\" (click)=\"labelsMenuView ='edit';selectedLabel = label\">mode_edit</mat-icon>\n                </button>\n\n            </div>\n\n        </div>\n\n    </div>\n\n    <div class=\"view edit\" *ngSwitchCase=\"'edit'\" fxFlex fxLayout=\"column\">\n\n        <div class=\"header\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <button mat-icon-button (click)=\"labelsMenuView ='labels'\">\n                <mat-icon class=\"s-16\">arrow_back</mat-icon>\n            </button>\n            <div>Edit Label</div>\n        </div>\n\n        <div class=\"content\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <mat-form-field>\n                <input matInput placeholder=\"Name\" [(ngModel)]=\"selectedLabel.name\" (change)=\"onLabelChange()\">\n            </mat-form-field>\n\n            <fuse-material-color-picker [(ngModel)]=\"selectedLabel.color\" class=\"ml-8\"\n                                        (colorChanged)=\"$event.preventDefault;onLabelChange()\"></fuse-material-color-picker>\n        </div>\n\n    </div>\n\n    <div class=\"view add\" *ngSwitchCase=\"'add'\" fxFlex fxLayout=\"column\">\n\n        <div class=\"header\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <button mat-icon-button (click)=\"labelsMenuView ='labels'\">\n                <mat-icon class=\"s-16\">arrow_back</mat-icon>\n            </button>\n            <div>Add Label</div>\n        </div>\n\n        <form (submit)=\"addNewLabel()\" #newLabelForm=\"ngForm\" fxFlex fxLayout=\"column\" fxLayoutAlign=\"start end\">\n\n            <div fxFlex=\"0 1 auto\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                <mat-form-field fxFlex>\n                    <input matInput placeholder=\"Name\" [(ngModel)]=\"newLabel.name\" name=\"labelName\" required>\n                </mat-form-field>\n\n                <fuse-material-color-picker class=\"ml-8\" [(ngModel)]=\"newLabel.color\"\n                                            name=\"labelColor\"></fuse-material-color-picker>\n            </div>\n\n            <button mat-raised-button class=\"mat-accent mt-16\" [disabled]=\"!newLabelForm.valid\">ADD NEW LABEL</button>\n\n        </form>\n\n    </div>\n\n</div>\n"]}
(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{Q7lZ:function(t,e,a){"use strict";a.r(e),a.d(e,"MailNgrxModule",function(){return ee});var n=a("mrSG"),i=a("fXoL"),s=a("tyNb"),l=a("bTqV"),o=a("bSwM"),r=a("FKr1"),c=a("0IaG"),d=a("kmnG"),m=a("NFeN"),p=a("qFsG"),b=a("STbY"),h=a("d3UM"),g=a("/t3+"),u=a("sYmb"),x=a("5HBU"),f=a("LPQX"),O=a("l7P3"),S=a("LRne"),L=a("cp0P"),v=a("eIep"),y=a("JIr8"),j=a("pLZG"),E=a("IzEk"),A=a("lJxs"),M=a("vkgz");class I{constructor(){this.type="[MAILS] GET MAILS"}}class w{constructor(t){this.payload=t,this.type="[MAILS] GET MAILS SUCCESS"}}class T{constructor(t){this.payload=t,this.type="[MAILS] GET MAILS FAILED"}}class C{constructor(t){this.payload=t,this.type="[MAILS] SET CURRENT MAIL"}}class F{constructor(t){this.payload=t,this.type="[MAILS] SET CURRENT MAIL SUCCESS"}}class R{constructor(){this.type="[MAILS] CHECK CURRENT MAIL"}}class D{constructor(t){this.payload=t,this.type="[MAILS] UPDATE MAIL"}}class _{constructor(t){this.payload=t,this.type="[MAILS] UPDATE MAIL SUCCESS"}}class k{constructor(t){this.payload=t,this.type="[MAILS] UPDATE MAILS"}}class N{constructor(){this.type="[MAILS] UPDATE MAILS SUCCESS"}}class P{constructor(t){this.payload=t,this.type="[MAILS] SET SEARCH TEXT"}}class B{constructor(){this.type="[MAILS] SELECT ALL MAILS"}}class G{constructor(){this.type="[MAILS] DESELECT ALL MAILS"}}class U{constructor(t){this.payload=t,this.type="[MAILS] TOGGLE IN SELECTED MAILS"}}class H{constructor(t){this.payload=t,this.type="[MAILS] SELECT MAILS BY PARAMETER"}}class ${constructor(t){this.payload=t,this.type="[MAILS] SET FOLDER ON SELECTED MAILS"}}class z{constructor(t){this.payload=t,this.type="[MAILS] ADD LABEL ON SELECTED MAILS"}}class K{constructor(t){this.payload=t,this.type="[FOLDERS] GET FOLDERS"}}class J{constructor(t){this.payload=t,this.type="[FOLDERS] GET FOLDERS SUCCESS"}}class X{constructor(t){this.payload=t,this.type="[FOLDERS] GET FOLDERS FAILED"}}class V{constructor(t){this.payload=t,this.type="[FILTERS] GET FILTERS"}}class Y{constructor(t){this.payload=t,this.type="[FILTERS] GET FILTERS SUCCESS"}}class q{constructor(t){this.payload=t,this.type="[FILTERS] GET FILTERS FAILED"}}class Q{constructor(t){this.payload=t,this.type="[LABELS] GET LABELS"}}class Z{constructor(t){this.payload=t,this.type="[LABELS] GET LABELS SUCCESS"}}class W{constructor(t){this.payload=t,this.type="[LABELS] GET LABELS FAILED"}}const tt={entities:{},currentMail:null,selectedMailIds:[],searchText:"",loading:!1,loaded:!1};const et={entities:{},loading:!1,loaded:!1};const at={entities:{},loading:!1,loaded:!1};const nt={entities:{},loading:!1,loaded:!1};const it=Object(O.o)("mail-app"),st=(Object(O.p)(it,t=>t),{mails:function(t=tt,e){switch(e.type){case"[MAILS] GET MAILS":return Object.assign(Object.assign({},t),{loading:!0});case"[MAILS] GET MAILS SUCCESS":{const a=e.payload.mails,n=e.payload.loaded,i=a.reduce((t,e)=>Object.assign(Object.assign({},t),{[e.id]:e}),{});return Object.assign(Object.assign({},t),{entities:i,loading:!1,loaded:n})}case"[MAILS] GET MAILS FAILED":return Object.assign(Object.assign({},t),{loading:!1,loaded:!1});case"[MAILS] SET CURRENT MAIL SUCCESS":return Object.assign(Object.assign({},t),{currentMail:e.payload});case"[MAILS] UPDATE MAIL SUCCESS":return Object.assign(Object.assign({},t),{entities:Object.assign(Object.assign({},t.entities),{[e.payload.id]:e.payload})});case"[MAILS] SET SEARCH TEXT":return Object.assign(Object.assign({},t),{searchText:e.payload});case"[MAILS] TOGGLE IN SELECTED MAILS":{const a=e.payload;let n=[...t.selectedMailIds];return n=void 0!==n.find(t=>t===a)?n.filter(t=>t!==a):[...n,a],Object.assign(Object.assign({},t),{selectedMailIds:n})}case"[MAILS] SELECT ALL MAILS":{const e=Object.keys(t.entities).map(e=>t.entities[e]).map(t=>t.id);return Object.assign(Object.assign({},t),{selectedMailIds:e})}case"[MAILS] DESELECT ALL MAILS":return Object.assign(Object.assign({},t),{selectedMailIds:[]});case"[MAILS] SELECT MAILS BY PARAMETER":{const a=e.payload,n=Object.keys(t.entities).map(e=>t.entities[e]).filter(t=>t[a.parameter]===a.value).map(t=>t.id);return Object.assign(Object.assign({},t),{selectedMailIds:n})}case"[MAILS] SET FOLDER ON SELECTED MAILS":{const a=Object.assign({},t.entities);return t.selectedMailIds.map(t=>{a[t]=Object.assign(Object.assign({},a[t]),{folder:e.payload})}),Object.assign(Object.assign({},t),{entities:a})}default:return t}},folders:function(t=et,e){switch(e.type){case"[FOLDERS] GET FOLDERS":return Object.assign(Object.assign({},t),{loading:!0,loaded:!1});case"[FOLDERS] GET FOLDERS SUCCESS":const a=e.payload.reduce((t,e)=>Object.assign(Object.assign({},t),{[e.id]:e}),{});return Object.assign(Object.assign({},t),{loading:!1,loaded:!0,entities:a});case"[FOLDERS] GET FOLDERS FAILED":return Object.assign(Object.assign({},t),{loading:!1,loaded:!1});default:return t}},filters:function(t=at,e){switch(e.type){case"[FILTERS] GET FILTERS":return Object.assign(Object.assign({},t),{loading:!0,loaded:!1});case"[FILTERS] GET FILTERS SUCCESS":const a=e.payload.reduce((t,e)=>Object.assign(Object.assign({},t),{[e.id]:e}),{});return Object.assign(Object.assign({},t),{loading:!1,loaded:!0,entities:a});case"[FILTERS] GET FILTERS FAILED":return Object.assign(Object.assign({},t),{loading:!1,loaded:!1});default:return t}},labels:function(t=nt,e){switch(e.type){case"[LABELS] GET LABELS":return Object.assign(Object.assign({},t),{loading:!0,loaded:!1});case"[LABELS] GET LABELS SUCCESS":const a=e.payload.reduce((t,e)=>Object.assign(Object.assign({},t),{[e.id]:e}),{});return Object.assign(Object.assign({},t),{loading:!1,loaded:!0,entities:a});case"[LABELS] GET LABELS FAILED":return Object.assign(Object.assign({},t),{loading:!1,loaded:!1});default:return t}}});var lt=a("jD4G");const ot=Object(O.p)(it,t=>t.mails),rt=Object(O.p)(ot,t=>t.entities),ct=Object(O.p)(ot,t=>t.loaded),dt=Object(O.p)(ot,t=>t.searchText),mt=Object(O.p)(rt,dt,(t,e)=>{const a=Object.keys(t).map(e=>t[e]);return lt.a.filterArrayByString(a,e)}),pt=Object(O.p)(ot,t=>t.currentMail),bt=Object(O.p)(ot,t=>t.selectedMailIds),ht=Object(O.p)(it,t=>t.folders),gt=Object(O.p)(ht,t=>t.entities),ut=Object(O.p)(ht,t=>t.loaded),xt=Object(O.p)(gt,t=>Object.keys(t).map(e=>t[e])),ft=Object(O.p)(it,t=>t.filters),Ot=Object(O.p)(ft,t=>t.entities),St=Object(O.p)(ft,t=>t.loaded),Lt=Object(O.p)(Ot,t=>Object.keys(t).map(e=>t[e])),vt=Object(O.p)(it,t=>t.labels),yt=Object(O.p)(vt,t=>t.entities),jt=Object(O.p)(vt,t=>t.loaded),Et=Object(O.p)(yt,t=>Object.keys(t).map(e=>t[e]));var At=a("snw9"),Mt=a("XqQ8"),It=a("zp1y"),wt=a("5+tZ"),Tt=a("Kj3r"),Ct=a("tg95"),Ft=a("tk/3");let Rt=class{constructor(t,e){this._httpClient=t,this._store=e,this._store.pipe(Object(O.r)(xt)).subscribe(t=>{this.foldersArr=t}),this._store.pipe(Object(O.r)(Lt)).subscribe(t=>{this.filtersArr=t}),this._store.pipe(Object(O.r)(Et)).subscribe(t=>{this.labelsArr=t}),this._store.pipe(Object(O.r)(mt)).subscribe(t=>{this.mails=t}),this.selectedMails=[]}getAllMails(){return this._httpClient.get("api/mail-mails")}getFolders(){return this._httpClient.get("api/mail-folders")}getFilters(){return this._httpClient.get("api/mail-filters")}getLabels(){return this._httpClient.get("api/mail-labels")}getMails(t){if("labelHandle"===t.id){const e=this.labelsArr.find(e=>e.handle===t.value).id;return this._httpClient.get("api/mail-mails?labels="+e)}if("filterHandle"===t.id)return this._httpClient.get("api/mail-mails?"+t.value+"=true");{const e=this.foldersArr.find(e=>e.handle===t.value).id;return this._httpClient.get("api/mail-mails?folder="+e)}}updateMail(t){return this._httpClient.post("api/mail-mails/"+t.id,Object.assign({},t))}};Rt.ctorParameters=()=>[{type:Ft.c},{type:O.h}],Rt=Object(n.a)([Object(i.F)()],Rt);let Dt=class{constructor(t,e,a){this.actions=t,this.mailService=e,this.store=a,this.getMails=this.actions.pipe(Object(At.d)("[MAILS] GET MAILS"),Object(Mt.a)(t=>{let e={id:"",value:""};return Object(S.a)("labelHandle","filterHandle","folderHandle").subscribe(t=>{this.routerState.params[t]&&(e={id:t,value:this.routerState.params[t]})}),this.mailService.getMails(e).pipe(Object(A.a)(t=>new w({loaded:e,mails:t})),Object(y.a)(t=>Object(S.a)(new T(t))))})),this.updateMail=this.actions.pipe(Object(At.d)("[MAILS] UPDATE MAIL"),Object(Mt.a)(t=>this.mailService.updateMail(t.payload).pipe(Object(A.a)(()=>new _(t.payload))))),this.updateMails=this.actions.pipe(Object(At.d)("[MAILS] UPDATE MAILS"),Object(Mt.a)(t=>Object(L.a)(t.payload.map(t=>this.mailService.updateMail(t))).pipe(Object(A.a)(()=>new N)))),this.setCurrentMail=this.actions.pipe(Object(At.d)("[MAILS] SET CURRENT MAIL"),Object(It.a)(this.store.pipe(Object(O.r)(ot))),Object(A.a)(([t,e])=>new F(e.entities[t.payload]))),this.checkCurrentMail=this.actions.pipe(Object(At.d)("[MAILS] CHECK CURRENT MAIL"),Object(It.a)(this.store.pipe(Object(O.r)(ot))),Object(A.a)(([t,e])=>(this.routerState.params.mailId&&e.entities[this.routerState.params.mailId],new F(e.entities[this.routerState.params.mailId])))),this.getMailsSuccess=this.actions.pipe(Object(At.d)("[MAILS] GET MAILS SUCCESS"),Object(wt.a)(()=>[new R])),this.updateMailsSuccess=this.actions.pipe(Object(At.d)("[MAILS] UPDATE MAILS SUCCESS"),Object(wt.a)(()=>[new G,new I])),this.updateMailSuccess=this.actions.pipe(Object(At.d)("[MAILS] UPDATE MAIL SUCCESS"),Object(Tt.a)(500),Object(A.a)(()=>new I)),this.setFolderOnSelectedMails=this.actions.pipe(Object(At.d)("[MAILS] SET FOLDER ON SELECTED MAILS"),Object(It.a)(this.store.pipe(Object(O.r)(ot))),Object(A.a)(([t,e])=>{const a=Object.assign({},e.entities);let n=[];return e.selectedMailIds.map(e=>{n=[...n,a[e]=Object.assign(Object.assign({},a[e]),{folder:t.payload})]}),new k(n)})),this.addLabelOnSelectedMails=this.actions.pipe(Object(At.d)("[MAILS] ADD LABEL ON SELECTED MAILS"),Object(It.a)(this.store.pipe(Object(O.r)(ot))),Object(A.a)(([t,e])=>{const a=Object.assign({},e.entities);let n=[];return e.selectedMailIds.map(e=>{let i=[...a[e].labels];a[e].labels.includes(t.payload)||(i=[...i,t.payload]),n=[...n,a[e]=Object.assign(Object.assign({},a[e]),{labels:i})]}),new k(n)})),this.store.pipe(Object(O.r)(Ct.b)).subscribe(t=>{t&&(this.routerState=t.state)})}};Dt.ctorParameters=()=>[{type:At.a},{type:Rt},{type:O.h}],Object(n.a)([Object(At.b)()],Dt.prototype,"getMails",void 0),Object(n.a)([Object(At.b)()],Dt.prototype,"updateMail",void 0),Object(n.a)([Object(At.b)()],Dt.prototype,"updateMails",void 0),Object(n.a)([Object(At.b)()],Dt.prototype,"setCurrentMail",void 0),Object(n.a)([Object(At.b)()],Dt.prototype,"checkCurrentMail",void 0),Object(n.a)([Object(At.b)()],Dt.prototype,"getMailsSuccess",void 0),Object(n.a)([Object(At.b)()],Dt.prototype,"updateMailsSuccess",void 0),Object(n.a)([Object(At.b)()],Dt.prototype,"updateMailSuccess",void 0),Object(n.a)([Object(At.b)()],Dt.prototype,"setFolderOnSelectedMails",void 0),Object(n.a)([Object(At.b)()],Dt.prototype,"addLabelOnSelectedMails",void 0),Dt=Object(n.a)([Object(i.F)()],Dt);let _t=class{constructor(t,e){this.actions=t,this.mailService=e,this.getFolders=this.actions.pipe(Object(At.d)("[FOLDERS] GET FOLDERS"),Object(v.a)(t=>this.mailService.getFolders().pipe(Object(A.a)(t=>new J(t)),Object(y.a)(t=>Object(S.a)(new X(t))))))}};_t.ctorParameters=()=>[{type:At.a},{type:Rt}],Object(n.a)([Object(At.b)()],_t.prototype,"getFolders",void 0),_t=Object(n.a)([Object(i.F)()],_t);let kt=class{constructor(t,e){this.actions=t,this.mailService=e,this.getFilters=this.actions.pipe(Object(At.d)("[FILTERS] GET FILTERS"),Object(v.a)(t=>this.mailService.getFilters().pipe(Object(A.a)(t=>new Y(t)),Object(y.a)(t=>Object(S.a)(new q(t))))))}};kt.ctorParameters=()=>[{type:At.a},{type:Rt}],Object(n.a)([Object(At.b)()],kt.prototype,"getFilters",void 0),kt=Object(n.a)([Object(i.F)()],kt);let Nt=class{constructor(t,e){this.actions=t,this.mailService=e,this.getLabels=this.actions.pipe(Object(At.d)("[LABELS] GET LABELS"),Object(v.a)(t=>this.mailService.getLabels().pipe(Object(A.a)(t=>new Z(t)),Object(y.a)(t=>Object(S.a)(new W(t))))))}};Nt.ctorParameters=()=>[{type:At.a},{type:Rt}],Object(n.a)([Object(At.b)()],Nt.prototype,"getLabels",void 0),Nt=Object(n.a)([Object(i.F)()],Nt);const Pt=[Dt,_t,kt,Nt];let Bt=class{constructor(t){this._store=t,this._store.pipe(Object(O.r)(Ct.b)).subscribe(t=>{t&&(this.routerState=t.state)})}canActivate(t,e){return this.checkStore().pipe(Object(v.a)(()=>Object(S.a)(!0)),Object(y.a)(()=>Object(S.a)(!1)))}checkStore(){return Object(L.a)(this.getFolders(),this.getFilters(),this.getLabels()).pipe(Object(j.a)(([t,e,a])=>!!(t&&e&&a)),Object(E.a)(1),Object(v.a)(()=>this.getMails()),Object(E.a)(1),Object(A.a)(()=>this._store.dispatch(new C(this.routerState.params.mailId))))}getFolders(){return this._store.pipe(Object(O.r)(ut),Object(M.a)(t=>{t||this._store.dispatch(new K([]))}),Object(j.a)(t=>t),Object(E.a)(1))}getFilters(){return this._store.pipe(Object(O.r)(St),Object(M.a)(t=>{t||this._store.dispatch(new V([]))}),Object(j.a)(t=>t),Object(E.a)(1))}getLabels(){return this._store.pipe(Object(O.r)(jt),Object(M.a)(t=>{t||this._store.dispatch(new Q([]))}),Object(j.a)(t=>t),Object(E.a)(1))}getMails(){return this._store.pipe(Object(O.r)(ct),Object(M.a)(t=>{this.routerState.params[t.id]&&this.routerState.params[t.id]===t.value||(this._store.dispatch(new I),this._store.dispatch(new P("")),this._store.dispatch(new G))}),Object(j.a)(t=>this.routerState.params[t.id]&&this.routerState.params[t.id]===t.value),Object(E.a)(1))}};Bt.ctorParameters=()=>[{type:O.h}],Bt=Object(n.a)([Object(i.F)()],Bt);let Gt=class{};Gt=Object(n.a)([Object(i.N)({imports:[O.j.forFeature("mail-app",st),At.c.forFeature(Pt)],providers:[]})],Gt);var Ut=a("3Pt+"),Ht=a("/uUt"),$t=a("HX77"),zt=a("gPJw");const Kt={lang:"en",data:{MAIL:{COMPOSE:"COMPOSE",FOLDERS:"FOLDERS",FILTERS:"FILTERS",LABELS:"LABELS",NO_MESSAGES:"There are no messages!",SELECT_A_MESSAGE_TO_READ:"Select a message to read",SEARCH_PLACEHOLDER:"Search for an e-mail or contact"}}},Jt={lang:"tr",data:{MAIL:{COMPOSE:"YEN\u0130 E-POSTA",FOLDERS:"KLAS\xd6RLER",FILTERS:"F\u0130LTRELER",LABELS:"ET\u0130KETLER",NO_MESSAGES:"Mesajiniz bulunmamakta!",SELECT_A_MESSAGE_TO_READ:"Okumak i\xe7in bir mesaj se\xe7in",SEARCH_PLACEHOLDER:"E-mail yada bir ki\u015fi aray\u0131n"}}};let Xt=class{constructor(t,e,a,n,i){this._changeDetectorRef=t,this._fuseSidebarService=e,this._fuseTranslationLoaderService=a,this._mailNgrxService=n,this._store=i,this.searchInput=new Ut.d(""),this._fuseTranslationLoaderService.loadTranslations(Kt,Jt),this.currentMail$=this._store.pipe(Object(O.r)(pt)),this.mails$=this._store.pipe(Object(O.r)(mt)),this.folders$=this._store.pipe(Object(O.r)(xt)),this.labels$=this._store.pipe(Object(O.r)(Et)),this.selectedMailIds$=this._store.pipe(Object(O.r)(bt)),this.searchText$=this._store.pipe(Object(O.r)(dt)),this.mails=[],this.selectedMailIds=[]}ngOnInit(){this.mails$.subscribe(t=>{this.mails=t}),this.selectedMailIds$.subscribe(t=>{this.selectedMailIds=t,this.hasSelectedMails=t.length>0,this.isIndeterminate=t.length!==this.mails.length&&t.length>0,this.refresh()}),this.searchText$.subscribe(t=>{this.searchInput.setValue(t)}),this.searchInput.valueChanges.pipe(Object(Tt.a)(300),Object(Ht.a)()).subscribe(t=>{this._store.dispatch(new P(t))})}ngOnDestroy(){this._changeDetectorRef.detach()}toggleSelectAll(t){t.preventDefault(),this.selectedMailIds.length&&this.selectedMailIds.length>0?this.deselectAllMails():this.selectAllMails()}selectAllMails(){this._store.dispatch(new B)}deselectAllMails(){this._store.dispatch(new G)}selectMailsByParameter(t,e){this._store.dispatch(new H({parameter:t,value:e}))}toggleLabelOnSelectedMails(t){this._store.dispatch(new z(t))}setFolderOnSelectedMails(t){this._store.dispatch(new $(t))}deselectCurrentMail(){this._store.dispatch(new C(""))}refresh(){this._changeDetectorRef.markForCheck()}toggleSidebar(t){this._fuseSidebarService.getSidebar(t).toggleOpen()}};Xt.ctorParameters=()=>[{type:i.k},{type:$t.a},{type:zt.a},{type:Rt},{type:O.h}],Xt=Object(n.a)([Object(i.n)({selector:"mail-ngrx",template:'<div id="mail" class="page-layout carded left-sidebar inner-scroll">\n\n    \x3c!-- TOP BACKGROUND --\x3e\n    <div class="top-bg accent"></div>\n    \x3c!-- / TOP BACKGROUND --\x3e\n\n    \x3c!-- SIDEBAR --\x3e\n    <fuse-sidebar class="sidebar" name="mail-ngrx-main-sidebar" position="left" lockedOpen="gt-md">\n        <mail-ngrx-main-sidebar></mail-ngrx-main-sidebar>\n    </fuse-sidebar>\n    \x3c!-- / SIDEBAR --\x3e\n\n    \x3c!-- CENTER --\x3e\n    <div class="center">\n\n        \x3c!-- CONTENT HEADER --\x3e\n        <div class="header" fxLayout="row" fxLayoutAlign="start center">\n\n            <div class="search-wrapper" fxFlex fxLayout="row" fxLayoutAlign="start center">\n\n                <button mat-icon-button class="sidebar-toggle" fxHide.gt-md\n                        (click)="toggleSidebar(\'mail-ngrx-main-sidebar\')">\n                    <mat-icon>menu</mat-icon>\n                </button>\n\n                <div class="search" fxLayout="row" fxLayoutAlign="start center">\n                    <mat-icon class="secondary-text">search</mat-icon>\n                    <input [formControl]="searchInput" [placeholder]="\'MAIL.SEARCH_PLACEHOLDER\' | translate" fxFlex>\n                </div>\n            </div>\n        </div>\n        \x3c!-- / CONTENT HEADER --\x3e\n\n        \x3c!-- CONTENT CARD --\x3e\n        <div class="content-card" [ngClass]="{\'current-mail-selected\':currentMail$ | async}">\n\n            \x3c!-- CONTENT TOOLBAR --\x3e\n            <div class="toolbar px-24 py-8">\n\n                <div class="mail-selection" fxFlex="row" fxLayoutAlign="start center">\n\n                    <mat-checkbox (click)="toggleSelectAll($event)"\n                                  [checked]="hasSelectedMails"\n                                  [indeterminate]="isIndeterminate">\n                    </mat-checkbox>\n\n                    <button mat-icon-button [matMenuTriggerFor]="selectMenu">\n                        <mat-icon>arrow_drop_down</mat-icon>\n                    </button>\n                    <mat-menu #selectMenu="matMenu">\n                        <button mat-menu-item (click)="selectAllMails()">All</button>\n                        <button mat-menu-item (click)="deselectAllMails()">None</button>\n                        <button mat-menu-item (click)="selectMailsByParameter(\'read\', true)">Read</button>\n                        <button mat-menu-item (click)="selectMailsByParameter(\'read\', false)">Unread</button>\n                        <button mat-menu-item (click)="selectMailsByParameter(\'starred\', true)">Starred</button>\n                        <button mat-menu-item (click)="selectMailsByParameter(\'starred\', false)">Unstarred</button>\n                        <button mat-menu-item (click)="selectMailsByParameter(\'important\', true)">Important</button>\n                        <button mat-menu-item (click)="selectMailsByParameter(\'important\', false)">Unimportant</button>\n                    </mat-menu>\n\n                    <div class="toolbar-separator" *ngIf="hasSelectedMails"></div>\n\n                    <button mat-icon-button (click)="setFolderOnSelectedMails(4)" *ngIf="hasSelectedMails">\n                        <mat-icon class="secondary-text">delete</mat-icon>\n                    </button>\n\n                    <button mat-icon-button [matMenuTriggerFor]="folderMenu" *ngIf="hasSelectedMails">\n                        <mat-icon class="secondary-text">folder</mat-icon>\n                    </button>\n                    <mat-menu #folderMenu="matMenu">\n                        <button mat-menu-item *ngFor="let folder of folders$ | async"\n                                (click)="setFolderOnSelectedMails(folder.id)">{{folder.title}}\n                        </button>\n                    </mat-menu>\n\n                    <button mat-icon-button [matMenuTriggerFor]="labelMenu" *ngIf="hasSelectedMails">\n                        <mat-icon class="secondary-text">label</mat-icon>\n                    </button>\n                    <mat-menu #labelMenu="matMenu">\n                        <button mat-menu-item *ngFor="let label of labels$ | async"\n                                (click)="toggleLabelOnSelectedMails(label.id)">{{label.title}}\n                        </button>\n                    </mat-menu>\n                </div>\n\n                <div *ngIf="currentMail$ | async" fxHide.gt-xs>\n                    <button mat-icon-button (click)="deselectCurrentMail()">\n                        <mat-icon class="secondary-text">arrow_back</mat-icon>\n                    </button>\n                </div>\n            </div>\n            \x3c!-- / CONTENT TOOLBAR --\x3e\n\n            \x3c!-- CONTENT --\x3e\n            <div class="content" fxLayout="row">\n\n                <mail-ngrx-list fusePerfectScrollbar fxFlex [mails]="mails$ | async" [currentMail]="currentMail$ | async"></mail-ngrx-list>\n                <mail-ngrx-details [currentMail]="currentMail$ | async" fusePerfectScrollbar fxFlex></mail-ngrx-details>\n\n            </div>\n            \x3c!-- / CONTENT --\x3e\n\n        </div>\n        \x3c!-- / CONTENT CARD --\x3e\n\n    </div>\n    \x3c!-- / CENTER --\x3e\n\n</div>\n',changeDetection:i.j.OnPush,encapsulation:i.rb.None,styles:["/* Colors for the ripple elements.*/\n/* stylelint-disable-next-line material/theme-mixin-api */\n/* stylelint-disable-next-line material/theme-mixin-api */\n/* stylelint-disable material/no-prefixes */\n/* stylelint-enable */\nmail-ngrx {\n  width: 100%;\n}\nmail-ngrx .center .header .search-wrapper {\n  border-radius: 28px;\n  overflow: hidden;\n  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n}\nmail-ngrx .center .header .search-wrapper .sidebar-toggle {\n  margin: 0 0 0 6px;\n  width: 56px;\n  height: 56px;\n  border-radius: 0;\n  border-right: 1px solid;\n}\nmail-ngrx .center .header .search-wrapper .search {\n  width: 100%;\n  height: 56px;\n  line-height: 56px;\n  padding: 0 18px;\n}\nmail-ngrx .center .header .search-wrapper .search input {\n  height: 56px;\n  min-height: 56px;\n  max-height: 56px;\n  padding: 0 16px;\n  border: none;\n  outline: none;\n}\nmail-ngrx .center .content-card .toolbar .toolbar-separator {\n  height: 32px;\n  width: 1px;\n  margin: 0 12px;\n}\n@media screen and (max-width: 599px) {\n  mail-ngrx .center .content-card mail-ngrx-list {\n    border-right: none;\n  }\n  mail-ngrx .center .content-card mail-ngrx-list,\nmail-ngrx .center .content-card mail-ngrx-details {\n    flex: 1 0 100%;\n  }\n  mail-ngrx .center .content-card mail-ngrx-details {\n    display: none !important;\n  }\n  mail-ngrx .center .content-card.current-mail-selected .toolbar {\n    padding-left: 16px !important;\n  }\n  mail-ngrx .center .content-card.current-mail-selected .toolbar .mail-selection {\n    display: none !important;\n  }\n  mail-ngrx .center .content-card.current-mail-selected .content mail-ngrx-list {\n    display: none !important;\n  }\n  mail-ngrx .center .content-card.current-mail-selected .content mail-ngrx-details {\n    display: flex !important;\n  }\n}"]})],Xt);let Vt=class{constructor(t,e,a){this._activatedRoute=t,this._mailNgrxService=e,this._router=a}readMail(t){const e=this._activatedRoute.snapshot.params.labelHandle,a=this._activatedRoute.snapshot.params.filterHandle,n=this._activatedRoute.snapshot.params.folderHandle;e?this._router.navigate(["apps/mail-ngrx/label/"+e+"/"+t]):a?this._router.navigate(["apps/mail-ngrx/filter/"+a+"/"+t]):this._router.navigate(["apps/mail-ngrx/"+n+"/"+t])}};Vt.ctorParameters=()=>[{type:s.a},{type:Rt},{type:s.g}],Vt.propDecorators={mails:[{type:i.I}],currentMail:[{type:i.I}]},Vt=Object(n.a)([Object(i.n)({selector:"mail-ngrx-list",template:'<div *ngIf="mails.length === 0" fxLayout="column" fxLayoutAlign="center center" fxFlexFill>\n    <span class="no-messages-text hint-text">{{ \'MAIL.NO_MESSAGES\' | translate }}</span>\n</div>\n\n<div class="mail-list">\n    <mail-ngrx-list-item *ngFor="let mail of mails" [mail]="mail" (click)="readMail(mail.id)"\n                    [ngClass]="{\'current-mail\':mail?.id == currentMail?.id}">\n    </mail-ngrx-list-item>\n</div>\n',changeDetection:i.j.OnPush,encapsulation:i.rb.None,styles:["mail-ngrx-list {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  padding: 0;\n  border-right: 1px solid;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n}\nmail-ngrx-list .no-messages-text {\n  font-size: 24px;\n  font-weight: 300;\n}\nmail-ngrx-list .mail-list {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n}"]})],Vt);class Yt{constructor(t){this.id=t.id,this.from=t.from,this.to=t.to,this.subject=t.subject,this.message=t.message,this.time=t.time,this.read=t.read,this.starred=t.starred,this.important=t.important,this.hasAttachments=t.hasAttachments,this.attachments=t.attachments,this.labels=t.labels,this.folder=t.folder}toggleStar(){this.starred=!this.starred}toggleImportant(){this.important=!this.important}markRead(){this.read=!0}markUnread(){this.read=!1}}let qt=class{constructor(t,e,a){this._changeDetectorRef=t,this._mailNgrxService=e,this._store=a,this.labels$=this._store.pipe(Object(O.r)(Et)),this.selectedMailIds$=this._store.pipe(Object(O.r)(bt)),this.selected=!1}ngOnInit(){this.mail=new Yt(this.mail),this.unread=!this.mail.read,this.selectedMailIds$.subscribe(t=>{this.selected=t.length>0&&void 0!==t.find(t=>t===this.mail.id),this.refresh()})}refresh(){this._changeDetectorRef.markForCheck()}onSelectedChange(){this._store.dispatch(new U(this.mail.id))}};qt.ctorParameters=()=>[{type:i.k},{type:Rt},{type:O.h}],qt.propDecorators={mail:[{type:i.I}],selected:[{type:i.A,args:["class.selected"]}],unread:[{type:i.A,args:["class.unread"]}]},qt=Object(n.a)([Object(i.n)({selector:"mail-ngrx-list-item",template:'<div fxLayout="row" fxLayoutAlign="start center">\n\n    <mat-checkbox [checked]="selected" (change)="onSelectedChange()"\n                  (click)="$event.stopPropagation();">\n    </mat-checkbox>\n\n    <div class="info" fxFlex FlexLayout="column">\n\n        <div class="row-1" fxLayout="row" fxLayoutAlign="start center">\n\n            <div class="name" fxLayout="row" fxLayoutAlign="start center" fxFlex>\n                <img class="avatar" *ngIf="mail.from?.avatar" alt="{{mail.from?.name}}" src="{{mail.from?.avatar}}"/>\n                <div class="avatar accent" *ngIf="!mail.from?.avatar">{{mail.from?.name[0]}}</div>\n                <span class="text-truncate" *ngIf="mail?.from">{{mail.from?.name}}</span>\n                <mat-icon class="s-16 ml-8" *ngIf="mail.hasAttachments">attachment</mat-icon>\n            </div>\n\n            <div fxLayout="row" fxLayoutAlign="start center">\n                <div class="time">{{mail.time}}</div>\n            </div>\n\n        </div>\n\n        <div class="row-2" fxLayout="row" fxLayoutAlign="start center">\n\n            <div fxLayout="column" fxLayoutAlign="start start">\n\n                <div class="subject text-truncate">\n                    {{mail.subject}}\n                </div>\n\n                <div class="message text-truncate" *ngIf="mail?.message">\n                    {{mail.message | htmlToPlaintext | slice:0:180}}{{mail.message.length > 180 ? \'...\' : \'\'}}\n                </div>\n\n                <div class="labels" fxLayout="row wrap" fxHide fxShow.gt-sm>\n                    <div class="label" *ngFor="let labelId of mail.labels"\n                         fxLayout="row" fxLayoutAlign="start center">\n                        <div class="label-color"\n                             [ngStyle]="{\'background-color\': (labels$ | async) | getById:labelId:\'color\'}"></div>\n                        <div class="label-title">{{(labels$ | async) | getById:labelId:\'title\'}}</div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n',changeDetection:i.j.OnPush,encapsulation:i.rb.None,styles:["/* Colors for the ripple elements.*/\n/* stylelint-disable-next-line material/theme-mixin-api */\n/* stylelint-disable-next-line material/theme-mixin-api */\n/* stylelint-disable material/no-prefixes */\n/* stylelint-enable */\nmail-ngrx-list-item {\n  flex-shrink: 0;\n  position: relative;\n  padding: 16px 24px;\n  border-bottom: 1px solid;\n  cursor: pointer;\n}\nmail-ngrx-list-item.unread .info .name {\n  font-weight: 700;\n}\nmail-ngrx-list-item.unread .info .row-2 .subject {\n  font-weight: 700;\n}\nmail-ngrx-list-item .info {\n  overflow: hidden;\n  width: 0;\n  margin-left: 16px;\n  position: relative;\n}\nmail-ngrx-list-item .info .row-1 {\n  margin-bottom: 8px;\n}\nmail-ngrx-list-item .info .row-1 .name {\n  font-size: 15px;\n  font-weight: 600;\n}\nmail-ngrx-list-item .info .row-1 .name .avatar {\n  min-width: 32px;\n  width: 32px;\n  height: 32px;\n  line-height: 32px;\n}\nmail-ngrx-list-item .info .row-1 .actions {\n  margin-left: 4px;\n}\nmail-ngrx-list-item .info .row-1 .actions .mat-icon-button {\n  width: 32px;\n  height: 32px;\n  line-height: 1;\n}\nmail-ngrx-list-item .info .row-2 .subject,\nmail-ngrx-list-item .info .row-2 .message {\n  width: 100%;\n}\nmail-ngrx-list-item .info .row-2 .message {\n  position: relative;\n}\nmail-ngrx-list-item .info .row-2 .labels {\n  margin-top: 8px;\n}\nmail-ngrx-list-item .info .row-2 .labels .label {\n  font-size: 11px;\n  border-radius: 4px;\n  margin: 0 4px 0 0;\n  padding: 3px 8px;\n}\nmail-ngrx-list-item .info .row-2 .labels .label .label-color {\n  width: 8px;\n  height: 8px;\n  margin-right: 8px;\n  border-radius: 50%;\n}"]})],qt);let Qt=class{constructor(t,e){this._mailNgrxService=t,this._store=e,this.labels$=this._store.pipe(Object(O.r)(Et)),this.showDetails=!1}ngOnChanges(){this.updateModel(this.currentMail),this.markAsRead()}markAsRead(){this.mail&&!this.mail.read&&(this.mail.markRead(),this.updateMail())}toggleStar(t){t.stopPropagation(),this.mail.toggleStar(),this.updateMail()}toggleImportant(t){t.stopPropagation(),this.mail.toggleImportant(),this.updateMail()}updateModel(t){this.mail=t?new Yt(Object.assign({},t)):null}updateMail(){this._store.dispatch(new D(this.mail)),this.updateModel(this.mail)}};Qt.ctorParameters=()=>[{type:Rt},{type:O.h}],Qt.propDecorators={currentMail:[{type:i.I}]},Qt=Object(n.a)([Object(i.n)({selector:"mail-ngrx-details",template:'<div *ngIf="!mail" fxLayout="column" fxLayoutAlign="center center" fxFlex>\n    <mat-icon class="s-128 mb-16 select-message-icon hint-text">\n        email\n    </mat-icon>\n    <span class="select-message-text hint-text">\n        <span>{{ \'MAIL.SELECT_A_MESSAGE_TO_READ\' | translate }}</span>\n    </span>\n</div>\n\n<div *ngIf="mail">\n\n    <div class="mail-header" fxLayout="row" fxLayoutAlign="space-between center">\n\n        <div>\n            <div class="subject">{{mail.subject}}</div>\n\n            <div class="labels mt-8" fxLayout="row wrap">\n                <div class="label" *ngFor="let labelId of mail.labels"\n                     fxLayout="row" fxLayoutAlign="start center">\n                    <div class="label-color" [ngStyle]="{\'background-color\': (labels$ | async) | getById:labelId:\'color\'}"></div>\n                    <div class="label-title">{{(labels$ | async) | getById:labelId:\'title\'}}</div>\n                </div>\n            </div>\n        </div>\n\n        <div class="actions" fxLayout="row" fxLayoutAlign="start center">\n            <button mat-icon-button (click)="toggleStar($event)" aria-label="Toggle star">\n                <mat-icon class="amber-fg" *ngIf="mail.starred">star</mat-icon>\n                <mat-icon class="secondary-text" *ngIf="!mail.starred">star_border</mat-icon>\n            </button>\n\n            <button mat-icon-button (click)="toggleImportant($event)" aria-label="Toggle important">\n                <mat-icon class="red-fg" *ngIf="mail.important">label</mat-icon>\n                <mat-icon class="secondary-text" *ngIf="!mail.important">label_outline</mat-icon>\n            </button>\n        </div>\n    </div>\n\n    <div class="mail-content">\n\n        <div class="info" fxLayout="row" fxLayoutAlign="space-between start">\n\n            <div fxFlex fxLayout="column" fxLayoutAlign="start start">\n\n                <div fxLayout="row" fxLayoutAlign="start start">\n\n                    <div>\n                        <img *ngIf="mail.from.avatar" alt="{{mail.from.name}}"\n                             src="{{mail.from.avatar}}" class="avatar"/>\n\n                        <div *ngIf="!mail.from.avatar" class="avatar" ms-random-class="vm.colors">\n                            {{mail.from.name[0]}}\n                        </div>\n                    </div>\n\n                    <div fxLayout="column" fxLayoutAlign="start start">\n\n                        <div class="name">\n                            {{mail.from.name}}\n                        </div>\n\n                        <div class="to" fxLayout="row" fxLayoutAlign="start center">\n                            <div class="to-text">to</div>\n                            <div>{{mail.to[0].name}}</div>\n                        </div>\n                    </div>\n                </div>\n\n                <a class="toggle-details" (click)="showDetails = !showDetails">\n                    <span *ngIf="!showDetails">Show Details</span>\n                    <span *ngIf="showDetails">Hide Details</span>\n                </a>\n\n                <div *ngIf="showDetails" class="details" fxLayout="row" fxLayoutAlign="start start">\n\n                    <div fxLayout="column">\n                        <span class="title">From:</span>\n                        <span class="title">To:</span>\n                        <span class="title">Date:</span>\n                    </div>\n\n                    <div fxLayout="column">\n                        <span class="detail">{{mail.from.email}}</span>\n                        <span class="detail">{{mail.to[0].email}}</span>\n                        <span class="detail">{{mail.time}}</span>\n                    </div>\n                </div>\n            </div>\n\n            <button mat-icon-button [matMenuTriggerFor]="moreMenu" aria-label="More" (click)="$event.stopPropagation()">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n\n            <mat-menu #moreMenu="matMenu">\n                <button mat-menu-item aria-label="Reply">\n                    <mat-icon>reply</mat-icon>\n                    <span>Reply</span>\n                </button>\n\n                <button mat-menu-item aria-label="Forward">\n                    <mat-icon>forward</mat-icon>\n                    <span>Forward</span>\n                </button>\n\n                <button mat-menu-item aria-label="Print">\n                    <mat-icon>print</mat-icon>\n                    <span>Print</span>\n                </button>\n            </mat-menu>\n        </div>\n\n        <div [innerHTML]="mail.message"></div>\n\n    </div>\n\n    <div *ngIf="mail.attachments" class="mail-attachments">\n\n        <div class="title">\n            <span>Attachments</span>\n            ({{mail.attachments.length}})\n        </div>\n\n        <div class="attachment-list" fxLayout="row wrap">\n\n            <div class="attachment" fxLayout="column"\n                 *ngFor="let attachment of mail.attachments">\n\n                <img class="preview" src="{{attachment.preview}}">\n\n                <div fxLayout="column">\n                    <a href="#" onclick="event.preventDefault()">View</a>\n                    <a href="#" onclick="event.preventDefault()">Download</a>\n                    <div class="size">({{attachment.size}})</div>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n',changeDetection:i.j.OnPush,encapsulation:i.rb.None,styles:["/* Colors for the ripple elements.*/\n/* stylelint-disable-next-line material/theme-mixin-api */\n/* stylelint-disable-next-line material/theme-mixin-api */\n/* stylelint-disable material/no-prefixes */\n/* stylelint-enable */\nmail-ngrx-details {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  padding: 24px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n}\nmail-ngrx-details .select-message-text {\n  font-size: 24px;\n  font-weight: 300;\n}\nmail-ngrx-details .mail-header {\n  padding-bottom: 16px;\n  border-bottom: 1px solid;\n}\nmail-ngrx-details .mail-header .actions {\n  min-width: 88px;\n}\nmail-ngrx-details .mail-header .subject {\n  font-size: 17px;\n  font-weight: 600;\n}\nmail-ngrx-details .mail-header .label {\n  font-size: 11px;\n  border-radius: 2px;\n  margin: 4px 4px 4px 0;\n  padding: 3px 8px;\n}\nmail-ngrx-details .mail-header .label .label-color {\n  width: 8px;\n  height: 8px;\n  margin-right: 8px;\n  border-radius: 50%;\n}\nmail-ngrx-details .mail-content {\n  padding: 24px 0;\n}\nmail-ngrx-details .mail-content .to .to-text {\n  margin-right: 4px;\n  text-transform: lowercase;\n}\nmail-ngrx-details .mail-content .info {\n  padding-bottom: 16px;\n}\nmail-ngrx-details .mail-content .info .avatar {\n  margin-right: 16px;\n}\nmail-ngrx-details .mail-content .info .name {\n  margin-right: 8px;\n  font-weight: 600;\n}\nmail-ngrx-details .mail-content .info .toggle-details {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n  text-decoration: underline;\n  padding-top: 16px;\n  cursor: pointer;\n  font-weight: 600;\n}\nmail-ngrx-details .mail-content .info .details {\n  padding-top: 8px;\n}\nmail-ngrx-details .mail-content .info .details .title {\n  font-weight: 600;\n  margin-right: 6px;\n}\nmail-ngrx-details .mail-attachments {\n  padding: 24px 0;\n  border-top: 1px solid;\n}\nmail-ngrx-details .mail-attachments .title {\n  margin-bottom: 16px;\n  font-weight: 600;\n}\nmail-ngrx-details .mail-attachments .attachment .preview {\n  width: 100px;\n  margin: 0 16px 8px 0;\n  border-radius: 4px;\n}\nmail-ngrx-details .mail-attachments .attachment .link {\n  margin-bottom: 2px;\n}\nmail-ngrx-details .mail-attachments .attachment .size {\n  font-size: 11px;\n}"]})],Qt);let Zt=class{constructor(t,e,a){this.matDialogRef=t,this._data=e,this._formBuilder=a,this.composeForm=this.createComposeForm()}createComposeForm(){return this._formBuilder.group({from:{value:["johndoe@creapond.com"],disabled:[!0]},to:[""],cc:[""],bcc:[""],subject:[""],message:[""]})}};Zt.ctorParameters=()=>[{type:c.d},{type:void 0,decorators:[{type:i.D,args:[c.a]}]},{type:Ut.c}],Zt=Object(n.a)([Object(i.n)({selector:"mail-ngrx-compose",template:'<div class="dialog-content-wrapper">\n    <mat-toolbar class="mat-accent m-0">\n        <mat-toolbar-row fxFlex fxLayout="row" fxLayoutAlign="space-between center">\n            <span class="title dialog-title">New Message</span>\n            <button mat-icon-button (click)="matDialogRef.close()" aria-label="Close dialog">\n                <mat-icon>close</mat-icon>\n            </button>\n        </mat-toolbar-row>\n    </mat-toolbar>\n\n    <div mat-dialog-content class="p-24 m-0" fusePerfectScrollbar>\n\n        <form name="composeForm" [formGroup]="composeForm" class="compose-form" fxLayout="column" fxFlex>\n\n            <mat-form-field appearance="outline">\n                <mat-label>From</mat-label>\n                <input matInput name="from"\n                       formControlName="from"\n                       type="email">\n            </mat-form-field>\n\n            <mat-form-field appearance="outline">\n                <mat-label>To</mat-label>\n                <input matInput name="to"\n                       formControlName="to"\n                       type="email" required>\n            </mat-form-field>\n\n            <mat-form-field appearance="outline">\n                <mat-label>Cc</mat-label>\n                <input matInput\n                       name="cc"\n                       formControlName="cc"\n                       type="email">\n            </mat-form-field>\n\n            <mat-form-field appearance="outline">\n                <mat-label>Bcc</mat-label>\n                <input matInput\n                       name="bcc"\n                       formControlName="bcc"\n                       type="email">\n            </mat-form-field>\n\n            <mat-form-field appearance="outline">\n                <mat-label>Subject</mat-label>\n                <input matInput name="subject"\n                       formControlName="subject">\n            </mat-form-field>\n\n            <mat-form-field appearance="outline">\n                <mat-label>Message</mat-label>\n                <textarea matInput name="message"\n                          formControlName="message"\n                          rows="6">\n                </textarea>\n            </mat-form-field>\n\n            <div class="attachment-list">\n\n                <div class="attachment" fxLayout="row" fxLayoutAlign="space-between center">\n                    <div>\n                        <span class="filename">attachment-2.doc</span>\n                        <span class="size ml-4">(12 Kb)</span>\n                    </div>\n\n                    <button mat-icon-button aria-label="Delete attachment">\n                        <mat-icon class="s-16">close</mat-icon>\n                    </button>\n                </div>\n\n                <div class="attachment" fxLayout="row" fxLayoutAlign="space-between center">\n                    <div>\n                        <span class="filename">attachment-1.jpg</span>\n                        <span class="size ml-4">(350 Kb)</span>\n                    </div>\n\n                    <button mat-icon-button aria-label="Delete attachment">\n                        <mat-icon class="s-16">close</mat-icon>\n                    </button>\n                </div>\n            </div>\n        </form>\n    </div>\n\n    <div mat-dialog-actions class="m-0 p-16" fxLayout="row" fxLayoutAlign="space-between center">\n        <div>\n            <button mat-raised-button\n                    color="accent"\n                    (click)="matDialogRef.close([\'send\',composeForm])"\n                    class="save-button"\n                    [disabled]="composeForm.invalid"\n                    aria-label="SAVE">\n                SEND\n            </button>\n\n            <button mat-icon-button matTooltip="Attach a file">\n                <mat-icon>attach_file</mat-icon>\n            </button>\n        </div>\n\n        <button mat-icon-button (click)="matDialogRef.close([\'delete\',composeForm])" aria-label="Delete"\n                matTooltip="Delete">\n            <mat-icon>delete</mat-icon>\n        </button>\n    </div>\n</div>\n',encapsulation:i.rb.None,styles:[".mail-ngrx-compose-dialog .mat-dialog-container {\n  padding: 0;\n  width: 720px;\n}\n.mail-ngrx-compose-dialog .mat-dialog-container .compose-form .mat-form-field {\n  width: 100%;\n}\n.mail-ngrx-compose-dialog .mat-dialog-container .compose-form .attachment-list {\n  font-size: 13px;\n}\n.mail-ngrx-compose-dialog .mat-dialog-container .compose-form .attachment-list .attachment {\n  border: 1px solid;\n  border-radius: 20px;\n  padding-left: 16px;\n  margin-top: 8px;\n}\n.mail-ngrx-compose-dialog .mat-dialog-container .compose-form .attachment-list .attachment .filename {\n  font-weight: 600;\n}\n.mail-ngrx-compose-dialog .mat-dialog-container .compose-form .attachment-list .attachment:last-child {\n  margin-bottom: 0;\n}\n.mail-ngrx-compose-dialog .dialog-content-wrapper {\n  max-height: 85vh;\n  display: flex;\n  flex-direction: column;\n}"]})],Zt);let Wt=class{constructor(t,e,a){this._mailNgrxService=t,this._matDialog=e,this._store=a,this.accounts={creapond:"johndoe@creapond.com",withinpixels:"johndoe@withinpixels.com"},this.selectedAccount="creapond",this.folders$=this._store.pipe(Object(O.r)(xt)),this.filters$=this._store.pipe(Object(O.r)(Lt)),this.labels$=this._store.pipe(Object(O.r)(Et))}composeDialog(){this.dialogRef=this._matDialog.open(Zt,{panelClass:"mail-ngrx-compose-dialog"}),this.dialogRef.afterClosed().subscribe(t=>{if(!t)return;const e=t[0],a=t[1];switch(e){case"send":console.log("new Mail",a.getRawValue());break;case"delete":console.log("delete Mail")}})}};Wt.ctorParameters=()=>[{type:Rt},{type:c.b},{type:O.h}],Wt=Object(n.a)([Object(i.n)({selector:"mail-ngrx-main-sidebar",template:'\x3c!-- SIDEBAR HEADER --\x3e\n<div fxLayout="column" fxLayoutAlign="space-between start"\n     class="header accent p-24 pb-4">\n\n    <div class="logo" fxFlex fxLayout="row" fxLayoutAlign="start center">\n        <mat-icon class="logo-icon s-32">mail</mat-icon>\n        <span class="logo-text">MailboxNgrx</span>\n    </div>\n\n    <div class="account" fxLayout="column">\n        <div class="title">John Doe</div>\n        <mat-form-field floatLabel="never">\n            <mat-select class="account-selection" placeholder="Mail Selection"\n                        [ngModel]="selectedAccount">\n                <mat-option *ngFor="let account of (accounts | keys)" [value]="account.key">\n                    {{account.value}}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    </div>\n\n</div>\n\x3c!-- / SIDEBAR HEADER --\x3e\n\n\x3c!-- SIDEBAR CONTENT --\x3e\n<div class="content" fusePerfectScrollbar>\n\n    <div class="px-24 pt-32 pb-12">\n        <button mat-raised-button\n                class="mat-accent compose-dialog-button w-100-p"\n                (click)="composeDialog()"\n                aria-label="Compose">\n            {{ \'MAIL.COMPOSE\' | translate }}\n        </button>\n    </div>\n\n    <div class="nav material2">\n\n        <div class="nav-subheader">{{ \'MAIL.FOLDERS\' | translate }}</div>\n\n        <div class="nav-item" *ngFor="let folder of (folders$ | async)">\n            <a class="nav-link" matRipple [routerLink]="\'/apps/mail-ngrx/\' + folder.handle"\n               [routerLinkActive]="[\'active\', \'accent\']">\n                <mat-icon class="nav-link-icon" *ngIf="folder.icon">{{folder.icon}}</mat-icon>\n                <span>{{folder.title}}</span>\n            </a>\n        </div>\n\n        <div class="nav-subheader">{{ \'MAIL.FILTERS\' | translate }}</div>\n\n        <div class="nav-item" *ngFor="let filter of (filters$ | async)">\n            <a class="nav-link" matRipple [routerLink]="\'/apps/mail-ngrx/filter/\' + filter.handle"\n               [routerLinkActive]="[\'active\', \'accent\']">\n                <mat-icon class="nav-link-icon" [ngClass]="filter.color" *ngIf="filter.icon">{{filter.icon}}</mat-icon>\n                <span>{{filter.title}}</span>\n            </a>\n        </div>\n\n        <div class="nav-subheader">{{ \'MAIL.LABELS\' | translate }}</div>\n\n        <div class="nav-item" *ngFor="let label of (labels$ | async)">\n            <a class="nav-link" matRipple [routerLink]="\'/apps/mail-ngrx/label/\' + label.handle"\n               [routerLinkActive]="[\'active\', \'accent\']">\n                <mat-icon class="nav-link-icon" [ngStyle]="{\'color\':label.color}">label</mat-icon>\n                <span>{{label.title}}</span>\n            </a>\n        </div>\n\n    </div>\n\n</div>\n\x3c!-- / SIDEBAR CONTENT --\x3e\n',changeDetection:i.j.OnPush,encapsulation:i.rb.None,styles:["mail-ngrx-main-sidebar {\n  display: flex;\n  flex: 1 0 auto;\n  flex-direction: column;\n  height: 100%;\n}\nmail-ngrx-main-sidebar .header .logo .logo-icon {\n  margin: 0 16px 0 0;\n}\nmail-ngrx-main-sidebar .header .logo .logo-text {\n  font-size: 24px;\n  line-height: 24px;\n}\nmail-ngrx-main-sidebar .header .account {\n  width: 100%;\n}"]})],Wt);const te=[{path:"label/:labelHandle",component:Xt,canActivate:[Bt]},{path:"label/:labelHandle/:mailId",component:Xt,canActivate:[Bt]},{path:"filter/:filterHandle",component:Xt,canActivate:[Bt]},{path:"filter/:filterHandle/:mailId",component:Xt,canActivate:[Bt]},{path:":folderHandle",component:Xt,canActivate:[Bt]},{path:":folderHandle/:mailId",component:Xt,canActivate:[Bt]},{path:"**",redirectTo:"inbox"}];let ee=class{};ee=Object(n.a)([Object(i.N)({declarations:[Xt,Vt,qt,Qt,Wt,Zt],imports:[s.h.forChild(te),l.b,o.a,c.c,d.d,m.b,p.b,b.a,r.p,h.a,g.a,u.a,x.a,f.h,Gt],providers:[Rt,Bt],entryComponents:[Zt]})],ee)}}]);
{"version":3,"sources":["./src/app/main/apps/mail-ngrx/store/selectors/index.ts","./src/app/main/apps/mail-ngrx/store/reducers/filters.reducer.ts","./src/app/main/apps/mail-ngrx/store/selectors/mails.selectors.ts","./src/app/main/apps/mail-ngrx/store/effects/mails.effects.ts","./src/app/main/apps/mail-ngrx/store/reducers/labels.reducer.ts","./src/app/main/apps/mail-ngrx/store/effects/filters.effects.ts","./src/app/main/apps/mail-ngrx/store/actions/labels.actions.ts","./src/app/main/apps/mail-ngrx/store/selectors/labels.selectors.ts","./src/app/main/apps/mail-ngrx/i18n/en.ts","./src/app/main/apps/mail-ngrx/store/store.module.ts","./src/app/main/apps/mail-ngrx/dialogs/compose/compose.component.ts","./src/app/main/apps/mail-ngrx/dialogs/compose/compose.component.html","./src/app/main/apps/mail-ngrx/mail-details/mail-details.component.ts","./src/app/main/apps/mail-ngrx/mail-details/mail-details.component.html","./src/app/main/apps/mail-ngrx/store/actions/filters.actions.ts","./src/app/main/apps/mail-ngrx/mail.service.ts","./src/app/main/apps/mail-ngrx/store/effects/labels.effects.ts","./src/app/main/apps/mail-ngrx/store/effects/folders.effects.ts","./src/app/main/apps/mail-ngrx/mail.module.ts","./src/app/main/apps/mail-ngrx/store/selectors/filters.selectors.ts","./src/app/main/apps/mail-ngrx/store/reducers/index.ts","./src/app/main/apps/mail-ngrx/sidebars/main/main-sidebar.component.ts","./src/app/main/apps/mail-ngrx/sidebars/main/main-sidebar.component.html","./src/app/main/apps/mail-ngrx/store/selectors/folders.selectors.ts","./src/app/main/apps/mail-ngrx/store/actions/index.ts","./src/app/main/apps/mail-ngrx/store/guards/resolve.guard.ts","./src/app/main/apps/mail-ngrx/mail.component.ts","./src/app/main/apps/mail-ngrx/mail.component.html","./src/app/main/apps/mail-ngrx/store/guards/index.ts","./src/app/main/apps/mail-ngrx/store/reducers/folders.reducer.ts","./src/app/main/apps/mail-ngrx/store/index.ts","./src/app/main/apps/mail-ngrx/store/actions/mails.actions.ts","./src/app/main/apps/mail-ngrx/i18n/tr.ts","./src/app/main/apps/mail-ngrx/mail.model.ts","./src/app/main/apps/mail-ngrx/mail-list/mail-list.component.html","./src/app/main/apps/mail-ngrx/mail-list/mail-list.component.ts","./src/app/main/apps/mail-ngrx/store/reducers/mails.reducer.ts","./src/app/main/apps/mail-ngrx/mail-list/mail-list-item/mail-list-item.component.ts","./src/app/main/apps/mail-ngrx/mail-list/mail-list-item/mail-list-item.component.html","./src/app/main/apps/mail-ngrx/store/actions/folders.actions.ts","./src/app/main/apps/mail-ngrx/store/effects/index.ts"],"names":[],"mappings":"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","file":"mail-ngrx-mail-module-es2015.js","sourcesContent":["export * from './mails.selectors';\nexport * from './folders.selectors';\nexport * from './filters.selectors';\nexport * from './labels.selectors';\n","import * as FiltersActions from 'app/main/apps/mail-ngrx/store/actions/filters.actions';\n\nexport interface FiltersState\n{\n    entities?: { [id: number]: any };\n    loading: boolean;\n    loaded: boolean;\n}\n\nexport const FiltersInitialState: FiltersState = {\n    entities: {},\n    loading : false,\n    loaded  : false\n};\n\nexport function FiltersReducer(state = FiltersInitialState, action: FiltersActions.FiltersActionsAll): FiltersState\n{\n    switch ( action.type )\n    {\n        case FiltersActions.GET_FILTERS:\n            return {\n                ...state,\n                loading: true,\n                loaded : false\n            };\n        case FiltersActions.GET_FILTERS_SUCCESS:\n\n            const filters = action.payload;\n            const entities = filters.reduce(\n                (_entities: { [id: number]: any }, filter: any) => {\n                    return {\n                        ..._entities,\n                        [filter.id]: filter\n                    };\n                }, {});\n\n            return {\n                ...state,\n                loading: false,\n                loaded : true,\n                entities\n            };\n\n        case FiltersActions.GET_FILTERS_FAILED:\n            return {\n                ...state,\n                loading: false,\n                loaded : false\n            };\n        default:\n            return state;\n    }\n}\n","import { FuseUtils } from '@fuse/utils';\n\nimport { createSelector } from '@ngrx/store';\nimport { getMailAppState, MailAppState, MailsState } from 'app/main/apps/mail-ngrx/store/reducers';\n\nexport const getMailsState = createSelector(\n    getMailAppState,\n    (state: MailAppState) => state.mails\n);\n\nexport const getMails = createSelector(\n    getMailsState,\n    (state: MailsState) => state.entities\n);\n\nexport const getMailsLoaded = createSelector(\n    getMailsState,\n    (state: MailsState) => state.loaded\n);\n\nexport const getSearchText = createSelector(\n    getMailsState,\n    (state: MailsState) => state.searchText\n);\n\nexport const getMailsArr = createSelector(\n    getMails,\n    getSearchText,\n    (entities, searchText) => {\n        const arr = Object.keys(entities).map((id) => entities[id]);\n        return FuseUtils.filterArrayByString(arr, searchText);\n    }\n);\n\nexport const getCurrentMail = createSelector(\n    getMailsState,\n    (state: MailsState) => state.currentMail\n);\n\nexport const getSelectedMailIds = createSelector(\n    getMailsState,\n    (state: MailsState) => state.selectedMailIds\n);\n","import { Injectable } from '@angular/core';\nimport { Action, select, Store } from '@ngrx/store';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of, forkJoin } from 'rxjs';\nimport { catchError, debounceTime, map, mergeMap, exhaustMap, withLatestFrom } from 'rxjs/operators';\n\nimport { getRouterState, State } from 'app/store/reducers';\nimport { getMailsState } from 'app/main/apps/mail-ngrx/store/selectors';\nimport * as MailsActions from 'app/main/apps/mail-ngrx/store/actions/mails.actions';\nimport * as fromRoot from 'app/store';\n\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\n@Injectable()\nexport class MailsEffect\n{\n    routerState: any;\n\n    constructor(\n        private actions: Actions,\n        private mailService: MailNgrxService,\n        private store: Store<State>\n    )\n    {\n        this.store\n            .pipe(select(getRouterState))\n            .subscribe(routerState => {\n                if ( routerState )\n                {\n                    this.routerState = routerState.state;\n                }\n            });\n    }\n\n    /**\n     * Get Mails with router parameters\n     * @type {Observable<any>}\n     */\n    @Effect()\n    getMails: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.GetMails>(MailsActions.GET_MAILS),\n                exhaustMap((action) => {\n\n                    let handle = {\n                        id   : '',\n                        value: ''\n                    };\n\n                    const routeParams = of('labelHandle', 'filterHandle', 'folderHandle');\n                    routeParams.subscribe(param => {\n                        if ( this.routerState.params[param] )\n                        {\n                            handle = {\n                                id   : param,\n                                value: this.routerState.params[param]\n                            };\n                        }\n                    });\n\n                    return this.mailService.getMails(handle)\n                               .pipe(\n                                   map((mails: Mail[]) => {\n\n                                       return new MailsActions.GetMailsSuccess({\n                                           loaded: handle,\n                                           mails : mails\n                                       });\n                                   }),\n                                   catchError(err => of(new MailsActions.GetMailsFailed(err)))\n                               );\n                })\n            );\n\n    /**\n     * Update Mail\n     * @type {Observable<any>}\n     */\n    @Effect()\n    updateMail: Observable<{}> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.UpdateMail>(MailsActions.UPDATE_MAIL),\n                exhaustMap((action) => {\n                    return this.mailService.updateMail(action.payload).pipe(\n                        map(() => {\n                            return new MailsActions.UpdateMailSuccess(action.payload);\n                        })\n                    );\n                })\n            );\n\n    /**\n     * UpdateMails\n     * @type {Observable<any>}\n     */\n    @Effect()\n    updateMails: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.UpdateMails>(MailsActions.UPDATE_MAILS),\n                exhaustMap((action) => {\n                    return forkJoin(action.payload.map(mail => this.mailService.updateMail(mail))).pipe(map(() => {\n                        return new MailsActions.UpdateMailsSuccess();\n                    }));\n                })\n            );\n\n    /**\n     * Set Current Mail\n     * @type {Observable<SetCurrentMailSuccess>}\n     */\n    @Effect()\n    setCurrentMail: Observable<Action> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.SetCurrentMail>(MailsActions.SET_CURRENT_MAIL),\n                withLatestFrom(this.store.pipe(select(getMailsState))),\n                map(([action, state]) => {\n                    return new MailsActions.SetCurrentMailSuccess(state.entities[action.payload]);\n                })\n            );\n\n    /**\n     * Check Current Mail\n     * Navigate to parent directory if not exist in mail list\n     * Update Current Mail if exist in mail list\n     * @type {Observable<any>}\n     */\n    @Effect()\n    checkCurrentMail: Observable<Action> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.CheckCurrentMail>(MailsActions.CHECK_CURRENT_MAIL),\n                withLatestFrom(this.store.pipe(select(getMailsState))),\n                map(([action, state]) => {\n\n                    if ( this.routerState.params.mailId && !state.entities[this.routerState.params.mailId] )\n                    {\n                        // return new fromRoot.Go({path: [this.routerState.url.replace(this.routerState.params.mailId, '')]});\n                    }\n\n                    return new MailsActions.SetCurrentMailSuccess(state.entities[this.routerState.params.mailId]);\n                })\n            );\n\n    /**\n     * On Get Mails Success\n     * @type {Observable<CheckCurrentMail>}\n     */\n    @Effect()\n    getMailsSuccess: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.GetMailsSuccess>(MailsActions.GET_MAILS_SUCCESS),\n                mergeMap(() =>\n                    [\n                        new MailsActions.CheckCurrentMail()\n                    ])\n            );\n    /**\n     * On Update Mails Success\n     * @type {Observable<DeselectAllMails | GetMails>}\n     */\n    @Effect()\n    updateMailsSuccess: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.UpdateMailsSuccess>(MailsActions.UPDATE_MAILS_SUCCESS),\n                mergeMap(() =>\n                    [\n                        new MailsActions.DeselectAllMails(),\n                        new MailsActions.GetMails()\n                    ])\n            );\n    /**\n     * On Update Mail Success\n     * @type {Observable<GetMails>}\n     */\n    @Effect()\n    updateMailSuccess: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.UpdateMailSuccess>(MailsActions.UPDATE_MAIL_SUCCESS),\n                debounceTime(500),\n                map(() => {\n                    return new MailsActions.GetMails();\n                })\n            );\n\n    /**\n     * Set Folder on Selected Mails\n     * @type {Observable<UpdateMails>}\n     */\n    @Effect()\n    setFolderOnSelectedMails: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.SetFolderOnSelectedMails>(MailsActions.SET_FOLDER_ON_SELECTED_MAILS),\n                withLatestFrom(\n                    this.store.pipe(select(getMailsState))),\n                map(([action, state]) => {\n                    const entities = {...state.entities};\n                    let mailsToUpdate = [];\n                    state.selectedMailIds\n                         .map(id => {\n                             mailsToUpdate = [\n                                 ...mailsToUpdate,\n                                 entities[id] = {\n                                     ...entities[id],\n                                     folder: action.payload\n                                 }\n                             ];\n                         });\n                    return new MailsActions.UpdateMails(mailsToUpdate);\n                })\n            );\n\n    /**\n     * Add Label on Selected Mails\n     * @type {Observable<UpdateMails>}\n     */\n    @Effect()\n    addLabelOnSelectedMails: Observable<MailsActions.MailsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<MailsActions.AddLabelOnSelectedMails>(MailsActions.ADD_LABEL_ON_SELECTED_MAILS),\n                withLatestFrom(this.store.pipe(select(getMailsState))),\n                map(([action, state]) => {\n\n                    const entities = {...state.entities};\n                    let mailsToUpdate = [];\n\n                    state.selectedMailIds\n                         .map(id => {\n\n                             let labels = [...entities[id].labels];\n\n                             if ( !entities[id].labels.includes(action.payload) )\n                             {\n                                 labels = [...labels, action.payload];\n                             }\n\n                             mailsToUpdate = [\n                                 ...mailsToUpdate,\n                                 entities[id] = {\n                                     ...entities[id],\n                                     labels\n                                 }\n                             ];\n                         });\n\n                    return new MailsActions.UpdateMails(mailsToUpdate);\n                })\n            );\n}\n","import * as LabelsActions from 'app/main/apps/mail-ngrx/store/actions/labels.actions';\n\nexport interface LabelsState\n{\n    entities?: { [id: number]: any };\n    loading: boolean;\n    loaded: boolean;\n}\n\nexport const LabelsInitialState: LabelsState = {\n    entities: {},\n    loading : false,\n    loaded  : false\n};\n\nexport function LabelsReducer(state = LabelsInitialState, action: LabelsActions.LabelsActionsAll): LabelsState\n{\n    switch ( action.type )\n    {\n        case LabelsActions.GET_LABELS:\n            return {\n                ...state,\n                loading: true,\n                loaded : false\n            };\n        case LabelsActions.GET_LABELS_SUCCESS:\n\n            const labels = action.payload;\n            const entities = labels.reduce(\n                (_entities: { [id: number]: any }, label: any) => {\n                    return {\n                        ..._entities,\n                        [label.id]: label\n                    };\n                }, {});\n\n            return {\n                ...state,\n                loading: false,\n                loaded : true,\n                entities\n            };\n\n        case LabelsActions.GET_LABELS_FAILED:\n            return {\n                ...state,\n                loading: false,\n                loaded : false\n            };\n        default:\n            return state;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nimport * as FiltersActions from 'app/main/apps/mail-ngrx/store/actions/filters.actions';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\n@Injectable()\nexport class FiltersEffect\n{\n    constructor(\n        private actions: Actions,\n        private mailService: MailNgrxService\n    )\n    {\n    }\n\n    /**\n     * Get filters from Server\n     * @type {Observable<any>}\n     */\n    @Effect()\n    getFilters: Observable<FiltersActions.FiltersActionsAll> =\n        this.actions\n            .pipe(\n                ofType<FiltersActions.GetFilters>(FiltersActions.GET_FILTERS),\n                switchMap((action) => {\n                        return this.mailService.getFilters()\n                                   .pipe(\n                                       map((filters: any) => {\n                                           return new FiltersActions.GetFiltersSuccess(filters);\n                                       }),\n                                       catchError(err => of(new FiltersActions.GetFiltersFailed(err)))\n                                   );\n                    }\n                ));\n}\n","import { Action } from '@ngrx/store';\n\nexport const GET_LABELS = '[LABELS] GET LABELS';\nexport const GET_LABELS_SUCCESS = '[LABELS] GET LABELS SUCCESS';\nexport const GET_LABELS_FAILED = '[LABELS] GET LABELS FAILED';\n\n/**\n * Get Labels\n */\nexport class GetLabels implements Action\n{\n    readonly type = GET_LABELS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Labels Success\n */\nexport class GetLabelsSuccess implements Action\n{\n    readonly type = GET_LABELS_SUCCESS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Labels Failed\n */\nexport class GetLabelsFailed implements Action\n{\n    readonly type = GET_LABELS_FAILED;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\nexport type LabelsActionsAll\n    = GetLabels\n    | GetLabelsSuccess\n    | GetLabelsFailed;\n","import { createSelector } from '@ngrx/store';\nimport { LabelsState, getMailAppState, MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\n\nexport const getLabelsState = createSelector(\n    getMailAppState,\n    (state: MailAppState) => state.labels\n);\n\nexport const getLabels = createSelector(\n    getLabelsState,\n    (state: LabelsState) => state.entities\n);\n\nexport const getLabelsLoaded = createSelector(\n    getLabelsState,\n    (state: LabelsState) => state.loaded\n);\n\nexport const getLabelsArr = createSelector(\n    getLabels,\n    (entities) => Object.keys(entities).map((id) => entities[id])\n);\n","export const locale = {\n    lang: 'en',\n    data: {\n        MAIL: {\n            COMPOSE                 : 'COMPOSE',\n            FOLDERS                 : 'FOLDERS',\n            FILTERS                 : 'FILTERS',\n            LABELS                  : 'LABELS',\n            NO_MESSAGES             : 'There are no messages!',\n            SELECT_A_MESSAGE_TO_READ: 'Select a message to read',\n            SEARCH_PLACEHOLDER: 'Search for an e-mail or contact'\n        }\n    }\n};\n","import { StoreModule } from '@ngrx/store';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducers } from 'app/main/apps/mail-ngrx/store/reducers';\nimport { effects } from 'app/main/apps/mail-ngrx/store/effects';\n\n@NgModule({\n    imports  : [\n        StoreModule.forFeature('mail-app', reducers),\n        EffectsModule.forFeature(effects)\n    ],\n    providers: []\n})\nexport class MailNgrxStoreModule\n{\n}\n","import { Component, Inject, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector     : 'mail-ngrx-compose',\n    templateUrl  : './compose.component.html',\n    styleUrls    : ['./compose.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class MailNgrxComposeDialogComponent\n{\n    composeForm: FormGroup;\n\n    /**\n     * Constructor\n     *\n     * @param {MatDialogRef<MailNgrxComposeDialogComponent>} matDialogRef\n     * @param _data\n     * @param {FormBuilder} _formBuilder\n     */\n    constructor(\n        public matDialogRef: MatDialogRef<MailNgrxComposeDialogComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: any,\n        private _formBuilder: FormBuilder\n    )\n    {\n        // Set the defaults\n        this.composeForm = this.createComposeForm();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Create compose form\n     *\n     * @returns {FormGroup}\n     */\n    createComposeForm(): FormGroup\n    {\n        return this._formBuilder.group({\n            from   : {\n                value   : ['johndoe@creapond.com'],\n                disabled: [true]\n            },\n            to     : [''],\n            cc     : [''],\n            bcc    : [''],\n            subject: [''],\n            message: ['']\n        });\n\n    }\n\n}\n","<div class=\"dialog-content-wrapper\">\n    <mat-toolbar class=\"mat-accent m-0\">\n        <mat-toolbar-row fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n            <span class=\"title dialog-title\">New Message</span>\n            <button mat-icon-button (click)=\"matDialogRef.close()\" aria-label=\"Close dialog\">\n                <mat-icon>close</mat-icon>\n            </button>\n        </mat-toolbar-row>\n    </mat-toolbar>\n\n    <div mat-dialog-content class=\"p-24 m-0\" fusePerfectScrollbar>\n\n        <form name=\"composeForm\" [formGroup]=\"composeForm\" class=\"compose-form\" fxLayout=\"column\" fxFlex>\n\n            <mat-form-field appearance=\"outline\">\n                <mat-label>From</mat-label>\n                <input matInput name=\"from\"\n                       formControlName=\"from\"\n                       type=\"email\">\n            </mat-form-field>\n\n            <mat-form-field appearance=\"outline\">\n                <mat-label>To</mat-label>\n                <input matInput name=\"to\"\n                       formControlName=\"to\"\n                       type=\"email\" required>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Cc</mat-label>\n                <input matInput\n                       name=\"cc\"\n                       formControlName=\"cc\"\n                       type=\"email\">\n            </mat-form-field>\n\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Bcc</mat-label>\n                <input matInput\n                       name=\"bcc\"\n                       formControlName=\"bcc\"\n                       type=\"email\">\n            </mat-form-field>\n\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Subject</mat-label>\n                <input matInput name=\"subject\"\n                       formControlName=\"subject\">\n            </mat-form-field>\n\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Message</mat-label>\n                <textarea matInput name=\"message\"\n                          formControlName=\"message\"\n                          rows=\"6\">\n                </textarea>\n            </mat-form-field>\n\n            <div class=\"attachment-list\">\n\n                <div class=\"attachment\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                    <div>\n                        <span class=\"filename\">attachment-2.doc</span>\n                        <span class=\"size ml-4\">(12 Kb)</span>\n                    </div>\n\n                    <button mat-icon-button aria-label=\"Delete attachment\">\n                        <mat-icon class=\"s-16\">close</mat-icon>\n                    </button>\n                </div>\n\n                <div class=\"attachment\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                    <div>\n                        <span class=\"filename\">attachment-1.jpg</span>\n                        <span class=\"size ml-4\">(350 Kb)</span>\n                    </div>\n\n                    <button mat-icon-button aria-label=\"Delete attachment\">\n                        <mat-icon class=\"s-16\">close</mat-icon>\n                    </button>\n                </div>\n            </div>\n        </form>\n    </div>\n\n    <div mat-dialog-actions class=\"m-0 p-16\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n        <div>\n            <button mat-raised-button\n                    color=\"accent\"\n                    (click)=\"matDialogRef.close(['send',composeForm])\"\n                    class=\"save-button\"\n                    [disabled]=\"composeForm.invalid\"\n                    aria-label=\"SAVE\">\n                SEND\n            </button>\n\n            <button mat-icon-button matTooltip=\"Attach a file\">\n                <mat-icon>attach_file</mat-icon>\n            </button>\n        </div>\n\n        <button mat-icon-button (click)=\"matDialogRef.close(['delete',composeForm])\" aria-label=\"Delete\"\n                matTooltip=\"Delete\">\n            <mat-icon>delete</mat-icon>\n        </button>\n    </div>\n</div>\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, ViewEncapsulation } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\n@Component({\n    selector       : 'mail-ngrx-details',\n    templateUrl    : './mail-details.component.html',\n    styleUrls      : ['./mail-details.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation  : ViewEncapsulation.None\n})\nexport class MailNgrxDetailsComponent implements OnChanges\n{\n    @Input()\n    currentMail: Mail;\n\n    labels$: Observable<any>;\n    mail: Mail;\n    showDetails: boolean;\n\n    /**\n     * Constructor\n     *\n     * @param {MailNgrxService} _mailNgrxService\n     * @param {Store<MailAppState>} _store\n     */\n    constructor(\n        private _mailNgrxService: MailNgrxService,\n        private _store: Store<fromStore.MailAppState>\n    )\n    {\n        // Set the defaults\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\n        this.showDetails = false;\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On changes\n     */\n    ngOnChanges(): void\n    {\n        this.updateModel(this.currentMail);\n        this.markAsRead();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Mark as read\n     */\n    markAsRead(): void\n    {\n        if ( this.mail && !this.mail.read )\n        {\n            this.mail.markRead();\n            this.updateMail();\n        }\n    }\n\n    /**\n     * Toggle star\n     *\n     * @param event\n     */\n    toggleStar(event): void\n    {\n        event.stopPropagation();\n        this.mail.toggleStar();\n        this.updateMail();\n    }\n\n    /**\n     * Toggle important\n     *\n     * @param event\n     */\n    toggleImportant(event): void\n    {\n        event.stopPropagation();\n        this.mail.toggleImportant();\n        this.updateMail();\n    }\n\n    /**\n     * Update model\n     *\n     * @param data\n     */\n    updateModel(data): void\n    {\n        this.mail = !data ? null : new Mail({...data});\n    }\n\n    /**\n     * Update the mail\n     */\n    updateMail(): void\n    {\n        this._store.dispatch(new fromStore.UpdateMail(this.mail));\n        this.updateModel(this.mail);\n    }\n}\n","<div *ngIf=\"!mail\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxFlex>\n    <mat-icon class=\"s-128 mb-16 select-message-icon hint-text\">\n        email\n    </mat-icon>\n    <span class=\"select-message-text hint-text\">\n        <span>{{ 'MAIL.SELECT_A_MESSAGE_TO_READ' | translate }}</span>\n    </span>\n</div>\n\n<div *ngIf=\"mail\">\n\n    <div class=\"mail-header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n\n        <div>\n            <div class=\"subject\">{{mail.subject}}</div>\n\n            <div class=\"labels mt-8\" fxLayout=\"row wrap\">\n                <div class=\"label\" *ngFor=\"let labelId of mail.labels\"\n                     fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                    <div class=\"label-color\" [ngStyle]=\"{'background-color': (labels$ | async) | getById:labelId:'color'}\"></div>\n                    <div class=\"label-title\">{{(labels$ | async) | getById:labelId:'title'}}</div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"actions\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <button mat-icon-button (click)=\"toggleStar($event)\" aria-label=\"Toggle star\">\n                <mat-icon class=\"amber-fg\" *ngIf=\"mail.starred\">star</mat-icon>\n                <mat-icon class=\"secondary-text\" *ngIf=\"!mail.starred\">star_border</mat-icon>\n            </button>\n\n            <button mat-icon-button (click)=\"toggleImportant($event)\" aria-label=\"Toggle important\">\n                <mat-icon class=\"red-fg\" *ngIf=\"mail.important\">label</mat-icon>\n                <mat-icon class=\"secondary-text\" *ngIf=\"!mail.important\">label_outline</mat-icon>\n            </button>\n        </div>\n    </div>\n\n    <div class=\"mail-content\">\n\n        <div class=\"info\" fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\n\n            <div fxFlex fxLayout=\"column\" fxLayoutAlign=\"start start\">\n\n                <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n\n                    <div>\n                        <img *ngIf=\"mail.from.avatar\" alt=\"{{mail.from.name}}\"\n                             src=\"{{mail.from.avatar}}\" class=\"avatar\"/>\n\n                        <div *ngIf=\"!mail.from.avatar\" class=\"avatar\" ms-random-class=\"vm.colors\">\n                            {{mail.from.name[0]}}\n                        </div>\n                    </div>\n\n                    <div fxLayout=\"column\" fxLayoutAlign=\"start start\">\n\n                        <div class=\"name\">\n                            {{mail.from.name}}\n                        </div>\n\n                        <div class=\"to\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                            <div class=\"to-text\">to</div>\n                            <div>{{mail.to[0].name}}</div>\n                        </div>\n                    </div>\n                </div>\n\n                <a class=\"toggle-details\" (click)=\"showDetails = !showDetails\">\n                    <span *ngIf=\"!showDetails\">Show Details</span>\n                    <span *ngIf=\"showDetails\">Hide Details</span>\n                </a>\n\n                <div *ngIf=\"showDetails\" class=\"details\" fxLayout=\"row\" fxLayoutAlign=\"start start\">\n\n                    <div fxLayout=\"column\">\n                        <span class=\"title\">From:</span>\n                        <span class=\"title\">To:</span>\n                        <span class=\"title\">Date:</span>\n                    </div>\n\n                    <div fxLayout=\"column\">\n                        <span class=\"detail\">{{mail.from.email}}</span>\n                        <span class=\"detail\">{{mail.to[0].email}}</span>\n                        <span class=\"detail\">{{mail.time}}</span>\n                    </div>\n                </div>\n            </div>\n\n            <button mat-icon-button [matMenuTriggerFor]=\"moreMenu\" aria-label=\"More\" (click)=\"$event.stopPropagation()\">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n\n            <mat-menu #moreMenu=\"matMenu\">\n                <button mat-menu-item aria-label=\"Reply\">\n                    <mat-icon>reply</mat-icon>\n                    <span>Reply</span>\n                </button>\n\n                <button mat-menu-item aria-label=\"Forward\">\n                    <mat-icon>forward</mat-icon>\n                    <span>Forward</span>\n                </button>\n\n                <button mat-menu-item aria-label=\"Print\">\n                    <mat-icon>print</mat-icon>\n                    <span>Print</span>\n                </button>\n            </mat-menu>\n        </div>\n\n        <div [innerHTML]=\"mail.message\"></div>\n\n    </div>\n\n    <div *ngIf=\"mail.attachments\" class=\"mail-attachments\">\n\n        <div class=\"title\">\n            <span>Attachments</span>\n            ({{mail.attachments.length}})\n        </div>\n\n        <div class=\"attachment-list\" fxLayout=\"row wrap\">\n\n            <div class=\"attachment\" fxLayout=\"column\"\n                 *ngFor=\"let attachment of mail.attachments\">\n\n                <img class=\"preview\" src=\"{{attachment.preview}}\">\n\n                <div fxLayout=\"column\">\n                    <a href=\"#\" onclick=\"event.preventDefault()\">View</a>\n                    <a href=\"#\" onclick=\"event.preventDefault()\">Download</a>\n                    <div class=\"size\">({{attachment.size}})</div>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n","import { Action } from '@ngrx/store';\n\nexport const GET_FILTERS = '[FILTERS] GET FILTERS';\nexport const GET_FILTERS_SUCCESS = '[FILTERS] GET FILTERS SUCCESS';\nexport const GET_FILTERS_FAILED = '[FILTERS] GET FILTERS FAILED';\n\n/**\n * Get Filters\n */\nexport class GetFilters implements Action\n{\n    readonly type = GET_FILTERS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Filters Success\n */\nexport class GetFiltersSuccess implements Action\n{\n    readonly type = GET_FILTERS_SUCCESS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Filters Failed\n */\nexport class GetFiltersFailed implements Action\n{\n    readonly type = GET_FILTERS_FAILED;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\nexport type FiltersActionsAll\n    = GetFilters\n    | GetFiltersSuccess\n    | GetFiltersFailed;\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\nimport { MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\nimport { getFiltersArr, getFoldersArr, getLabelsArr, getMailsArr } from 'app/main/apps/mail-ngrx/store/selectors';\n\n@Injectable()\nexport class MailNgrxService\n{\n    foldersArr: any;\n    filtersArr: any;\n    labelsArr: any;\n    selectedMails: Mail[];\n    mails: Mail[];\n\n    /**\n     * Constructor\n     *\n     * @param {HttpClient} _httpClient\n     * @param {Store<MailAppState>} _store\n     */\n    constructor(\n        private _httpClient: HttpClient,\n        private _store: Store<MailAppState>\n    )\n    {\n        this._store\n            .pipe(select(getFoldersArr))\n            .subscribe(folders => {\n                this.foldersArr = folders;\n            });\n\n        this._store\n            .pipe(select(getFiltersArr))\n            .subscribe(filters => {\n                this.filtersArr = filters;\n            });\n\n        this._store\n            .pipe(select(getLabelsArr))\n            .subscribe(labels => {\n                this.labelsArr = labels;\n            });\n\n        this._store\n            .pipe(select(getMailsArr))\n            .subscribe(mails => {\n                this.mails = mails;\n            });\n\n        this.selectedMails = [];\n    }\n\n    /**\n     * Get all mails\n     *\n     * @returns {Observable<Mail[]>}\n     */\n    getAllMails(): Observable<Mail[]>\n    {\n        return this._httpClient.get<Mail[]>('api/mail-mails');\n    }\n\n    /**\n     * Get folders\n     *\n     * @returns {Observable<any>}\n     */\n    getFolders(): Observable<any>\n    {\n        return this._httpClient.get('api/mail-folders');\n    }\n\n    /**\n     * Get filters\n     *\n     * @returns {Observable<any>}\n     */\n    getFilters(): Observable<any>\n    {\n        return this._httpClient.get('api/mail-filters');\n    }\n\n    /**\n     * Get labels\n     *\n     * @returns {Observable<any>}\n     */\n    getLabels(): Observable<any>\n    {\n        return this._httpClient.get('api/mail-labels');\n    }\n\n    /**\n     * Get mails\n     *\n     * @param handle\n     * @returns {Observable<Mail[]>}\n     */\n    getMails(handle): Observable<Mail[]>\n    {\n        if ( handle.id === 'labelHandle' )\n        {\n            const labelId = this.labelsArr.find(label => label.handle === handle.value).id;\n            return this._httpClient.get<Mail[]>('api/mail-mails?labels=' + labelId);\n        }\n        else if ( handle.id === 'filterHandle' )\n        {\n            return this._httpClient.get<Mail[]>('api/mail-mails?' + handle.value + '=true');\n        }\n        else // folderHandle\n        {\n            const folderId = this.foldersArr.find(folder => folder.handle === handle.value).id;\n            return this._httpClient.get<any>('api/mail-mails?folder=' + folderId);\n        }\n    }\n\n    /**\n     * Update the mail\n     *\n     * @param mail\n     * @returns {Promise<any>}\n     */\n    updateMail(mail): any\n    {\n        return this._httpClient.post('api/mail-mails/' + mail.id, {...mail});\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nimport * as LabelsActions from '../actions/labels.actions';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\n@Injectable()\nexport class LabelsEffect\n{\n    constructor(\n        private actions: Actions,\n        private mailService: MailNgrxService\n    )\n    {\n    }\n\n    /**\n     * Get Labels from Server\n     * @type {Observable<any>}\n     */\n    @Effect()\n    getLabels: Observable<LabelsActions.LabelsActionsAll> =\n        this.actions\n            .pipe(\n                ofType<LabelsActions.GetLabels>(LabelsActions.GET_LABELS),\n                switchMap((action) => {\n                        return this.mailService.getLabels()\n                                   .pipe(\n                                       map((labels: any) => {\n                                           return new LabelsActions.GetLabelsSuccess(labels);\n                                       }),\n                                       catchError(err => of(new LabelsActions.GetLabelsFailed(err)))\n                                   );\n                    }\n                ));\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nimport * as FoldersActions from 'app/main/apps/mail-ngrx/store/actions/folders.actions';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\n@Injectable()\nexport class FoldersEffect\n{\n    constructor(\n        private actions: Actions,\n        private mailService: MailNgrxService\n    )\n    {\n    }\n\n    /**\n     * Get Folders from Server\n     * @type {Observable<any>}\n     */\n    @Effect()\n    getFolders: Observable<FoldersActions.FoldersActionsAll> =\n        this.actions\n            .pipe(\n                ofType<FoldersActions.GetFolders>(FoldersActions.GET_FOLDERS),\n                switchMap((action) => {\n                        return this.mailService.getFolders()\n                                   .pipe(\n                                       map((folders: any) => {\n                                           return new FoldersActions.GetFoldersSuccess(folders);\n                                       }),\n                                       catchError(err => of(new FoldersActions.GetFoldersFailed(err)))\n                                   );\n                    }\n                ));\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { FuseSharedModule } from '@fuse/shared.module';\nimport { FuseSidebarModule } from '@fuse/components';\n\nimport * as fromGuards from 'app/main/apps/mail-ngrx/store/guards/index';\nimport { MailNgrxStoreModule } from 'app/main/apps/mail-ngrx/store/store.module';\nimport { MailNgrxComponent } from 'app/main/apps/mail-ngrx/mail.component';\nimport { MailNgrxListComponent } from 'app/main/apps/mail-ngrx/mail-list/mail-list.component';\nimport { MailNgrxListItemComponent } from 'app/main/apps/mail-ngrx/mail-list/mail-list-item/mail-list-item.component';\nimport { MailNgrxDetailsComponent } from 'app/main/apps/mail-ngrx/mail-details/mail-details.component';\nimport { MailNgrxMainSidebarComponent } from 'app/main/apps/mail-ngrx/sidebars/main/main-sidebar.component';\nimport { MailNgrxComposeDialogComponent } from 'app/main/apps/mail-ngrx/dialogs/compose/compose.component';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\nconst routes: Routes = [\n    {\n        path       : 'label/:labelHandle',\n        component  : MailNgrxComponent,\n        canActivate: [fromGuards.ResolveGuard]\n    },\n    {\n        path       : 'label/:labelHandle/:mailId',\n        component  : MailNgrxComponent,\n        canActivate: [fromGuards.ResolveGuard]\n    },\n    {\n        path       : 'filter/:filterHandle',\n        component  : MailNgrxComponent,\n        canActivate: [fromGuards.ResolveGuard]\n    },\n    {\n        path       : 'filter/:filterHandle/:mailId',\n        component  : MailNgrxComponent,\n        canActivate: [fromGuards.ResolveGuard]\n    },\n    {\n        path       : ':folderHandle',\n        component  : MailNgrxComponent,\n        canActivate: [fromGuards.ResolveGuard]\n    },\n    {\n        path       : ':folderHandle/:mailId',\n        component  : MailNgrxComponent,\n        canActivate: [fromGuards.ResolveGuard]\n    },\n    {\n        path      : '**',\n        redirectTo: 'inbox'\n    }\n];\n\n@NgModule({\n    declarations   : [\n        MailNgrxComponent,\n        MailNgrxListComponent,\n        MailNgrxListItemComponent,\n        MailNgrxDetailsComponent,\n        MailNgrxMainSidebarComponent,\n        MailNgrxComposeDialogComponent\n    ],\n    imports        : [\n        RouterModule.forChild(routes),\n\n        MatButtonModule,\n        MatCheckboxModule,\n        MatDialogModule,\n        MatFormFieldModule,\n        MatIconModule,\n        MatInputModule,\n        MatMenuModule,\n        MatRippleModule,\n        MatSelectModule,\n        MatToolbarModule,\n\n        TranslateModule,\n\n        FuseSharedModule,\n        FuseSidebarModule,\n\n        MailNgrxStoreModule\n    ],\n    providers      : [\n        MailNgrxService,\n        fromGuards.ResolveGuard\n    ],\n    entryComponents: [MailNgrxComposeDialogComponent]\n})\nexport class MailNgrxModule\n{\n}\n","import { createSelector } from '@ngrx/store';\nimport { FiltersState, getMailAppState, MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\n\nexport const getFiltersState = createSelector(\n    getMailAppState,\n    (state: MailAppState) => state.filters\n);\n\nexport const getFilters = createSelector(\n    getFiltersState,\n    (state: FiltersState) => state.entities\n);\n\nexport const getFiltersLoaded = createSelector(\n    getFiltersState,\n    (state: FiltersState) => state.loaded\n);\n\nexport const getFiltersArr = createSelector(\n    getFilters,\n    (entities) => Object.keys(entities).map((id) => entities[id])\n);\n","import { ActionReducerMap, createFeatureSelector, createSelector } from '@ngrx/store';\nimport { MailsReducer, MailsState } from './mails.reducer';\nimport { FoldersReducer, FoldersState } from './folders.reducer';\nimport { FiltersReducer, FiltersState } from './filters.reducer';\nimport { LabelsReducer, LabelsState } from './labels.reducer';\n\nexport interface MailAppState\n{\n    mails: MailsState;\n    folders: FoldersState;\n    filters: FiltersState;\n    labels: LabelsState;\n}\n\nexport const getMailAppState = createFeatureSelector<MailAppState>(\n    'mail-app'\n);\n\nexport const getAppState = createSelector(\n    getMailAppState,\n    (state: MailAppState) => state\n);\n\nexport const reducers: ActionReducerMap<MailAppState> = {\n    mails  : MailsReducer,\n    folders: FoldersReducer,\n    filters: FiltersReducer,\n    labels : LabelsReducer\n};\n\nexport * from './mails.reducer';\nexport * from './folders.reducer';\nexport * from './filters.reducer';\nexport * from './labels.reducer';\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { FormGroup } from '@angular/forms';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\nimport { MailNgrxComposeDialogComponent } from 'app/main/apps/mail-ngrx/dialogs/compose/compose.component';\n\n@Component({\n    selector       : 'mail-ngrx-main-sidebar',\n    templateUrl    : './main-sidebar.component.html',\n    styleUrls      : ['./main-sidebar.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation  : ViewEncapsulation.None\n})\nexport class MailNgrxMainSidebarComponent\n{\n    labels: any[];\n    accounts: object;\n    selectedAccount: string;\n    dialogRef: any;\n\n    folders$: Observable<any>;\n    filters$: Observable<any>;\n    labels$: Observable<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {MailNgrxService} _mailNgrxService\n     * @param {MatDialog} _matDialog\n     * @param {Store<MailAppState>} _store\n     */\n    constructor(\n        private _mailNgrxService: MailNgrxService,\n        private _matDialog: MatDialog,\n        private _store: Store<fromStore.MailAppState>\n    )\n    {\n        // Set the defaults\n        this.accounts = {\n            creapond    : 'johndoe@creapond.com',\n            withinpixels: 'johndoe@withinpixels.com'\n        };\n        this.selectedAccount = 'creapond';\n        this.folders$ = this._store.pipe(select(fromStore.getFoldersArr));\n        this.filters$ = this._store.pipe(select(fromStore.getFiltersArr));\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Compose dialog\n     */\n    composeDialog(): void\n    {\n        this.dialogRef = this._matDialog.open(MailNgrxComposeDialogComponent, {\n            panelClass: 'mail-ngrx-compose-dialog'\n        });\n\n        this.dialogRef.afterClosed()\n            .subscribe(response => {\n                if ( !response )\n                {\n                    return;\n                }\n                const actionType: string = response[0];\n                const formData: FormGroup = response[1];\n                switch ( actionType )\n                {\n                    /**\n                     * Send\n                     */\n                    case 'send':\n                        console.log('new Mail', formData.getRawValue());\n                        break;\n                    /**\n                     * Delete\n                     */\n                    case 'delete':\n                        console.log('delete Mail');\n                        break;\n                }\n            });\n    }\n}\n","<!-- SIDEBAR HEADER -->\n<div fxLayout=\"column\" fxLayoutAlign=\"space-between start\"\n     class=\"header accent p-24 pb-4\">\n\n    <div class=\"logo\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n        <mat-icon class=\"logo-icon s-32\">mail</mat-icon>\n        <span class=\"logo-text\">MailboxNgrx</span>\n    </div>\n\n    <div class=\"account\" fxLayout=\"column\">\n        <div class=\"title\">John Doe</div>\n        <mat-form-field floatLabel=\"never\">\n            <mat-select class=\"account-selection\" placeholder=\"Mail Selection\"\n                        [ngModel]=\"selectedAccount\">\n                <mat-option *ngFor=\"let account of (accounts | keys)\" [value]=\"account.key\">\n                    {{account.value}}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    </div>\n\n</div>\n<!-- / SIDEBAR HEADER -->\n\n<!-- SIDEBAR CONTENT -->\n<div class=\"content\" fusePerfectScrollbar>\n\n    <div class=\"px-24 pt-32 pb-12\">\n        <button mat-raised-button\n                class=\"mat-accent compose-dialog-button w-100-p\"\n                (click)=\"composeDialog()\"\n                aria-label=\"Compose\">\n            {{ 'MAIL.COMPOSE' | translate }}\n        </button>\n    </div>\n\n    <div class=\"nav material2\">\n\n        <div class=\"nav-subheader\">{{ 'MAIL.FOLDERS' | translate }}</div>\n\n        <div class=\"nav-item\" *ngFor=\"let folder of (folders$ | async)\">\n            <a class=\"nav-link\" matRipple [routerLink]=\"'/apps/mail-ngrx/' + folder.handle\"\n               [routerLinkActive]=\"['active', 'accent']\">\n                <mat-icon class=\"nav-link-icon\" *ngIf=\"folder.icon\">{{folder.icon}}</mat-icon>\n                <span>{{folder.title}}</span>\n            </a>\n        </div>\n\n        <div class=\"nav-subheader\">{{ 'MAIL.FILTERS' | translate }}</div>\n\n        <div class=\"nav-item\" *ngFor=\"let filter of (filters$ | async)\">\n            <a class=\"nav-link\" matRipple [routerLink]=\"'/apps/mail-ngrx/filter/' + filter.handle\"\n               [routerLinkActive]=\"['active', 'accent']\">\n                <mat-icon class=\"nav-link-icon\" [ngClass]=\"filter.color\" *ngIf=\"filter.icon\">{{filter.icon}}</mat-icon>\n                <span>{{filter.title}}</span>\n            </a>\n        </div>\n\n        <div class=\"nav-subheader\">{{ 'MAIL.LABELS' | translate }}</div>\n\n        <div class=\"nav-item\" *ngFor=\"let label of (labels$ | async)\">\n            <a class=\"nav-link\" matRipple [routerLink]=\"'/apps/mail-ngrx/label/' + label.handle\"\n               [routerLinkActive]=\"['active', 'accent']\">\n                <mat-icon class=\"nav-link-icon\" [ngStyle]=\"{'color':label.color}\">label</mat-icon>\n                <span>{{label.title}}</span>\n            </a>\n        </div>\n\n    </div>\n\n</div>\n<!-- / SIDEBAR CONTENT -->\n","import { createSelector } from '@ngrx/store';\nimport { FoldersState, getMailAppState, MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\n\nexport const getFoldersState = createSelector(\n    getMailAppState,\n    (state: MailAppState) => state.folders\n);\n\nexport const getFolders = createSelector(\n    getFoldersState,\n    (state: FoldersState) => state.entities\n);\n\nexport const getFoldersLoaded = createSelector(\n    getFoldersState,\n    (state: FoldersState) => state.loaded\n);\n\nexport const getFoldersArr = createSelector(\n    getFolders,\n    (entities) => Object.keys(entities).map((id) => entities[id])\n);\n","export * from './mails.actions';\nexport * from './folders.actions';\nexport * from './filters.actions';\nexport * from './labels.actions';\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { RouterStateSnapshot } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\n\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { map, switchMap, catchError, tap, take, filter } from 'rxjs/operators';\n\nimport { MailAppState } from 'app/main/apps/mail-ngrx/store/reducers';\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\nimport { getFiltersLoaded, getFoldersLoaded, getLabelsLoaded, getMailsLoaded } from 'app/main/apps/mail-ngrx/store/selectors';\nimport { getRouterState } from 'app/store/reducers';\n\n@Injectable()\nexport class ResolveGuard implements CanActivate\n{\n    routerState: any;\n\n    /**\n     * Constructor\n     *\n     * @param {Store<MailAppState>} _store\n     */\n    constructor(\n        private _store: Store<MailAppState>\n    )\n    {\n        this._store\n            .pipe(select(getRouterState))\n            .subscribe(routerState => {\n                if ( routerState )\n                {\n                    this.routerState = routerState.state;\n                }\n            });\n    }\n\n    /**\n     * Can activate\n     *\n     * @param {ActivatedRouteSnapshot} route\n     * @param {RouterStateSnapshot} state\n     * @returns {Observable<boolean>}\n     */\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean>\n    {\n        return this.checkStore().pipe(\n            switchMap(() => of(true)),\n            catchError(() => of(false))\n        );\n    }\n\n    /**\n     * Check store\n     *\n     * @returns {Observable<any>}\n     */\n    checkStore(): Observable<any>\n    {\n        return forkJoin(\n            this.getFolders(),\n            this.getFilters(),\n            this.getLabels()\n        ).pipe(\n            filter(([foldersLoaded, filtersLoaded, labelsLoaded]) => !!(foldersLoaded && filtersLoaded && labelsLoaded)),\n            take(1),\n            switchMap(() =>\n                this.getMails()\n            ),\n            take(1),\n            map(() => this._store.dispatch(new fromStore.SetCurrentMail(this.routerState.params.mailId)))\n        );\n    }\n\n    /**\n     * Get folders\n     *\n     * @returns {Observable<any>}\n     */\n    getFolders(): any\n    {\n        return this._store.pipe(\n            select(getFoldersLoaded),\n            tap(loaded => {\n                if ( !loaded )\n                {\n                    this._store.dispatch(new fromStore.GetFolders([]));\n                }\n            }),\n            filter(loaded => loaded),\n            take(1)\n        );\n    }\n\n    /**\n     * Get Filters\n     *\n     * @returns {Observable<any>}\n     */\n    getFilters(): any\n    {\n        return this._store.pipe(\n            select(getFiltersLoaded),\n            tap(loaded => {\n                if ( !loaded )\n                {\n                    this._store.dispatch(new fromStore.GetFilters([]));\n                }\n            }),\n            filter(loaded => loaded),\n            take(1)\n        );\n    }\n\n    /**\n     * Get Labels\n     * @returns {Observable<any>}\n     */\n    getLabels(): any\n    {\n        return this._store.pipe(\n            select(getLabelsLoaded),\n            tap(loaded => {\n                if ( !loaded )\n                {\n                    this._store.dispatch(new fromStore.GetLabels([]));\n                }\n            }),\n            filter(loaded => loaded),\n            take(1)\n        );\n    }\n\n    /**\n     * Get Mails\n     *\n     * @returns {Observable<any>}\n     */\n    getMails(): any\n    {\n        return this._store.pipe(\n            select(getMailsLoaded),\n            tap((loaded: any) => {\n\n                if ( !this.routerState.params[loaded.id] || this.routerState.params[loaded.id] !== loaded.value )\n                {\n                    this._store.dispatch(new fromStore.GetMails());\n                    this._store.dispatch(new fromStore.SetSearchText(''));\n                    this._store.dispatch(new fromStore.DeselectAllMails());\n                }\n            }),\n            filter((loaded: any) => {\n                return this.routerState.params[loaded.id] && this.routerState.params[loaded.id] === loaded.value;\n            }),\n            take(1)\n        );\n    }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\nimport { FuseSidebarService } from '@fuse/components/sidebar/sidebar.service';\nimport { FuseTranslationLoaderService } from '@fuse/services/translation-loader.service';\n\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\nimport * as fromStore from 'app/main/apps/mail-ngrx/store';\n\nimport { locale as english } from 'app/main/apps/mail-ngrx/i18n/en';\nimport { locale as turkish } from 'app/main/apps/mail-ngrx/i18n/tr';\n\n@Component({\n    selector       : 'mail-ngrx',\n    templateUrl    : './mail.component.html',\n    styleUrls      : ['./mail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation  : ViewEncapsulation.None\n})\nexport class MailNgrxComponent implements OnInit, OnDestroy\n{\n    hasSelectedMails: boolean;\n    isIndeterminate: boolean;\n    searchInput: FormControl;\n    mails$: Observable<any>;\n    folders$: Observable<any>;\n    labels$: Observable<any>;\n    currentMail$: Observable<Mail>;\n    selectedMailIds$: Observable<string[]>;\n    searchText$: Observable<string>;\n    mails: Mail[];\n    selectedMailIds: string[];\n\n    /**\n     * Constructor\n     *\n     * @param {ChangeDetectorRef} _changeDetectorRef\n     * @param {FuseSidebarService} _fuseSidebarService\n     * @param {FuseTranslationLoaderService} _fuseTranslationLoaderService\n     * @param {MailNgrxService} _mailNgrxService\n     * @param {Store<MailAppState>} _store\n     */\n    constructor(\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _fuseSidebarService: FuseSidebarService,\n        private _fuseTranslationLoaderService: FuseTranslationLoaderService,\n        private _mailNgrxService: MailNgrxService,\n        private _store: Store<fromStore.MailAppState>\n    )\n    {\n        // Set the defaults\n        this.searchInput = new FormControl('');\n        this._fuseTranslationLoaderService.loadTranslations(english, turkish);\n        this.currentMail$ = this._store.pipe(select(fromStore.getCurrentMail));\n        this.mails$ = this._store.pipe(select(fromStore.getMailsArr));\n        this.folders$ = this._store.pipe(select(fromStore.getFoldersArr));\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\n        this.selectedMailIds$ = this._store.pipe(select(fromStore.getSelectedMailIds));\n        this.searchText$ = this._store.pipe(select(fromStore.getSearchText));\n        this.mails = [];\n        this.selectedMailIds = [];\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this.mails$.subscribe(mails => {\n            this.mails = mails;\n        });\n\n        this.selectedMailIds$\n            .subscribe(selectedMailIds => {\n                this.selectedMailIds = selectedMailIds;\n                this.hasSelectedMails = selectedMailIds.length > 0;\n                this.isIndeterminate = (selectedMailIds.length !== this.mails.length && selectedMailIds.length > 0);\n                this.refresh();\n            });\n\n        this.searchText$.subscribe(searchText => {\n            this.searchInput.setValue(searchText);\n        });\n\n        this.searchInput.valueChanges.pipe(\n            debounceTime(300),\n            distinctUntilChanged()\n        ).subscribe(searchText => {\n            this._store.dispatch(new fromStore.SetSearchText(searchText));\n        });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        this._changeDetectorRef.detach();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Toggle select all\n     *\n     * @param ev\n     */\n    toggleSelectAll(ev): void\n    {\n        ev.preventDefault();\n\n        if ( this.selectedMailIds.length && this.selectedMailIds.length > 0 )\n        {\n            this.deselectAllMails();\n        }\n        else\n        {\n            this.selectAllMails();\n        }\n    }\n\n    /**\n     * Select all mails\n     */\n    selectAllMails(): void\n    {\n        this._store.dispatch(new fromStore.SelectAllMails());\n    }\n\n    /**\n     * Deselect all mails\n     */\n    deselectAllMails(): void\n    {\n        this._store.dispatch(new fromStore.DeselectAllMails());\n    }\n\n    /**\n     * Select mails by parameter\n     *\n     * @param parameter\n     * @param value\n     */\n    selectMailsByParameter(parameter, value): void\n    {\n        this._store.dispatch(new fromStore.SelectMailsByParameter({\n            parameter,\n            value\n        }));\n    }\n\n    /**\n     * Toggle label on selected mails\n     *\n     * @param labelId\n     */\n    toggleLabelOnSelectedMails(labelId): void\n    {\n        this._store.dispatch(new fromStore.AddLabelOnSelectedMails(labelId));\n    }\n\n    /**\n     * Set folder on selected mails\n     *\n     * @param folderId\n     */\n    setFolderOnSelectedMails(folderId): void\n    {\n        this._store.dispatch(new fromStore.SetFolderOnSelectedMails(folderId));\n    }\n\n    /**\n     * Deselect current mail\n     */\n    deselectCurrentMail(): void\n    {\n        this._store.dispatch(new fromStore.SetCurrentMail(''));\n    }\n\n    /**\n     * Refresh\n     */\n    refresh(): void\n    {\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Toggle the sidebar\n     *\n     * @param name\n     */\n    toggleSidebar(name): void\n    {\n        this._fuseSidebarService.getSidebar(name).toggleOpen();\n    }\n}\n","<div id=\"mail\" class=\"page-layout carded left-sidebar inner-scroll\">\n\n    <!-- TOP BACKGROUND -->\n    <div class=\"top-bg accent\"></div>\n    <!-- / TOP BACKGROUND -->\n\n    <!-- SIDEBAR -->\n    <fuse-sidebar class=\"sidebar\" name=\"mail-ngrx-main-sidebar\" position=\"left\" lockedOpen=\"gt-md\">\n        <mail-ngrx-main-sidebar></mail-ngrx-main-sidebar>\n    </fuse-sidebar>\n    <!-- / SIDEBAR -->\n\n    <!-- CENTER -->\n    <div class=\"center\">\n\n        <!-- CONTENT HEADER -->\n        <div class=\"header\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n            <div class=\"search-wrapper\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n                <button mat-icon-button class=\"sidebar-toggle\" fxHide.gt-md\n                        (click)=\"toggleSidebar('mail-ngrx-main-sidebar')\">\n                    <mat-icon>menu</mat-icon>\n                </button>\n\n                <div class=\"search\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                    <mat-icon class=\"secondary-text\">search</mat-icon>\n                    <input [formControl]=\"searchInput\" [placeholder]=\"'MAIL.SEARCH_PLACEHOLDER' | translate\" fxFlex>\n                </div>\n            </div>\n        </div>\n        <!-- / CONTENT HEADER -->\n\n        <!-- CONTENT CARD -->\n        <div class=\"content-card\" [ngClass]=\"{'current-mail-selected':currentMail$ | async}\">\n\n            <!-- CONTENT TOOLBAR -->\n            <div class=\"toolbar px-24 py-8\">\n\n                <div class=\"mail-selection\" fxFlex=\"row\" fxLayoutAlign=\"start center\">\n\n                    <mat-checkbox (click)=\"toggleSelectAll($event)\"\n                                  [checked]=\"hasSelectedMails\"\n                                  [indeterminate]=\"isIndeterminate\">\n                    </mat-checkbox>\n\n                    <button mat-icon-button [matMenuTriggerFor]=\"selectMenu\">\n                        <mat-icon>arrow_drop_down</mat-icon>\n                    </button>\n                    <mat-menu #selectMenu=\"matMenu\">\n                        <button mat-menu-item (click)=\"selectAllMails()\">All</button>\n                        <button mat-menu-item (click)=\"deselectAllMails()\">None</button>\n                        <button mat-menu-item (click)=\"selectMailsByParameter('read', true)\">Read</button>\n                        <button mat-menu-item (click)=\"selectMailsByParameter('read', false)\">Unread</button>\n                        <button mat-menu-item (click)=\"selectMailsByParameter('starred', true)\">Starred</button>\n                        <button mat-menu-item (click)=\"selectMailsByParameter('starred', false)\">Unstarred</button>\n                        <button mat-menu-item (click)=\"selectMailsByParameter('important', true)\">Important</button>\n                        <button mat-menu-item (click)=\"selectMailsByParameter('important', false)\">Unimportant</button>\n                    </mat-menu>\n\n                    <div class=\"toolbar-separator\" *ngIf=\"hasSelectedMails\"></div>\n\n                    <button mat-icon-button (click)=\"setFolderOnSelectedMails(4)\" *ngIf=\"hasSelectedMails\">\n                        <mat-icon class=\"secondary-text\">delete</mat-icon>\n                    </button>\n\n                    <button mat-icon-button [matMenuTriggerFor]=\"folderMenu\" *ngIf=\"hasSelectedMails\">\n                        <mat-icon class=\"secondary-text\">folder</mat-icon>\n                    </button>\n                    <mat-menu #folderMenu=\"matMenu\">\n                        <button mat-menu-item *ngFor=\"let folder of folders$ | async\"\n                                (click)=\"setFolderOnSelectedMails(folder.id)\">{{folder.title}}\n                        </button>\n                    </mat-menu>\n\n                    <button mat-icon-button [matMenuTriggerFor]=\"labelMenu\" *ngIf=\"hasSelectedMails\">\n                        <mat-icon class=\"secondary-text\">label</mat-icon>\n                    </button>\n                    <mat-menu #labelMenu=\"matMenu\">\n                        <button mat-menu-item *ngFor=\"let label of labels$ | async\"\n                                (click)=\"toggleLabelOnSelectedMails(label.id)\">{{label.title}}\n                        </button>\n                    </mat-menu>\n                </div>\n\n                <div *ngIf=\"currentMail$ | async\" fxHide.gt-xs>\n                    <button mat-icon-button (click)=\"deselectCurrentMail()\">\n                        <mat-icon class=\"secondary-text\">arrow_back</mat-icon>\n                    </button>\n                </div>\n            </div>\n            <!-- / CONTENT TOOLBAR -->\n\n            <!-- CONTENT -->\n            <div class=\"content\" fxLayout=\"row\">\n\n                <mail-ngrx-list fusePerfectScrollbar fxFlex [mails]=\"mails$ | async\" [currentMail]=\"currentMail$ | async\"></mail-ngrx-list>\n                <mail-ngrx-details [currentMail]=\"currentMail$ | async\" fusePerfectScrollbar fxFlex></mail-ngrx-details>\n\n            </div>\n            <!-- / CONTENT -->\n\n        </div>\n        <!-- / CONTENT CARD -->\n\n    </div>\n    <!-- / CENTER -->\n\n</div>\n","export * from './resolve.guard';\n","import * as FoldersActions from 'app/main/apps/mail-ngrx/store/actions/folders.actions';\n\nexport interface FoldersState\n{\n    entities?: { [id: number]: any };\n    loading: boolean;\n    loaded: boolean;\n}\n\nexport const FoldersInitialState: FoldersState = {\n    entities: {},\n    loading : false,\n    loaded  : false\n};\n\nexport function FoldersReducer(state = FoldersInitialState, action: FoldersActions.FoldersActionsAll): FoldersState\n{\n    switch ( action.type )\n    {\n        case FoldersActions.GET_FOLDERS:\n            return {\n                ...state,\n                loading: true,\n                loaded : false\n            };\n        case FoldersActions.GET_FOLDERS_SUCCESS:\n\n            const folders = action.payload;\n            const entities = folders.reduce(\n                (_entities: { [id: number]: any }, folder: any) => {\n                    return {\n                        ..._entities,\n                        [folder.id]: folder\n                    };\n                }, {});\n\n            return {\n                ...state,\n                loading: false,\n                loaded : true,\n                entities\n            };\n\n        case FoldersActions.GET_FOLDERS_FAILED:\n            return {\n                ...state,\n                loading: false,\n                loaded : false\n            };\n        default:\n            return state;\n    }\n}\n","export * from './actions';\nexport * from './reducers';\nexport * from './selectors';\nexport * from './effects';\n","import { Action } from '@ngrx/store';\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\n\nexport const GET_MAILS = '[MAILS] GET MAILS';\nexport const GET_MAILS_SUCCESS = '[MAILS] GET MAILS SUCCESS';\nexport const GET_MAILS_FAILED = '[MAILS] GET MAILS FAILED';\nexport const SET_CURRENT_MAIL = '[MAILS] SET CURRENT MAIL';\nexport const SET_CURRENT_MAIL_SUCCESS = '[MAILS] SET CURRENT MAIL SUCCESS';\nexport const CHECK_CURRENT_MAIL = '[MAILS] CHECK CURRENT MAIL';\nexport const UPDATE_MAIL = '[MAILS] UPDATE MAIL';\nexport const UPDATE_MAIL_SUCCESS = '[MAILS] UPDATE MAIL SUCCESS';\nexport const UPDATE_MAILS = '[MAILS] UPDATE MAILS';\nexport const UPDATE_MAILS_SUCCESS = '[MAILS] UPDATE MAILS SUCCESS';\nexport const SET_SEARCH_TEXT = '[MAILS] SET SEARCH TEXT';\nexport const SELECT_ALL_MAILS = '[MAILS] SELECT ALL MAILS';\nexport const DESELECT_ALL_MAILS = '[MAILS] DESELECT ALL MAILS';\nexport const TOGGLE_IN_SELECTED_MAILS = '[MAILS] TOGGLE IN SELECTED MAILS';\nexport const SELECT_MAILS_BY_PARAMETER = '[MAILS] SELECT MAILS BY PARAMETER';\nexport const SET_FOLDER_ON_SELECTED_MAILS = '[MAILS] SET FOLDER ON SELECTED MAILS';\nexport const ADD_LABEL_ON_SELECTED_MAILS = '[MAILS] ADD LABEL ON SELECTED MAILS';\n\n/**\n * Get Mails\n */\nexport class GetMails implements Action\n{\n    readonly type = GET_MAILS;\n\n    constructor()\n    {\n    }\n}\n\n/**\n * Get Mails Success\n */\nexport class GetMailsSuccess implements Action\n{\n    readonly type = GET_MAILS_SUCCESS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Mails Failed\n */\nexport class GetMailsFailed implements Action\n{\n    readonly type = GET_MAILS_FAILED;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\n/**\n * Set Current Mail\n */\nexport class SetCurrentMail implements Action\n{\n    readonly type = SET_CURRENT_MAIL;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\n/**\n * Set Current Mail Success\n */\nexport class SetCurrentMailSuccess implements Action\n{\n    readonly type = SET_CURRENT_MAIL_SUCCESS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Check Current Mail\n */\nexport class CheckCurrentMail implements Action\n{\n    readonly type = CHECK_CURRENT_MAIL;\n\n    constructor()\n    {\n    }\n}\n\n/**\n * Update Mail\n */\nexport class UpdateMail implements Action\n{\n    readonly type = UPDATE_MAIL;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Update Mail Success\n */\nexport class UpdateMailSuccess implements Action\n{\n    readonly type = UPDATE_MAIL_SUCCESS;\n\n    constructor(public payload: Mail)\n    {\n    }\n}\n\n/**\n * Update Mails\n */\nexport class UpdateMails implements Action\n{\n    readonly type = UPDATE_MAILS;\n\n    constructor(public payload: Mail[])\n    {\n    }\n}\n\n/**\n * Update Mails Success\n */\nexport class UpdateMailsSuccess implements Action\n{\n    readonly type = UPDATE_MAILS_SUCCESS;\n\n    constructor()\n    {\n    }\n}\n\n/**\n * Set Search Text\n */\nexport class SetSearchText implements Action\n{\n    readonly type = SET_SEARCH_TEXT;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\n/**\n * Select All Mails\n */\nexport class SelectAllMails implements Action\n{\n    readonly type = SELECT_ALL_MAILS;\n\n    constructor()\n    {\n    }\n}\n\n/**\n * Deselect All Mails\n */\nexport class DeselectAllMails implements Action\n{\n    readonly type = DESELECT_ALL_MAILS;\n\n    constructor()\n    {\n    }\n}\n\n/**\n * Toggle In Selected Mails\n */\nexport class ToggleInSelectedMails implements Action\n{\n    readonly type = TOGGLE_IN_SELECTED_MAILS;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\n/**\n * Select Mails by Parameter\n */\nexport class SelectMailsByParameter implements Action\n{\n    readonly type = SELECT_MAILS_BY_PARAMETER;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Set Folder on Selected Mails\n */\nexport class SetFolderOnSelectedMails implements Action\n{\n    readonly type = SET_FOLDER_ON_SELECTED_MAILS;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\n/**\n * Add label on Selected Mails\n */\nexport class AddLabelOnSelectedMails implements Action\n{\n    readonly type = ADD_LABEL_ON_SELECTED_MAILS;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\nexport type MailsActionsAll\n    = GetMails\n    | GetMailsSuccess\n    | GetMailsFailed\n    | SetCurrentMail\n    | SetCurrentMailSuccess\n    | CheckCurrentMail\n    | UpdateMail\n    | UpdateMailSuccess\n    | UpdateMails\n    | UpdateMailsSuccess\n    | SetSearchText\n    | SelectAllMails\n    | DeselectAllMails\n    | ToggleInSelectedMails\n    | SelectMailsByParameter\n    | SetFolderOnSelectedMails\n    | AddLabelOnSelectedMails;\n","export const locale = {\n    lang: 'tr',\n    data: {\n        MAIL: {\n            COMPOSE                 : 'YENİ E-POSTA',\n            FOLDERS                 : 'KLASÖRLER',\n            FILTERS                 : 'FİLTRELER',\n            LABELS                  : 'ETİKETLER',\n            NO_MESSAGES             : 'Mesajiniz bulunmamakta!',\n            SELECT_A_MESSAGE_TO_READ: 'Okumak için bir mesaj seçin',\n            SEARCH_PLACEHOLDER      : 'E-mail yada bir kişi arayın'\n        }\n    }\n};\n","export class Mail\n{\n    id: string;\n    from: {\n        name: string,\n        avatar: string,\n        email: string\n    };\n    to: {\n        name: string,\n        email: string\n    }[];\n    subject: string;\n    message: string;\n    time: string;\n    read: boolean;\n    starred: boolean;\n    important: boolean;\n    hasAttachments: boolean;\n    attachments: {\n        type: string,\n        fileName: string,\n        preview: string,\n        url: string,\n        size: string\n    }[];\n    labels: string[];\n    folder: string;\n\n    /**\n     * Constructor\n     *\n     * @param mail\n     */\n    constructor(mail)\n    {\n        this.id = mail.id;\n        this.from = mail.from;\n        this.to = mail.to;\n        this.subject = mail.subject;\n        this.message = mail.message;\n        this.time = mail.time;\n        this.read = mail.read;\n        this.starred = mail.starred;\n        this.important = mail.important;\n        this.hasAttachments = mail.hasAttachments;\n        this.attachments = mail.attachments;\n        this.labels = mail.labels;\n        this.folder = mail.folder;\n    }\n\n    /**\n     * Toggle star\n     */\n    toggleStar(): void\n    {\n        this.starred = !this.starred;\n    }\n\n    /**\n     * Toggle important\n     */\n    toggleImportant(): void\n    {\n        this.important = !this.important;\n    }\n\n    /**\n     * Mark as read\n     */\n    markRead(): void\n    {\n        this.read = true;\n    }\n\n    /**\n     * Mark as unread\n     */\n    markUnread(): void\n    {\n        this.read = false;\n    }\n}\n","<div *ngIf=\"mails.length === 0\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxFlexFill>\n    <span class=\"no-messages-text hint-text\">{{ 'MAIL.NO_MESSAGES' | translate }}</span>\n</div>\n\n<div class=\"mail-list\">\n    <mail-ngrx-list-item *ngFor=\"let mail of mails\" [mail]=\"mail\" (click)=\"readMail(mail.id)\"\n                    [ngClass]=\"{'current-mail':mail?.id == currentMail?.id}\">\n    </mail-ngrx-list-item>\n</div>\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\nimport { MailNgrxService } from 'app/main/apps/mail-ngrx/mail.service';\n\n@Component({\n    selector       : 'mail-ngrx-list',\n    templateUrl    : './mail-list.component.html',\n    styleUrls      : ['./mail-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation  : ViewEncapsulation.None\n})\nexport class MailNgrxListComponent\n{\n    @Input()\n    mails: Mail[];\n\n    @Input()\n    currentMail: Mail[];\n\n    /**\n     * Constructor\n     *\n     * @param {ActivatedRoute} _activatedRoute\n     * @param {MailNgrxService} _mailNgrxService\n     * @param {Router} _router\n     */\n    constructor(\n        private _activatedRoute: ActivatedRoute,\n        private _mailNgrxService: MailNgrxService,\n        private _router: Router\n    )\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Read mail\n     *\n     * @param mailId\n     */\n    readMail(mailId): void\n    {\n        const labelHandle  = this._activatedRoute.snapshot.params.labelHandle,\n              filterHandle = this._activatedRoute.snapshot.params.filterHandle,\n              folderHandle = this._activatedRoute.snapshot.params.folderHandle;\n\n        if ( labelHandle )\n        {\n            this._router.navigate(['apps/mail-ngrx/label/' + labelHandle + '/' + mailId]);\n        }\n        else if ( filterHandle )\n        {\n            this._router.navigate(['apps/mail-ngrx/filter/' + filterHandle + '/' + mailId]);\n        }\n        else\n        {\n            this._router.navigate(['apps/mail-ngrx/' + folderHandle + '/' + mailId]);\n        }\n    }\n}\n","import * as MailsActions from 'app/main/apps/mail-ngrx/store/actions/mails.actions';\nimport { Mail } from 'app/main/apps/mail-ngrx/mail.model';\n\nexport interface MailsState\n{\n    entities?: { [id: number]: Mail };\n    currentMail: any;\n    selectedMailIds: string[];\n    searchText: string;\n    loading: boolean;\n    loaded: any;\n}\n\nexport const MailsInitialState: MailsState = {\n    entities       : {},\n    currentMail    : null,\n    selectedMailIds: [],\n    searchText     : '',\n    loading        : false,\n    loaded         : false\n};\n\nexport function MailsReducer(state = MailsInitialState, action: MailsActions.MailsActionsAll): MailsState\n{\n    switch ( action.type )\n    {\n        case MailsActions.GET_MAILS:\n        {\n            return {\n                ...state,\n                loading: true\n            };\n        }\n\n        case MailsActions.GET_MAILS_SUCCESS:\n        {\n\n            const mails = action.payload.mails;\n            const loaded = action.payload.loaded;\n            const entities = mails.reduce(\n                (_entities: { [id: number]: Mail }, mail: Mail) => {\n                    return {\n                        ..._entities,\n                        [mail.id]: mail\n                    };\n                }, {});\n\n            return {\n                ...state,\n                entities,\n                loading: false,\n                loaded\n            };\n        }\n\n        case MailsActions.GET_MAILS_FAILED:\n        {\n            return {\n                ...state,\n                loading: false,\n                loaded : false\n            };\n        }\n\n        case MailsActions.SET_CURRENT_MAIL_SUCCESS:\n        {\n            return {\n                ...state,\n                currentMail: action.payload\n            };\n        }\n\n        case MailsActions.UPDATE_MAIL_SUCCESS:\n        {\n            return {\n                ...state,\n                entities: {\n                    ...state.entities,\n                    [action.payload.id]: action.payload\n                }\n            };\n        }\n\n        case MailsActions.SET_SEARCH_TEXT:\n        {\n\n            return {\n                ...state,\n                searchText: action.payload\n            };\n        }\n\n        case MailsActions.TOGGLE_IN_SELECTED_MAILS:\n        {\n\n            const mailId = action.payload;\n\n            let selectedMailIds = [...state.selectedMailIds];\n\n            if ( selectedMailIds.find(id => id === mailId) !== undefined )\n            {\n                selectedMailIds = selectedMailIds.filter(id => id !== mailId);\n            }\n            else\n            {\n                selectedMailIds = [...selectedMailIds, mailId];\n            }\n\n            return {\n                ...state,\n                selectedMailIds\n            };\n        }\n\n        case MailsActions.SELECT_ALL_MAILS:\n        {\n            const arr = Object.keys(state.entities).map(k => state.entities[k]);\n\n            const selectedMailIds = arr.map(mail => mail.id);\n\n            return {\n                ...state,\n                selectedMailIds\n            };\n        }\n\n        case MailsActions.DESELECT_ALL_MAILS:\n        {\n            return {\n                ...state,\n                selectedMailIds: []\n            };\n        }\n\n        case MailsActions.SELECT_MAILS_BY_PARAMETER:\n        {\n            const filter = action.payload;\n            const arr = Object.keys(state.entities).map(k => state.entities[k]);\n            const selectedMailIds = arr.filter(mail => mail[filter.parameter] === filter.value)\n                                       .map(mail => mail.id);\n            return {\n                ...state,\n                selectedMailIds\n            };\n        }\n\n        case MailsActions.SET_FOLDER_ON_SELECTED_MAILS:\n        {\n            const entities = {...state.entities};\n\n            state.selectedMailIds.map(id => {\n                entities[id] = {\n                    ...entities[id],\n                    folder: action.payload\n                };\n            });\n\n            return {\n                ...state,\n                entities\n            };\n        }\n\n        default:\n            return state;\n    }\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { MailNgrxService } from '../../mail.service';\nimport { Mail } from '../../mail.model';\nimport * as fromStore from '../../store';\n\n@Component({\n    selector       : 'mail-ngrx-list-item',\n    templateUrl    : './mail-list-item.component.html',\n    styleUrls      : ['./mail-list-item.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation  : ViewEncapsulation.None\n})\nexport class MailNgrxListItemComponent implements OnInit\n{\n    @Input() mail: Mail;\n    @HostBinding('class.selected') selected: boolean;\n    @HostBinding('class.unread') unread: boolean;\n    labels$: Observable<any>;\n    selectedMailIds$: Observable<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {ChangeDetectorRef} _changeDetectorRef\n     * @param {MailNgrxService} _mailNgrxService\n     * @param {Store} _store\n     */\n    constructor(\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _mailNgrxService: MailNgrxService,\n        private _store: Store<fromStore.MailAppState>\n    )\n    {\n        this.labels$ = this._store.pipe(select(fromStore.getLabelsArr));\n        this.selectedMailIds$ = this._store.pipe(select(fromStore.getSelectedMailIds));\n        this.selected = false;\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    ngOnInit(): void\n    {\n        // Set the initial values\n        this.mail = new Mail(this.mail);\n        this.unread = !this.mail.read;\n\n        this.selectedMailIds$.subscribe((selectedMailIds) => {\n            this.selected = selectedMailIds.length > 0 && selectedMailIds.find(id => id === this.mail.id) !== undefined;\n            this.refresh();\n        });\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    refresh(): void\n    {\n        this._changeDetectorRef.markForCheck();\n    }\n\n    onSelectedChange(): void\n    {\n        this._store.dispatch(new fromStore.ToggleInSelectedMails(this.mail.id));\n    }\n}\n","<div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n    <mat-checkbox [checked]=\"selected\" (change)=\"onSelectedChange()\"\n                  (click)=\"$event.stopPropagation();\">\n    </mat-checkbox>\n\n    <div class=\"info\" fxFlex FlexLayout=\"column\">\n\n        <div class=\"row-1\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n            <div class=\"name\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex>\n                <img class=\"avatar\" *ngIf=\"mail.from?.avatar\" alt=\"{{mail.from?.name}}\" src=\"{{mail.from?.avatar}}\"/>\n                <div class=\"avatar accent\" *ngIf=\"!mail.from?.avatar\">{{mail.from?.name[0]}}</div>\n                <span class=\"text-truncate\" *ngIf=\"mail?.from\">{{mail.from?.name}}</span>\n                <mat-icon class=\"s-16 ml-8\" *ngIf=\"mail.hasAttachments\">attachment</mat-icon>\n            </div>\n\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                <div class=\"time\">{{mail.time}}</div>\n            </div>\n\n        </div>\n\n        <div class=\"row-2\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n            <div fxLayout=\"column\" fxLayoutAlign=\"start start\">\n\n                <div class=\"subject text-truncate\">\n                    {{mail.subject}}\n                </div>\n\n                <div class=\"message text-truncate\" *ngIf=\"mail?.message\">\n                    {{mail.message | htmlToPlaintext | slice:0:180}}{{mail.message.length > 180 ? '...' : ''}}\n                </div>\n\n                <div class=\"labels\" fxLayout=\"row wrap\" fxHide fxShow.gt-sm>\n                    <div class=\"label\" *ngFor=\"let labelId of mail.labels\"\n                         fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                        <div class=\"label-color\"\n                             [ngStyle]=\"{'background-color': (labels$ | async) | getById:labelId:'color'}\"></div>\n                        <div class=\"label-title\">{{(labels$ | async) | getById:labelId:'title'}}</div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n","import { Action } from '@ngrx/store';\n\nexport const GET_FOLDERS = '[FOLDERS] GET FOLDERS';\nexport const GET_FOLDERS_SUCCESS = '[FOLDERS] GET FOLDERS SUCCESS';\nexport const GET_FOLDERS_FAILED = '[FOLDERS] GET FOLDERS FAILED';\n\n/**\n * Get Folders\n */\nexport class GetFolders implements Action\n{\n    readonly type = GET_FOLDERS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Folders Success\n */\nexport class GetFoldersSuccess implements Action\n{\n    readonly type = GET_FOLDERS_SUCCESS;\n\n    constructor(public payload: any)\n    {\n    }\n}\n\n/**\n * Get Folders Failed\n */\nexport class GetFoldersFailed implements Action\n{\n    readonly type = GET_FOLDERS_FAILED;\n\n    constructor(public payload: string)\n    {\n    }\n}\n\nexport type FoldersActionsAll\n    = GetFolders\n    | GetFoldersSuccess\n    | GetFoldersFailed;\n","import { MailsEffect } from './mails.effects';\nimport { FoldersEffect } from './folders.effects';\nimport { FiltersEffect } from './filters.effects';\nimport { LabelsEffect } from './labels.effects';\n\nexport const effects = [\n    MailsEffect,\n    FoldersEffect,\n    FiltersEffect,\n    LabelsEffect\n];\n\nexport * from './mails.effects';\nexport * from './folders.effects';\nexport * from './filters.effects';\nexport * from './labels.effects';\n"],"sourceRoot":"webpack:///"}
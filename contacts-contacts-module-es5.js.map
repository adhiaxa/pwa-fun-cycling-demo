{"version":3,"sources":["webpack:///src/app/main/apps/contacts/selected-bar/selected-bar.component.ts","webpack:///src/app/main/apps/contacts/selected-bar/selected-bar.component.html","webpack:///src/app/main/apps/contacts/contact.model.ts","webpack:///src/app/main/apps/contacts/contacts.module.ts","webpack:///src/app/main/apps/contacts/contacts.service.ts","webpack:///src/app/main/apps/contacts/sidebars/main/main.component.ts","webpack:///src/app/main/apps/contacts/sidebars/main/main.component.html","webpack:///src/app/main/apps/contacts/contacts.component.ts","webpack:///src/app/main/apps/contacts/contacts.component.html","webpack:///src/app/main/apps/contacts/contact-list/contact-list.component.ts","webpack:///src/app/main/apps/contacts/contact-list/contact-list.component.html","webpack:///src/app/main/apps/contacts/contact-form/contact-form.component.ts","webpack:///src/app/main/apps/contacts/contact-form/contact-form.component.html"],"names":["ContactsSelectedBarComponent","_contactsService","_matDialog","_unsubscribeAll","onSelectedContactsChanged","pipe","subscribe","selectedContacts","setTimeout","hasSelectedContacts","length","isIndeterminate","contacts","next","complete","selectContacts","deselectContacts","confirmDialogRef","open","disableClose","componentInstance","confirmMessage","afterClosed","result","deleteSelectedContacts","deselectAll","selectAll","Contact","contact","id","generateGUID","name","lastName","avatar","nickname","company","jobTitle","email","phone","address","birthday","notes","routes","path","component","resolve","ContactsModule","forChild","ContactsService","_httpClient","onContactsChanged","onUserDataChanged","onSearchTextChanged","onFilterChanged","route","state","Promise","reject","all","getContacts","getUserData","then","files","searchText","filter","filterBy","get","response","_contact","user","starred","includes","frequentContacts","filterArrayByString","map","index","indexOf","splice","push","filterParameter","filterValue","undefined","post","userData","contactIndex","contactId","find","ContactsMainSidebarComponent","changeFilter","ContactsComponent","_fuseSidebarService","searchInput","valueChanges","dialogRef","panelClass","data","action","updateContact","getRawValue","getSidebar","toggleOpen","toggleSidebar","newContact","$event","stopPropagation","ContactsContactListComponent","displayedColumns","dataSource","FilesDataSource","checkboxes","hasOwnProperty","actionType","formData","deleteContact","toggleSelectedContact","updateUserData","matDialogRef","ContactsContactFormDialogComponent","_data","_formBuilder","dialogTitle","contactForm","createContactForm","group"],"mappings":"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","file":"contacts-contacts-module-es5.js","sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { FuseConfirmDialogComponent } from '@fuse/components/confirm-dialog/confirm-dialog.component';\n\nimport { ContactsService } from 'app/main/apps/contacts/contacts.service';\n\n@Component({\n    selector   : 'selected-bar',\n    templateUrl: './selected-bar.component.html',\n    styleUrls  : ['./selected-bar.component.scss']\n})\nexport class ContactsSelectedBarComponent implements OnInit, OnDestroy\n{\n    confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\n    hasSelectedContacts: boolean;\n    isIndeterminate: boolean;\n    selectedContacts: string[];\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {ContactsService} _contactsService\n     * @param {MatDialog} _matDialog\n     */\n    constructor(\n        private _contactsService: ContactsService,\n        public _matDialog: MatDialog\n    )\n    {\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this._contactsService.onSelectedContactsChanged\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(selectedContacts => {\n                this.selectedContacts = selectedContacts;\n                setTimeout(() => {\n                    this.hasSelectedContacts = selectedContacts.length > 0;\n                    this.isIndeterminate = (selectedContacts.length !== this._contactsService.contacts.length && selectedContacts.length > 0);\n                }, 0);\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Select all\n     */\n    selectAll(): void\n    {\n        this._contactsService.selectContacts();\n    }\n\n    /**\n     * Deselect all\n     */\n    deselectAll(): void\n    {\n        this._contactsService.deselectContacts();\n    }\n\n    /**\n     * Delete selected contacts\n     */\n    deleteSelectedContacts(): void\n    {\n        this.confirmDialogRef = this._matDialog.open(FuseConfirmDialogComponent, {\n            disableClose: false\n        });\n\n        this.confirmDialogRef.componentInstance.confirmMessage = 'Are you sure you want to delete all selected contacts?';\n\n        this.confirmDialogRef.afterClosed()\n            .subscribe(result => {\n                if ( result )\n                {\n                    this._contactsService.deleteSelectedContacts();\n                }\n                this.confirmDialogRef = null;\n            });\n    }\n}\n","<div fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"p-24\">\n\n    <div class=\"close-button-wrapper\" fxFlex=\"0 1 auto\" fxFlex.gt-sm=\"220px\" (click)=\"deselectAll()\">\n        <button class=\"p-8\" mat-button fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <mat-icon class=\"mr-8\">arrow_back</mat-icon>\n            <span class=\"text-uppercase\">Back</span>\n        </button>\n    </div>\n\n    <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutAlign.gt-sm=\"space-between center\">\n\n        <div>\n            <span class=\"selected-contacts-count\">\n                <span class=\"mr-4\">{{selectedContacts.length}}</span>\n                <span>selected</span>\n            </span>\n\n            <button mat-icon-button [matMenuTriggerFor]=\"selectMenu\">\n                <mat-icon>arrow_drop_down</mat-icon>\n            </button>\n            <mat-menu #selectMenu=\"matMenu\">\n                <button mat-menu-item (click)=\"selectAll()\">Select all</button>\n                <button mat-menu-item (click)=\"deselectAll()\">Deselect all</button>\n            </mat-menu>\n\n        </div>\n\n        <div class=\"multi-select-actions\">\n            <button mat-icon-button (click)=\"deleteSelectedContacts()\" aria-label=\"delete selected\">\n                <mat-icon>delete</mat-icon>\n            </button>\n        </div>\n\n    </div>\n\n</div>\n","import { FuseUtils } from '@fuse/utils';\n\nexport class Contact\n{\n    id: string;\n    name: string;\n    lastName: string;\n    avatar: string;\n    nickname: string;\n    company: string;\n    jobTitle: string;\n    email: string;\n    phone: string;\n    address: string;\n    birthday: string;\n    notes: string;\n\n    /**\n     * Constructor\n     *\n     * @param contact\n     */\n    constructor(contact)\n    {\n        {\n            this.id = contact.id || FuseUtils.generateGUID();\n            this.name = contact.name || '';\n            this.lastName = contact.lastName || '';\n            this.avatar = contact.avatar || 'assets/images/avatars/profile.jpg';\n            this.nickname = contact.nickname || '';\n            this.company = contact.company || '';\n            this.jobTitle = contact.jobTitle || '';\n            this.email = contact.email || '';\n            this.phone = contact.phone || '';\n            this.address = contact.address || '';\n            this.birthday = contact.birthday || '';\n            this.notes = contact.notes || '';\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n\nimport { FuseSharedModule } from '@fuse/shared.module';\nimport { FuseConfirmDialogModule, FuseSidebarModule } from '@fuse/components';\n\nimport { ContactsComponent } from 'app/main/apps/contacts/contacts.component';\nimport { ContactsService } from 'app/main/apps/contacts/contacts.service';\nimport { ContactsContactListComponent } from 'app/main/apps/contacts/contact-list/contact-list.component';\nimport { ContactsSelectedBarComponent } from 'app/main/apps/contacts/selected-bar/selected-bar.component';\nimport { ContactsMainSidebarComponent } from 'app/main/apps/contacts/sidebars/main/main.component';\nimport { ContactsContactFormDialogComponent } from 'app/main/apps/contacts/contact-form/contact-form.component';\n\nconst routes: Routes = [\n    {\n        path     : '**',\n        component: ContactsComponent,\n        resolve  : {\n            contacts: ContactsService\n        }\n    }\n];\n\n@NgModule({\n    declarations   : [\n        ContactsComponent,\n        ContactsContactListComponent,\n        ContactsSelectedBarComponent,\n        ContactsMainSidebarComponent,\n        ContactsContactFormDialogComponent\n    ],\n    imports        : [\n        RouterModule.forChild(routes),\n\n        MatButtonModule,\n        MatCheckboxModule,\n        MatDatepickerModule,\n        MatFormFieldModule,\n        MatIconModule,\n        MatInputModule,\n        MatMenuModule,\n        MatRippleModule,\n        MatTableModule,\n        MatToolbarModule,\n\n        FuseSharedModule,\n        FuseConfirmDialogModule,\n        FuseSidebarModule\n    ],\n    providers      : [\n        ContactsService\n    ],\n    entryComponents: [\n        ContactsContactFormDialogComponent\n    ]\n})\nexport class ContactsModule\n{\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\n\nimport { FuseUtils } from '@fuse/utils';\n\nimport { Contact } from 'app/main/apps/contacts/contact.model';\n\n@Injectable()\nexport class ContactsService implements Resolve<any>\n{\n    onContactsChanged: BehaviorSubject<any>;\n    onSelectedContactsChanged: BehaviorSubject<any>;\n    onUserDataChanged: BehaviorSubject<any>;\n    onSearchTextChanged: Subject<any>;\n    onFilterChanged: Subject<any>;\n\n    contacts: Contact[];\n    user: any;\n    selectedContacts: string[] = [];\n\n    searchText: string;\n    filterBy: string;\n\n    /**\n     * Constructor\n     *\n     * @param {HttpClient} _httpClient\n     */\n    constructor(\n        private _httpClient: HttpClient\n    )\n    {\n        // Set the defaults\n        this.onContactsChanged = new BehaviorSubject([]);\n        this.onSelectedContactsChanged = new BehaviorSubject([]);\n        this.onUserDataChanged = new BehaviorSubject([]);\n        this.onSearchTextChanged = new Subject();\n        this.onFilterChanged = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Resolver\n     *\n     * @param {ActivatedRouteSnapshot} route\n     * @param {RouterStateSnapshot} state\n     * @returns {Observable<any> | Promise<any> | any}\n     */\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any> | Promise<any> | any\n    {\n        return new Promise((resolve, reject) => {\n\n            Promise.all([\n                this.getContacts(),\n                this.getUserData()\n            ]).then(\n                ([files]) => {\n\n                    this.onSearchTextChanged.subscribe(searchText => {\n                        this.searchText = searchText;\n                        this.getContacts();\n                    });\n\n                    this.onFilterChanged.subscribe(filter => {\n                        this.filterBy = filter;\n                        this.getContacts();\n                    });\n\n                    resolve();\n\n                },\n                reject\n            );\n        });\n    }\n\n    /**\n     * Get contacts\n     *\n     * @returns {Promise<any>}\n     */\n    getContacts(): Promise<any>\n    {\n        return new Promise((resolve, reject) => {\n                this._httpClient.get('api/contacts-contacts')\n                    .subscribe((response: any) => {\n\n                        this.contacts = response;\n\n                        if ( this.filterBy === 'starred' )\n                        {\n                            this.contacts = this.contacts.filter(_contact => {\n                                return this.user.starred.includes(_contact.id);\n                            });\n                        }\n\n                        if ( this.filterBy === 'frequent' )\n                        {\n                            this.contacts = this.contacts.filter(_contact => {\n                                return this.user.frequentContacts.includes(_contact.id);\n                            });\n                        }\n\n                        if ( this.searchText && this.searchText !== '' )\n                        {\n                            this.contacts = FuseUtils.filterArrayByString(this.contacts, this.searchText);\n                        }\n\n                        this.contacts = this.contacts.map(contact => {\n                            return new Contact(contact);\n                        });\n\n                        this.onContactsChanged.next(this.contacts);\n                        resolve(this.contacts);\n                    }, reject);\n            }\n        );\n    }\n\n    /**\n     * Get user data\n     *\n     * @returns {Promise<any>}\n     */\n    getUserData(): Promise<any>\n    {\n        return new Promise((resolve, reject) => {\n                this._httpClient.get('api/contacts-user/5725a6802d10e277a0f35724')\n                    .subscribe((response: any) => {\n                        this.user = response;\n                        this.onUserDataChanged.next(this.user);\n                        resolve(this.user);\n                    }, reject);\n            }\n        );\n    }\n\n    /**\n     * Toggle selected contact by id\n     *\n     * @param id\n     */\n    toggleSelectedContact(id): void\n    {\n        // First, check if we already have that contact as selected...\n        if ( this.selectedContacts.length > 0 )\n        {\n            const index = this.selectedContacts.indexOf(id);\n\n            if ( index !== -1 )\n            {\n                this.selectedContacts.splice(index, 1);\n\n                // Trigger the next event\n                this.onSelectedContactsChanged.next(this.selectedContacts);\n\n                // Return\n                return;\n            }\n        }\n\n        // If we don't have it, push as selected\n        this.selectedContacts.push(id);\n\n        // Trigger the next event\n        this.onSelectedContactsChanged.next(this.selectedContacts);\n    }\n\n    /**\n     * Toggle select all\n     */\n    toggleSelectAll(): void\n    {\n        if ( this.selectedContacts.length > 0 )\n        {\n            this.deselectContacts();\n        }\n        else\n        {\n            this.selectContacts();\n        }\n    }\n\n    /**\n     * Select contacts\n     *\n     * @param filterParameter\n     * @param filterValue\n     */\n    selectContacts(filterParameter?, filterValue?): void\n    {\n        this.selectedContacts = [];\n\n        // If there is no filter, select all contacts\n        if ( filterParameter === undefined || filterValue === undefined )\n        {\n            this.selectedContacts = [];\n            this.contacts.map(contact => {\n                this.selectedContacts.push(contact.id);\n            });\n        }\n\n        // Trigger the next event\n        this.onSelectedContactsChanged.next(this.selectedContacts);\n    }\n\n    /**\n     * Update contact\n     *\n     * @param contact\n     * @returns {Promise<any>}\n     */\n    updateContact(contact): Promise<any>\n    {\n        return new Promise((resolve, reject) => {\n\n            this._httpClient.post('api/contacts-contacts/' + contact.id, {...contact})\n                .subscribe(response => {\n                    this.getContacts();\n                    resolve(response);\n                });\n        });\n    }\n\n    /**\n     * Update user data\n     *\n     * @param userData\n     * @returns {Promise<any>}\n     */\n    updateUserData(userData): Promise<any>\n    {\n        return new Promise((resolve, reject) => {\n            this._httpClient.post('api/contacts-user/' + this.user.id, {...userData})\n                .subscribe(response => {\n                    this.getUserData();\n                    this.getContacts();\n                    resolve(response);\n                });\n        });\n    }\n\n    /**\n     * Deselect contacts\n     */\n    deselectContacts(): void\n    {\n        this.selectedContacts = [];\n\n        // Trigger the next event\n        this.onSelectedContactsChanged.next(this.selectedContacts);\n    }\n\n    /**\n     * Delete contact\n     *\n     * @param contact\n     */\n    deleteContact(contact): void\n    {\n        const contactIndex = this.contacts.indexOf(contact);\n        this.contacts.splice(contactIndex, 1);\n        this.onContactsChanged.next(this.contacts);\n    }\n\n    /**\n     * Delete selected contacts\n     */\n    deleteSelectedContacts(): void\n    {\n        for ( const contactId of this.selectedContacts )\n        {\n            const contact = this.contacts.find(_contact => {\n                return _contact.id === contactId;\n            });\n            const contactIndex = this.contacts.indexOf(contact);\n            this.contacts.splice(contactIndex, 1);\n        }\n        this.onContactsChanged.next(this.contacts);\n        this.deselectContacts();\n    }\n\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { ContactsService } from 'app/main/apps/contacts/contacts.service';\n\n@Component({\n    selector   : 'contacts-main-sidebar',\n    templateUrl: './main.component.html',\n    styleUrls  : ['./main.component.scss']\n})\nexport class ContactsMainSidebarComponent implements OnInit, OnDestroy\n{\n    user: any;\n    filterBy: string;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {ContactsService} _contactsService\n     */\n    constructor(\n        private _contactsService: ContactsService\n    )\n    {\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this.filterBy = this._contactsService.filterBy || 'all';\n\n        this._contactsService.onUserDataChanged\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(user => {\n                this.user = user;\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Change the filter\n     *\n     * @param filter\n     */\n    changeFilter(filter): void\n    {\n        this.filterBy = filter;\n        this._contactsService.onFilterChanged.next(this.filterBy);\n    }\n}\n","<div class=\"sidebar-content\">\n\n    <div class=\"card\">\n\n        <!-- SIDEBAR HEADER -->\n        <div class=\"header p-24\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n            <!-- USER -->\n            <img [src]=\"user.avatar\" class=\"avatar mr-16\" [alt]=\"user.name\"/>\n            <span class=\"h5\">{{user.name}}</span>\n            <!-- / USER -->\n\n        </div>\n        <!-- / SIDEBAR HEADER -->\n\n        <!-- SIDEBAR CONTENT -->\n        <div class=\"content py-16\" fusePerfectScrollbar>\n\n            <div class=\"nav material2\">\n\n                <div class=\"nav-item\" aria-label=\"inbox\">\n                    <a class=\"nav-link\" matRipple (click)=\"changeFilter('all')\"\n                       [ngClass]=\"{'active accent':filterBy ==='all'}\">\n                        <span class=\"title\">All Contacts</span>\n                    </a>\n                </div>\n\n                <div class=\"nav-item\" aria-label=\"frequently contacted\" (click)=\"changeFilter('frequent')\">\n                    <a class=\"nav-link\" matRipple [ngClass]=\"{'active accent':filterBy ==='frequent'}\">\n                        <div class=\"title\">Freequently contacted</div>\n                    </a>\n                </div>\n\n                <div class=\"nav-item\" aria-label=\"starred\" (click)=\"changeFilter('starred')\">\n                    <a class=\"nav-link\" matRipple [ngClass]=\"{'active accent':filterBy ==='starred'}\">\n                        <div class=\"title\">Starred Contacts</div>\n                    </a>\n                </div>\n            </div>\n\n        </div>\n\n    </div>\n\n</div>\n<!-- / SIDEBAR CONTENT -->\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\nimport { fuseAnimations } from '@fuse/animations';\nimport { FuseSidebarService } from '@fuse/components/sidebar/sidebar.service';\n\nimport { ContactsService } from 'app/main/apps/contacts/contacts.service';\nimport { ContactsContactFormDialogComponent } from 'app/main/apps/contacts/contact-form/contact-form.component';\n\n@Component({\n    selector     : 'contacts',\n    templateUrl  : './contacts.component.html',\n    styleUrls    : ['./contacts.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    animations   : fuseAnimations\n})\nexport class ContactsComponent implements OnInit, OnDestroy\n{\n    dialogRef: any;\n    hasSelectedContacts: boolean;\n    searchInput: FormControl;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {ContactsService} _contactsService\n     * @param {FuseSidebarService} _fuseSidebarService\n     * @param {MatDialog} _matDialog\n     */\n    constructor(\n        private _contactsService: ContactsService,\n        private _fuseSidebarService: FuseSidebarService,\n        private _matDialog: MatDialog\n    )\n    {\n        // Set the defaults\n        this.searchInput = new FormControl('');\n\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this._contactsService.onSelectedContactsChanged\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(selectedContacts => {\n                this.hasSelectedContacts = selectedContacts.length > 0;\n            });\n\n        this.searchInput.valueChanges\n            .pipe(\n                takeUntil(this._unsubscribeAll),\n                debounceTime(300),\n                distinctUntilChanged()\n            )\n            .subscribe(searchText => {\n                this._contactsService.onSearchTextChanged.next(searchText);\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Reset the search\n        this._contactsService.onSearchTextChanged.next('');\n\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * New contact\n     */\n    newContact(): void\n    {\n        this.dialogRef = this._matDialog.open(ContactsContactFormDialogComponent, {\n            panelClass: 'contact-form-dialog',\n            data      : {\n                action: 'new'\n            }\n        });\n\n        this.dialogRef.afterClosed()\n            .subscribe((response: FormGroup) => {\n                if ( !response )\n                {\n                    return;\n                }\n\n                this._contactsService.updateContact(response.getRawValue());\n            });\n    }\n\n    /**\n     * Toggle the sidebar\n     *\n     * @param name\n     */\n    toggleSidebar(name): void\n    {\n        this._fuseSidebarService.getSidebar(name).toggleOpen();\n    }\n}\n","<div id=\"contacts\" class=\"page-layout simple left-sidebar inner-sidebar inner-scroll\">\n\n    <!-- HEADER -->\n    <div class=\"header accent p-16 p-sm-24\" fxLayout=\"column\" fxLayoutAlign=\"start\"\n         fxLayout.gt-xs=\"row\" fxLayoutAlign.gt-xs=\"space-between center\">\n\n        <!-- APP TITLE -->\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n            <button mat-icon-button class=\"sidebar-toggle mr-12\" fxHide.gt-sm\n                    (click)=\"toggleSidebar('contacts-main-sidebar')\">\n                <mat-icon>menu</mat-icon>\n            </button>\n\n            <div class=\"logo\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                <mat-icon class=\"logo-icon mr-16\"\n                          [@animate]=\"{value:'*',params:{delay:'50ms',scale:'0.2'}}\">account_box\n                </mat-icon>\n                <span class=\"logo-text h1\" [@animate]=\"{value:'*',params:{delay:'100ms',x:'-25px'}}\">\n                    Contacts\n                </span>\n            </div>\n\n        </div>\n        <!-- / APP TITLE -->\n\n        <!-- SEARCH -->\n        <div class=\"ml-sm-32\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxFlex>\n\n            <div class=\"search-wrapper mt-16 mt-sm-0\">\n\n                <div class=\"search\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                    <mat-icon>search</mat-icon>\n                    <input [formControl]=\"searchInput\" placeholder=\"Search for a contact\">\n                </div>\n\n            </div>\n\n        </div>\n        <!-- / SEARCH -->\n\n    </div>\n    <!-- / HEADER -->\n\n    <!-- SELECTED BAR -->\n    <selected-bar class=\"accent-600\" *ngIf=\"hasSelectedContacts\" [@slideInTop]></selected-bar>\n    <!-- / SELECTED BAR -->\n\n    <!-- CONTENT -->\n    <div class=\"content\">\n\n        <!-- SIDEBAR -->\n        <fuse-sidebar class=\"sidebar\" name=\"contacts-main-sidebar\" position=\"left\" lockedOpen=\"gt-sm\">\n\n            <!-- SIDEBAR CONTENT -->\n            <div class=\"content\" fusePerfectScrollbar>\n                <contacts-main-sidebar [@animate]=\"{value:'*'}\"></contacts-main-sidebar>\n            </div>\n            <!-- / SIDEBAR CONTENT -->\n\n        </fuse-sidebar>\n        <!-- / SIDEBAR -->\n\n        <!-- CENTER -->\n        <div class=\"center p-24 pb-56 pr-sm-92\" fusePerfectScrollbar>\n\n            <!-- CONTENT -->\n            <div class=\"content\">\n                <contacts-contact-list></contacts-contact-list>\n            </div>\n            <!-- / CONTENT -->\n\n        </div>\n        <!-- / CENTER -->\n\n    </div>\n    <!-- / CONTENT-->\n\n</div>\n\n<!-- ADD CONTACT BUTTON -->\n<button mat-fab class=\"accent\" id=\"add-contact-button\" (click)=\"newContact()\" aria-label=\"add contact\"\n        [@animate]=\"{value:'*', params:{delay:'300ms',scale:'.2'}}\">\n    <mat-icon>person_add</mat-icon>\n</button>\n<!-- / ADD CONTACT BUTTON -->\n","import { Component, OnDestroy, OnInit, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { DataSource } from '@angular/cdk/collections';\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { fuseAnimations } from '@fuse/animations';\nimport { FuseConfirmDialogComponent } from '@fuse/components/confirm-dialog/confirm-dialog.component';\n\nimport { ContactsService } from 'app/main/apps/contacts/contacts.service';\nimport { ContactsContactFormDialogComponent } from 'app/main/apps/contacts/contact-form/contact-form.component';\n\n@Component({\n    selector     : 'contacts-contact-list',\n    templateUrl  : './contact-list.component.html',\n    styleUrls    : ['./contact-list.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    animations   : fuseAnimations\n})\nexport class ContactsContactListComponent implements OnInit, OnDestroy\n{\n    @ViewChild('dialogContent')\n    dialogContent: TemplateRef<any>;\n\n    contacts: any;\n    user: any;\n    dataSource: FilesDataSource | null;\n    displayedColumns = ['checkbox', 'avatar', 'name', 'email', 'phone', 'jobTitle', 'buttons'];\n    selectedContacts: any[];\n    checkboxes: {};\n    dialogRef: any;\n    confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\n\n    // Private\n    private _unsubscribeAll: Subject<any>;\n\n    /**\n     * Constructor\n     *\n     * @param {ContactsService} _contactsService\n     * @param {MatDialog} _matDialog\n     */\n    constructor(\n        private _contactsService: ContactsService,\n        public _matDialog: MatDialog\n    )\n    {\n        // Set the private defaults\n        this._unsubscribeAll = new Subject();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        this.dataSource = new FilesDataSource(this._contactsService);\n\n        this._contactsService.onContactsChanged\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(contacts => {\n                this.contacts = contacts;\n\n                this.checkboxes = {};\n                contacts.map(contact => {\n                    this.checkboxes[contact.id] = false;\n                });\n            });\n\n        this._contactsService.onSelectedContactsChanged\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(selectedContacts => {\n                for ( const id in this.checkboxes )\n                {\n                    if ( !this.checkboxes.hasOwnProperty(id) )\n                    {\n                        continue;\n                    }\n\n                    this.checkboxes[id] = selectedContacts.includes(id);\n                }\n                this.selectedContacts = selectedContacts;\n            });\n\n        this._contactsService.onUserDataChanged\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(user => {\n                this.user = user;\n            });\n\n        this._contactsService.onFilterChanged\n            .pipe(takeUntil(this._unsubscribeAll))\n            .subscribe(() => {\n                this._contactsService.deselectContacts();\n            });\n    }\n\n    /**\n     * On destroy\n     */\n    ngOnDestroy(): void\n    {\n        // Unsubscribe from all subscriptions\n        this._unsubscribeAll.next();\n        this._unsubscribeAll.complete();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Edit contact\n     *\n     * @param contact\n     */\n    editContact(contact): void\n    {\n        this.dialogRef = this._matDialog.open(ContactsContactFormDialogComponent, {\n            panelClass: 'contact-form-dialog',\n            data      : {\n                contact: contact,\n                action : 'edit'\n            }\n        });\n\n        this.dialogRef.afterClosed()\n            .subscribe(response => {\n                if ( !response )\n                {\n                    return;\n                }\n                const actionType: string = response[0];\n                const formData: FormGroup = response[1];\n                switch ( actionType )\n                {\n                    /**\n                     * Save\n                     */\n                    case 'save':\n\n                        this._contactsService.updateContact(formData.getRawValue());\n\n                        break;\n                    /**\n                     * Delete\n                     */\n                    case 'delete':\n\n                        this.deleteContact(contact);\n\n                        break;\n                }\n            });\n    }\n\n    /**\n     * Delete Contact\n     */\n    deleteContact(contact): void\n    {\n        this.confirmDialogRef = this._matDialog.open(FuseConfirmDialogComponent, {\n            disableClose: false\n        });\n\n        this.confirmDialogRef.componentInstance.confirmMessage = 'Are you sure you want to delete?';\n\n        this.confirmDialogRef.afterClosed().subscribe(result => {\n            if ( result )\n            {\n                this._contactsService.deleteContact(contact);\n            }\n            this.confirmDialogRef = null;\n        });\n\n    }\n\n    /**\n     * On selected change\n     *\n     * @param contactId\n     */\n    onSelectedChange(contactId): void\n    {\n        this._contactsService.toggleSelectedContact(contactId);\n    }\n\n    /**\n     * Toggle star\n     *\n     * @param contactId\n     */\n    toggleStar(contactId): void\n    {\n        if ( this.user.starred.includes(contactId) )\n        {\n            this.user.starred.splice(this.user.starred.indexOf(contactId), 1);\n        }\n        else\n        {\n            this.user.starred.push(contactId);\n        }\n\n        this._contactsService.updateUserData(this.user);\n    }\n}\n\nexport class FilesDataSource extends DataSource<any>\n{\n    /**\n     * Constructor\n     *\n     * @param {ContactsService} _contactsService\n     */\n    constructor(\n        private _contactsService: ContactsService\n    )\n    {\n        super();\n    }\n\n    /**\n     * Connect function called by the table to retrieve one stream containing the data to render.\n     * @returns {Observable<any[]>}\n     */\n    connect(): Observable<any[]>\n    {\n        return this._contactsService.onContactsChanged;\n    }\n\n    /**\n     * Disconnect\n     */\n    disconnect(): void\n    {\n    }\n}\n","<mat-table #table [dataSource]=\"dataSource\"\n           [@animateStagger]=\"{value:'50'}\">\n    <!-- Checkbox Column -->\n    <ng-container matColumnDef=\"checkbox\">\n        <mat-header-cell *matHeaderCellDef></mat-header-cell>\n        <mat-cell *matCellDef=\"let contact\">\n            <mat-checkbox [(ngModel)]=\"checkboxes[contact.id]\" (ngModelChange)=\"onSelectedChange(contact.id)\"\n                          (click)=\"$event.stopPropagation()\">\n            </mat-checkbox>\n        </mat-cell>\n    </ng-container>\n\n    <!-- Avatar Column -->\n    <ng-container matColumnDef=\"avatar\">\n        <mat-header-cell *matHeaderCellDef></mat-header-cell>\n        <mat-cell *matCellDef=\"let contact\">\n            <img class=\"avatar\" *ngIf=\"contact.avatar\" [alt]=\"contact.name\"\n                 [src]=\"contact.avatar\"/>\n        </mat-cell>\n    </ng-container>\n\n    <!-- Name Column -->\n    <ng-container matColumnDef=\"name\">\n        <mat-header-cell *matHeaderCellDef>Name</mat-header-cell>\n        <mat-cell *matCellDef=\"let contact\">\n            <p class=\"text-truncate font-weight-600\">{{contact.name}} {{contact.lastName}}</p>\n        </mat-cell>\n    </ng-container>\n\n    <!-- Email Column -->\n    <ng-container matColumnDef=\"email\">\n        <mat-header-cell *matHeaderCellDef fxHide fxShow.gt-sm>Email</mat-header-cell>\n        <mat-cell *matCellDef=\"let contact\" fxHide fxShow.gt-sm>\n            <p class=\"email text-truncate\">\n                {{contact.email}}\n            </p>\n        </mat-cell>\n    </ng-container>\n\n    <!-- Phone Column -->\n    <ng-container matColumnDef=\"phone\">\n        <mat-header-cell *matHeaderCellDef fxHide fxShow.gt-md>Phone</mat-header-cell>\n        <mat-cell *matCellDef=\"let contact\" fxHide fxShow.gt-md>\n            <p class=\"phone text-truncate\">\n                {{contact.phone}}\n            </p>\n        </mat-cell>\n    </ng-container>\n\n    <!-- Job Title Column -->\n    <ng-container matColumnDef=\"jobTitle\">\n        <mat-header-cell *matHeaderCellDef fxHide fxShow.gt-lg>Job title</mat-header-cell>\n        <mat-cell *matCellDef=\"let contact\" fxHide fxShow.gt-lg>\n            <p class=\"job-title text-truncate\">\n                {{contact.jobTitle}}\n            </p>\n        </mat-cell>\n    </ng-container>\n\n    <!-- Company Column -->\n    <ng-container matColumnDef=\"company\">\n        <mat-header-cell *matHeaderCellDef fxHide fxShow.gt-lg>Company</mat-header-cell>\n        <mat-cell *matCellDef=\"let contact\" fxHide fxShow.gt-lg>\n            <p class=\"company text-truncate\">\n                {{contact.company}}\n            </p>\n        </mat-cell>\n    </ng-container>\n\n    <!-- Buttons Column -->\n    <ng-container matColumnDef=\"buttons\">\n        <mat-header-cell *matHeaderCellDef></mat-header-cell>\n        <mat-cell *matCellDef=\"let contact\">\n            <div fxFlex=\"row\" fxLayoutAlign=\"end center\">\n                <button mat-icon-button (click)=\"$event.stopPropagation();toggleStar(contact.id)\" aria-label=\"Toggle star\">\n                    <mat-icon class=\"amber-fg\" *ngIf=\"user.starred.includes(contact.id)\">star</mat-icon>\n                    <mat-icon class=\"secondary-text\" *ngIf=\"!user.starred.includes(contact.id)\">star_border</mat-icon>\n                </button>\n\n                <button mat-icon-button [matMenuTriggerFor]=\"moreMenu\" aria-label=\"More\"\n                        (click)=\"$event.stopPropagation();\">\n                    <mat-icon class=\"secondary-text\">more_vert</mat-icon>\n                </button>\n\n                <mat-menu #moreMenu=\"matMenu\">\n                    <button mat-menu-item aria-label=\"remove\" (click)=\"deleteContact(contact)\">\n                        <mat-icon>delete</mat-icon>\n                        <span>Remove</span>\n                    </button>\n                </mat-menu>\n            </div>\n\n        </mat-cell>\n    </ng-container>\n\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n    <mat-row *matRowDef=\"let contact; columns: displayedColumns;\"\n             class=\"contact\"\n             (click)=\"editContact(contact)\"\n             [ngClass]=\"{'accent-50':checkboxes[contact.id]}\"\n             [@animate]=\"{value:'*',params:{y:'100%'}}\">\n    </mat-row>\n</mat-table>\n\n\n","import { Component, Inject, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\nimport { Contact } from 'app/main/apps/contacts/contact.model';\n\n@Component({\n    selector     : 'contacts-contact-form-dialog',\n    templateUrl  : './contact-form.component.html',\n    styleUrls    : ['./contact-form.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class ContactsContactFormDialogComponent\n{\n    action: string;\n    contact: Contact;\n    contactForm: FormGroup;\n    dialogTitle: string;\n\n    /**\n     * Constructor\n     *\n     * @param {MatDialogRef<ContactsContactFormDialogComponent>} matDialogRef\n     * @param _data\n     * @param {FormBuilder} _formBuilder\n     */\n    constructor(\n        public matDialogRef: MatDialogRef<ContactsContactFormDialogComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: any,\n        private _formBuilder: FormBuilder\n    )\n    {\n        // Set the defaults\n        this.action = _data.action;\n\n        if ( this.action === 'edit' )\n        {\n            this.dialogTitle = 'Edit Contact';\n            this.contact = _data.contact;\n        }\n        else\n        {\n            this.dialogTitle = 'New Contact';\n            this.contact = new Contact({});\n        }\n\n        this.contactForm = this.createContactForm();\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Create contact form\n     *\n     * @returns {FormGroup}\n     */\n    createContactForm(): FormGroup\n    {\n        return this._formBuilder.group({\n            id      : [this.contact.id],\n            name    : [this.contact.name],\n            lastName: [this.contact.lastName],\n            avatar  : [this.contact.avatar],\n            nickname: [this.contact.nickname],\n            company : [this.contact.company],\n            jobTitle: [this.contact.jobTitle],\n            email   : [this.contact.email],\n            phone   : [this.contact.phone],\n            address : [this.contact.address],\n            birthday: [this.contact.birthday],\n            notes   : [this.contact.notes]\n        });\n    }\n}\n","<div class=\"dialog-content-wrapper\">\n    <mat-toolbar matDialogTitle class=\"mat-accent m-0\">\n        <mat-toolbar-row fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n            <span class=\"title dialog-title\">{{dialogTitle}}</span>\n            <button mat-icon-button (click)=\"matDialogRef.close()\" aria-label=\"Close dialog\">\n                <mat-icon>close</mat-icon>\n            </button>\n        </mat-toolbar-row>\n\n        <mat-toolbar-row class=\"toolbar-bottom py-16\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n            <img [src]=\"contact.avatar\" class=\"avatar contact-avatar huge m-0\"\n                 [alt]=\"contact.name\"/>\n            <div class=\"contact-name mt-8\">{{contact.name}} {{contact.lastName}}</div>\n        </mat-toolbar-row>\n    </mat-toolbar>\n\n    <div mat-dialog-content class=\"p-24 pb-0 m-0\" fusePerfectScrollbar>\n\n        <form [formGroup]=\"contactForm\">\n\n            <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                <mat-form-field appearance=\"outline\" fxFlex>\n                    <mat-label>Name</mat-label>\n                    <mat-icon matSuffix class=\"secondary-text\">account_circle</mat-icon>\n                    <input name=\"name\" formControlName=\"name\" matInput required>\n                </mat-form-field>\n            </div>\n\n            <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                <mat-form-field appearance=\"outline\" fxFlex>\n                    <mat-label>Lastname</mat-label>\n                    <mat-icon matSuffix class=\"secondary-text\">account_circle</mat-icon>\n                    <input name=\"lastName\" formControlName=\"lastName\" matInput>\n                </mat-form-field>\n            </div>\n\n            <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                <mat-form-field appearance=\"outline\" fxFlex>\n                    <mat-label>Nickname</mat-label>\n                    <mat-icon matSuffix class=\"secondary-text\">star</mat-icon>\n                    <input name=\"nickname\" formControlName=\"nickname\" matInput>\n                </mat-form-field>\n            </div>\n\n            <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                <mat-form-field appearance=\"outline\" fxFlex>\n                    <mat-label>Phone number</mat-label>\n                    <mat-icon matSuffix class=\"secondary-text\">phone</mat-icon>\n                    <input formControlName=\"phone\" matInput>\n                </mat-form-field>\n            </div>\n\n            <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                <mat-form-field appearance=\"outline\" fxFlex>\n                    <mat-label>Email</mat-label>\n                    <mat-icon matSuffix class=\"secondary-text\">email</mat-icon>\n                    <input name=\"email\" formControlName=\"email\" matInput type=\"email\">\n                </mat-form-field>\n            </div>\n\n            <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                <mat-form-field appearance=\"outline\" fxFlex>\n                    <mat-label>Company</mat-label>\n                    <mat-icon matSuffix class=\"secondary-text\">domain</mat-icon>\n                    <input name=\"company\" formControlName=\"company\" matInput>\n                </mat-form-field>\n            </div>\n\n            <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                <mat-form-field appearance=\"outline\" fxFlex>\n                    <mat-label>Job title</mat-label>\n                    <mat-icon matSuffix class=\"secondary-text\">work</mat-icon>\n                    <input name=\"jobTitle\" formControlName=\"jobTitle\" matInput>\n                </mat-form-field>\n            </div>\n\n            <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                <mat-form-field appearance=\"outline\" fxFlex>\n                    <mat-label>Birthday</mat-label>\n                    <input matInput [matDatepicker]=\"birthdayDatePicker\" name=\"birthday\" formControlName=\"birthday\">\n                    <mat-datepicker-toggle matSuffix [for]=\"birthdayDatePicker\"></mat-datepicker-toggle>\n                    <mat-datepicker #birthdayDatePicker></mat-datepicker>\n                </mat-form-field>\n            </div>\n\n            <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                <mat-form-field appearance=\"outline\" fxFlex>\n                    <mat-label>Address</mat-label>\n                    <mat-icon matSuffix class=\"secondary-text\">home</mat-icon>\n                    <input name=\"address\" formControlName=\"address\" matInput>\n                </mat-form-field>\n            </div>\n\n            <div fxLayout=\"row\" class=\"textarea-wrapper\" fxLayoutAlign=\"start start\">\n                <mat-form-field appearance=\"outline\" fxFlex>\n                    <mat-label>Notes</mat-label>\n                    <textarea name=\"notes\" formControlName=\"notes\" matInput type=\"text\" max-rows=\"4\"></textarea>\n                </mat-form-field>\n            </div>\n\n        </form>\n\n    </div>\n\n    <div mat-dialog-actions class=\"m-0 p-16\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\n\n        <button *ngIf=\"action === 'edit'\"\n                mat-button\n                class=\"mr-8\"\n                (click)=\"matDialogRef.close(['delete',contactForm])\"\n                aria-label=\"Delete\"\n                matTooltip=\"Delete\">\n            DELETE\n        </button>\n\n        <button *ngIf=\"action !== 'edit'\"\n                mat-button\n                class=\"save-button\"\n                (click)=\"matDialogRef.close(contactForm)\"\n                [disabled]=\"contactForm.invalid\"\n                aria-label=\"SAVE\">\n            ADD\n        </button>\n\n        <button *ngIf=\"action === 'edit'\"\n                mat-button\n                class=\"save-button\"\n                (click)=\"matDialogRef.close(['save',contactForm])\"\n                [disabled]=\"contactForm.invalid\"\n                aria-label=\"SAVE\">\n            SAVE\n        </button>\n\n    </div>\n</div>\n"]}